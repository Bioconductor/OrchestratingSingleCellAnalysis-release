[
["index.html", "Orchestrating Single-Cell Analysis with Bioconductor Welcome", " Orchestrating Single-Cell Analysis with Bioconductor 2020-01-09 Welcome This is the website for “Orchestrating Single-Cell Analysis with Bioconductor”, a book that teaches users some common workflows for the analysis of single-cell RNA-seq data (scRNA-seq). This book will teach you how to make use of cutting-edge Bioconductor tools to process, analyze, visualize, and explore scRNA-seq data. Additionally, it serves as an online companion for the manuscript “Orchestrating Single-Cell Analysis with Bioconductor”. While we focus here on scRNA-seq data, a newer technology that profiles transcriptomes at the single-cell level, many of the tools, conventions, and analysis strategies utilized throughout this book are broadly applicable to other types of assays. By learning the grammar of Bioconductor workflows, we hope to provide you a starting point for the exploration of your own data, whether it be scRNA-seq or otherwise. This book is organized into three parts. In the Preamble, we introduce the book and dive into resources for learning R and Bioconductor (both at a beginner and developer level). Part I ends with a tutorial for a key data infrastructure, the SingleCellExperiment class, that is used throughout Bioconductor for single-cell analysis and in the subsequent section. The second part, Focus Topics, begins with an overview of the framework for analysis of scRNA-seq data, with deeper dives into specific topics are presented in each subsequent chapter. THe third part, Workflows, provides primarily code detailing the analysis of various datasets throughout the book. Finally, the Appendix highlights our contributors. If you would like to cite this work, please use the reference “Orchestrating Single-Cell Analysis with Bioconductor”. The book is written in RMarkdown with bookdown. OSCA is a collaborative effort, supported by various folks from the Bioconductor team who have contributed workflows, fixes, and improvements. This website is free to use, and is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 3.0 License. Version 0.0.1.9999 Built on 2020-01-09 "],
["introduction.html", "Chapter 1 Introduction 1.1 What you will learn 1.2 What you won’t learn 1.3 Who we wrote this for 1.4 Why we wrote this 1.5 Acknowledgements", " Chapter 1 Introduction Bioconductor is an open source, open development software project to provide tools for the analysis and comprehension of high-throughput genomic data. It is based primarily on the R programming language. 1.1 What you will learn The goal of this book is to provide a solid foundation in the usage of Bioconductor tools for single-cell RNA-seq analysis by walking through various steps of typical workflows using example datasets. We strive to tackle key concepts covered in the manuscript, “Orchestrating Single-Cell Analysis with Bioconductor”, with each workflow covering these in varying detail, as well as essential preliminaries that are important for following along with the workflows on your own. 1.1.1 Preliminaries For those unfamiliar with R (and those looking to learn more), we recommend reading the Learning R and More chapter, which first and foremost covers how to get started with R. We point to many great online resources for learning R, as well as related tools that are nice to know for bioinformatic analysis. For advanced users, we also point to some extra resources that go beyond the basics. While we provide an extensive list of learning resources for the interested audience in this chapter, we only ask for some familiarity with R before going to the next section. We then briefly cover getting started with Using R and Bioconductor. Bioconductor, being its own repository, has a unique set of tools, documentation, resources, and practices that benefit from some extra explanation. Data Infrastructure merits a separate chapter. The reason for this is that common data containers are an essential part of Bioconductor workflows because they enable interoperability across packages, allowing for “plug and play” usage of cutting-edge tools. Specifically, here we cover the SingleCellExperiment class in depth, as it has become the working standard for Bioconductor based single-cell analysis packages. Finally, before diving into the various workflows, armed with knowledge about the SingleCellExperiment class, we briefly discuss the datasets that will be used throughout the book in About the Data. 1.1.2 Workflows All workflows begin with data import and subsequent quality control and normalization, going from a raw (count) expression matrix to a clean one. This includes adjusting for experimental factors and possibly even latent factors. Using the clean expression matrix, feature selection strategies can be applied to select the features (genes) driving heterogeneity. Furthermore, these features can then be used to perform dimensionality reduction, which enables downstream analysis that would not otherwise be possible and visualization in 2 or 3 dimensions. From there, the workflows largely focus on differing downstream analyses. Clustering details how to segment a scRNA-seq dataset, and differential expression provides a means to determine what drives the differences between different groups of cells. Integrating datasets walks through merging scRNA-seq datasets, an area of need as the number of scRNA-seq datasets continues to grow and comparisons between datasets must be done. Finally, we touch upon how to work with large scale data, specifically where it becomes impractical or impossible to work with data solely in-memory. As an added bonus, we dedicate a chapter to interactive visualization, which focuses on using the iSEE package to enable active exploration of a single cell experiment’s data. 1.2 What you won’t learn The field of bioinformatic analysis is large and filled with many potential trajectories depending on the biological system being studied and technology being deployed. Here, we only briefly survey some of the many tools available for the analysis of scRNA-seq, focusing on Bioconductor packages. It is impossible to thoroughly review the plethora of tools available through R and Bioconductor for biological analysis in one book, but we hope to provide the means for further exploration on your own. Thus, it goes without saying that you may not learn the optimal workflow for your own data from our examples - while we strive to provide high quality templates, they should be treated as just that - a template from which to extend upon for your own analyses. 1.3 Who we wrote this for We’ve written this book with the interested experimental biologist in mind, and do our best to make few assumptions on previous programming or statistical experience. Likewise, we also welcome more seasoned bioinformaticians who are looking for a starting point from which to dive into single-cell RNA-seq analysis. As such, we welcome any and all feedback for improving this book to help increase accessibility and refine technical details. 1.4 Why we wrote this This book was conceived in the fall of 2018, as single-cell RNA-seq analysis continued its rise in prominence in the field of biology. With its rapid growth, and the ongoing developments within Bioconductor tailored specifically for scRNA-seq, it became apparent that an update to the Orchestrating high-throughput genomic analysis with Bioconductor paper was necessary for the age of single-cell studies. We strive to highlight the fantastic software by people who call Bioconductor home for their tools, and in the process hope to showcase the Bioconductor community at large in continually pushing forward the field of biological analysis. 1.5 Acknowledgements We would like to thank all Bioconductor contributors for their efforts in creating the definitive leading-edge repository of software for biological analysis. It is truly extraordinary to chart the growth of Bioconductor over the years. We are thankful for the wonderful community of scientists and developers alike that together make the Bioconductor community special. We would first and foremost like to thank the Bioconductor core team and the emerging targets subcommittee for commissioning this work, Stephanie Hicks and Raphael Gottardo for their continuous mentorship, and all our contributors to the companion manuscript of this book. We’d also like to thank Garret Grolemund and Hadley Wickham for their book, R for Data Science, from which we drew stylistic and teaching inspiration. We also thank Levi Waldron and Aaron Lun for advice on the code-related aspects of managing the online version of this book. "],
["learning-r-and-more.html", "Chapter 2 Learning R and Bioconductor 2.1 The Benefits of R and Bioconductor 2.2 Learning R Online 2.3 Running R Locally 2.4 Getting Help In (and Out) of R 2.5 Bioconductor Help", " Chapter 2 Learning R and Bioconductor In this chapter, we outline various resources for learning R and Bioconductor. We provide a brief set of instructions for installing R on your own machine, and then cover how to get help for functions, packages, and Bioconductor-specific resources for learning more. 2.1 The Benefits of R and Bioconductor R is a high-level programming language that was initially designed for statistical applications. While there is much to be said about R as a programming language, one of the key advantages of using R is that it is highly extensible through packages. Packages are collections of functions, data, and documentation that extend the capabilities of base R. The ease of development and distribution of packages for R has made it a rich environment for many fields of study and application. One of the primary ways in which packages are distributed is through centralized repositories. The first R repository a user typically runs into is the Comprehensive R Archive Network (CRAN), which hosts over 13,000 packages to date, and is home to many of the most popular R packages. Similar to CRAN, Bioconductor is a repository of R packages as well. However, whereas CRAN is a general purpose repository, Bioconductor focuses on software tailored for genomic analysis. Furthermore, Bioconductor has stricter requirements for a package to be accepted into the repository. Of particular interest to us is the inclusion of high quality documentation and the use of common data infrastructure to promote package interoperability. In order to use these packages from CRAN and Bioconductor, and start programming with R to follow along in these workflows, some knowledge of R is helpful. Here we outline resources to guide you through learning the basics. 2.2 Learning R Online To learn more about programming with R, we highly recommend checking out online courses offered by groups such as Codecademy, specifically the Learn R series. Codecademy is completely web-based, with a code editor/console that promotes an interactive learning experience. This makes it easy to get started without worrying about installing any software. Beyond just Codecademy, a foundational textbook resource for learning R is the R for Data Science book. This book illustrates R programming through the exploration of various data science concepts - transformation, visualization, exploration, and more. While it primarily focuses on the tidyverse ecosystem of packages, the concepts are translatable to any programming style. 2.3 Running R Locally While learning R through online resources is a great way to start with R, as it requires minimal knowledge to start up, at some point, it will be desirable to have a local installation - on your own hardware - of R. This will allow you to install and maintain your own software and code, and furthermore allow you to create a personalized workspace. 2.3.1 Installing R Prior to getting started with this book, some prior programming experience with R is helpful. Check out the Learning R and More chapter for a list of resources to get started with R and other useful tools for bioinformatic analysis. To follow along with the analysis workflows in this book on your personal computer, it is first necessary to install the R programming language. Additionally, we recommend a graphical user interface such as RStudio for programming in R and visualization. RStudio features many helpful tools, such as code completion and an interactive data viewer to name but two. For more details, please see the online book R for Data Science prerequisites section for more information about installing R and using RStudio. 2.3.1.1 For MacOS/Linux Users A special note for MacOS/Linux users: we highly recommend using a package manager to manage your R installation. This differs across different Linux distributions, but for MacOS we highly recommend the Homebrew package manager. Follow the website directions to install homebrew, and install R via the commandline with brew install R, and it will automatically configure your installation for you. Upgrading to new R versions can be done by running brew upgrade. 2.3.2 Installing R &amp; Bioconductor Packages After installing R, the next step is to install R packages. In the R console, you can install packages from CRAN via the install.packages() function. In order to install Bioconductor packages, we will first need the BiocManager package which is hosted on CRAN. This can be done by running: install.packages(&quot;BiocManager&quot;) The BiocManager package makes it easy to install packages from the Bioconductor repository. For example, to install the SingleCellExperiment package, we run: ## the command below is a one-line shortcut for: ## library(BiocManager) ## install(&quot;SingleCellExperiment&quot;) BiocManager::install(&quot;SingleCellExperiment&quot;) Throughout the book, we can load packages via the library() function, which by convention usually comes at the top of scripts to alert readers as to what packages are required. For example, to load the SingleCellExperiment package, we run: library(SingleCellExperiment) Many packages will be referenced throughout the book within the workflows, and similar to the above, can be installed using the BiocManager::install() function. 2.4 Getting Help In (and Out) of R One of the most helpful parts of R is being able to get help inside of R. For example, to get the manual associated with a function, class, dataset, or package, you can prepend the code of interest with a ? to retrieve the relevant help page. For example, to get information about the data.frame() function, the SingleCellExperiment class, the in-built iris dataset, or for the BiocManager package, you can type: ?data.frame ?SingleCellExperiment ?iris ?BiocManager Beyond the R console, there are myriad online resources to get help. The R for Data Science book has a great section dedicated to looking for help outside of R. In particular, Stackoverflow’s R tag is a helpful resource for asking and exploring general R programming questions. 2.5 Bioconductor Help One of the key tenets of Bioconductor software that makes it stand out from CRAN is the required documentation of packages and workflows. In addition, Bioconductor hosts a Bioconductor-specific support site that has grown into a valuable resource of its own, thanks to the work of dedicated volunteers. 2.5.1 Bioconductor Packages Each package hosted on Bioconductor has a dedicated page with various resources. For an example, looking at the scater package page on Bioconductor, we see that it contains: a brief description of the package at the top, in addition to the authors, maintainer, and an associated citation installation instructions that can be cut and paste into your R console documentation - vignettes, reference manual, news Here, the most important information comes from the documentation section. Every package in Bioconductor is required to be submitted with a vignette - a document showcasing basic functionality of the package. Typically, these vignettes have a descriptive title that summarizes the main objective of the vignette. These vignettes are a great resource for learning how to operate the essential functionality of the package. The reference manual contains a comprehensive listing of all the functions available in the package. This is a compilation of each function’s manual, aka help pages, which can be accessed programmatically in the R console via ?&lt;function&gt;. Finally, the NEWS file contains notes from the authors which highlight changes across different versions of the package. This is a great way of tracking changes, especially functions that are added, removed, or deprecated, in order to keep your scripts current with new versions of dependent packages. Below this, the Details section covers finer nuances of the package, mostly relating to its relationship to other packages: upstream dependencies (Depends, Imports, Suggests fields): packages that are imported upon loading the given package downstream dependencies (Depends On Me, Imports Me, Suggests Me): packages that import the given package when loaded For example, we can see that an entry called simpleSingle in the Depends On Me field on the scater page takes us to a step-by-step workflow for low-level analysis of single-cell RNA-seq data. One additional Details entry, the biocViews, is helpful for looking at how the authors annotate their package. For example, for the scater package, we see that it is associated with DataImport, DimensionReduction, GeneExpression, RNASeq, and SingleCell, to name but some of its many annotations. We cover biocViews in more detail. 2.5.2 biocViews To find packages via the Bioconductor website, one useful resource is the BiocViews page, which provides a hierarchically organized view of annotations associated with Bioconductor packages. Under the “Software” label for example (which is comprised of most of the Bioconductor packages), there exist many different views to explore packages. For example, we can inspect based on the associated “Technology”, and explore “Sequencing” associated packages, and furthermore subset based on “RNASeq”. Another area of particular interest is the “Workflow” view, which provides Bioconductor packages that illustrate an analytical workflow. For example, the “SingleCellWorkflow” contains the aforementioned tutorial, encapsulated in the simpleSingleCell package. 2.5.3 Bioconductor Forums The Bioconductor support site contains a Stackoverflow-style question and answer support site that is actively contributed to from both users and package developers. Thanks to the work of dedicated volunteers, there are ample questions to explore to learn more about Bioconductor specific workflows. Another way to connect with the Bioconductor community is through Slack, which hosts various channels dedicated to packages and workflows. The Bioc-community Slack is a great way to stay in the loop on the latest developments happening across Bioconductor, and we recommend exploring the “Channels” section to find topics of interest. "],
["beyond-r-basics.html", "Chapter 3 Beyond R Basics 3.1 Becoming an R Expert 3.2 Becoming an R/Bioconductor Developer 3.3 Nice Companions for R", " Chapter 3 Beyond R Basics Here we briefly outline resources for taking your R programming to the next level, including resources for learning about package development. We also outline some companions to R that are good to know not only for package development, but also for running your own bioinformatic pipelines, enabling you to use a broader array of tools to go from raw data to preprocessed data before working in R. 3.1 Becoming an R Expert A deeper dive into the finer details of the R programming language is provided by the book Advanced R. While targeted at more experienced R users and programmers, this book represents a comprehensive compendium of more advanced concepts, and touches on some of the paradigms used extensively by developers throughout Bioconductor, specifically programming with S4. Eventually, you’ll reach the point where you have your own collection of functions and datasets, and where you will be writing your own packages. Luckily, there’s a guide for just that, with the book R Packages. Packages are great even if just for personal use, and of course, with some polishing, can eventually become available on CRAN or Bioconductor. Furthermore, they are also a great way of putting together code associated with a manuscript, promoting reproducible, accessible computing practices, something we all strive for in our work. For many of the little details that are oft forgotten learning about R, the aptly named What They Forgot to Teach You About R is a great read for learning about the little things such as file naming, maintaining an R installation, and reproducible analysis habits. Finally, we save the most intriguing resource for last - another book for those on the road to becoming an R expert is R Inferno, which dives into many of the unique quirks of R. Warning: this book goes very deep into the painstaking details of R. 3.2 Becoming an R/Bioconductor Developer While learning to use Bioconductor tools is a very welcoming experience, unfortunately there is no central resource for navigating the plethora of gotchas and paradigms associated with developing for Bioconductor. Based on conversations with folks involved in developing for Bioconductor, much of this knowledge is hard won and fairly spread out. This however is beginning to change with more recent efforts led by the Bioconductor team, and while this book represents an earnest effort towards addressing the user perspective, it is currently out of scope to include a deep dive about the developer side. For those looking to get started with developing packages for Bioconductor, it is important to first become acquainted with developing standalone R packages. To this end, the R Packages book provides a deep dive into the details of constructing your own package, as well as details regarding submission of a package to CRAN. For programming practices, With that, some resources that are worth looking into to get started are the BiocWorkshops repository under the Bioconductor Github provides a book composed of workshops that have been hosted by Bioconductor team members and contributors. These workshops center around learning, using, and developing for Bioconductor. A host of topics are also available via the Learn module on the Bioconductor website. Finally, the Bioconductor developers portal contains a bevy of individual resources and guides for experienced R developers. 3.3 Nice Companions for R While not essential for our purposes, many bioinformatic tools for processing raw sequencing data require knowledge beyond just R to install, run, and import their results into R for further analysis. The most important of which are basic knowledge of the Shell/Bash utilities, for working with bioinformatic pipelines and troubleshooting (R package) installation issues. Additionally, for working with packages or software that are still in development and not hosted on an official repository like CRAN or Bioconductor, knowledge of Git - a version control system - and the popular GitHub hosting service is helpful. This enables you to not only work with other people’s code, but also better manage your own code to keep track of changes. 3.3.1 Shell/Bash Datacamp and other interactive online resources such as Codecademy are great places to learn some of these extra skills. We highly recommend learning Shell/Bash, as it is the starting point for most bioinformatic processing pipelines. 3.3.2 Git We would recommend learning Git next, a system for code versioning control which underlies the popular GitHub hosting service, where many of the most popular open source tools are hosted. Learning Git is essential not only for keeping track of your own code, but also for using, managing, and contributing to open source software projects. For a more R centric look at using Git (and Github), we highly recommend checking out Happy Git and Github for the useR. 3.3.3 Other Languages A frequent question that comes up is “What else should I learn besides R?” Firstly, we believe that honing your R skills is first and foremost, and beyond just R, learning Shell/Bash and Git covered in the Nice Companions for R section are already a great start. For those just getting started, these skills should become comfortable in practice before moving on. However, there are indeed benefits to going beyond just R. At a basic level, learning other programming languages helps broaden one’s perspective - similar to learning multiple spoken or written languages, learning about other programming languages (even if only in a cursory manner) helps one identify broader patterns that may be applicable across languages. At an applied level, work within and outside of R has made it ever more friendly now than ever before with multi-lingual setups and teams, enabling the use of the best tool for the job at hand. For example, Python is another popular language used in both data science and a broader array of applications as well. R now supports a native Python interface via the reticulate package, enabling access to tools developed originally in Python such as the popular TensorFlow framework for machine learning applications. C++ is frequently used natively in R as well via Rcpp in packages to massively accelerate computations. Finally, multiple languages are supported in code documents and reports through R Markdown. "],
["data-infrastructure.html", "Chapter 4 Data Infrastructure 4.1 Prerequisites 4.2 The SingleCellExperiment Class 4.3 A Brief Recap: From se to sce 4.4 The reducedDims Slot 4.5 The metadata Slot 4.6 About Spike-Ins 4.7 Recording Analyses in SingleCellExperiment 4.8 Conclusion", " Chapter 4 Data Infrastructure One of the advantages of using Bioconductor packages is that they utilize common data infrastructures which makes analyses interoperable across various packages. Furthermore, much engineering effort is put into making this infrastructure robust and scalable. Here, we describe the SingleCellExperiment object (or sce in shorthand) in detail to describe how it is constructed, utilized in downstream analysis, and how it stores various types of primary data and metadata. 4.1 Prerequisites The Bioconductor package SingleCellExperiment provides the SingleCellExperiment class for usage. While the package is implicitly installed and loaded when using any package that depends on the SingleCellExperiment class, it can be explicitly installed (and loaded) as follows: BiocManager::install(&#39;SingleCellExperiment&#39;) Additionally, we use some functions from the scater and scran packages, as well as the CRAN package uwot (which conveniently can also be installed through BiocManager). These functions will be accessed through the &lt;package&gt;::&lt;function&gt; convention as needed. BiocManager::install(c(&#39;scater&#39;, &#39;scran&#39;, &#39;uwot&#39;, &#39;Rtsne&#39;)) For this session, all we will need loaded is the SingleCellExperiment package: library(SingleCellExperiment) library(scater) library(scran) library(uwot) library(Rtsne) 4.2 The SingleCellExperiment Class Overview of the SingleCellExperiment class object 4.2.1 Primary Data: The assays Slot The SingleCellExperiment (sce) object is the basis of single-cell analytical applications based in Bioconductor. The sce object is an S4 object, which in essence provides a more formalized approach towards construction and accession of data compared to other methods available in R. The utility of S4 comes from validity checks that ensure safe data manipulation, and most important for our discussion, from its extensibility through slots. If we imagine the sce object to be a ship, the slots of sce can be thought of as individual cargo boxes - each exists as a separate entity within the sce object. Furthermore, each slot contains data that arrives in its own format. To extend the metaphor, we can imagine that different variations of cargo boxes are required for fruits versus bricks. In the case of sce, certain slots expect numeric matrices, whereas others may expect data frames. To construct a rudimentary sce object, all we need is a single slot: assays slot: contains primary data such as counts in a list, where each entry of the list is in a matrix format, where rows correspond to features (genes) and columns correspond to samples (cells) (Figure 1A, blue box) Let’s start simple by generating three cells worth of count data across ten genes. counts_matrix &lt;- data.frame(cell_1 = rpois(10, 10), cell_2 = rpois(10, 10), cell_3 = rpois(10, 30)) rownames(counts_matrix) &lt;- paste0(&quot;gene_&quot;, 1:10) counts_matrix &lt;- as.matrix(counts_matrix) # must be a matrix object! From this, we can now construct our first SingleCellExperiment object, using the defined constructor, SingleCellExperiment(). Note that we provide our data as a named list, and each entry of the list is a matrix. Here, we name the counts_matrix entry as simply counts within the list. sce &lt;- SingleCellExperiment(assays = list(counts = counts_matrix)) To inspect the object, we can simply type sce into the console to see some pertinent information, which will display an overview of the various slots available to us (which may or may not have any data). sce ## class: SingleCellExperiment ## dim: 10 3 ## metadata(0): ## assays(1): counts ## rownames(10): gene_1 gene_2 ... gene_9 gene_10 ## rowData names(0): ## colnames(3): cell_1 cell_2 cell_3 ## colData names(0): ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): To access the count data we just supplied, we can do any one of the following: assay(sce, &quot;counts&quot;) - this is the most general method, where we can supply the name of the assay as the second argument. counts(sce) - this is the same as the above, but only works for assays with the special name &quot;counts&quot;. counts(sce) ## cell_1 cell_2 cell_3 ## gene_1 12 11 30 ## gene_2 9 13 25 ## gene_3 9 17 33 ## gene_4 9 11 25 ## gene_5 8 13 21 ## gene_6 12 7 43 ## gene_7 10 11 24 ## gene_8 13 15 33 ## gene_9 10 6 25 ## gene_10 11 14 34 ## assay(sce, &quot;counts&quot;) ## same as above in this special case 4.2.2 Extending the assays Slot What makes the assay slot especially powerful is that it can hold multiple representations of the primary data. This is especially useful for storing the raw as well as a normalized version of the data. We can do just that as shown below, using the scran and scater packages to compute a normalized and log-transformed representation of the initial primary data. Note that here, we overwrite our previous sce upon reassigning the results to sce - this is because these functions return a SingleCellExperiment object. Some functions - especially those outside of single-cell oriented Bioconductor packages - do not, in which case you will need to append your results to the sce object (see below). sce &lt;- computeSumFactors(sce) sce &lt;- logNormCounts(sce) Viewing the object again, we see that these functions added some new entries: sce ## class: SingleCellExperiment ## dim: 10 3 ## metadata(0): ## assays(2): counts logcounts ## rownames(10): gene_1 gene_2 ... gene_9 gene_10 ## rowData names(0): ## colnames(3): cell_1 cell_2 cell_3 ## colData names(0): ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): Specifically, we see that the assays slot has grown to be comprised of two entries: counts (our initial data) and logcounts (the normalized data). Similar to counts, the logcounts name is a special name which lets us access it simply by typing logcounts(sce), although the longhand version works just as well. logcounts(sce) ## cell_1 cell_2 cell_3 ## gene_1 4.39 4.09 4.21 ## gene_2 4.00 4.31 3.97 ## gene_3 4.00 4.68 4.34 ## gene_4 4.00 4.09 3.97 ## gene_5 3.84 4.31 3.73 ## gene_6 4.39 3.48 4.71 ## gene_7 4.14 4.09 3.91 ## gene_8 4.50 4.51 4.34 ## gene_9 4.14 3.28 3.97 ## gene_10 4.27 4.41 4.38 ## assay(sce, &quot;logcounts&quot;) ## same as above Notice that the data before had a severe discrepancy in counts between cells 1/2 versus 3, and that normalization has ameliorated this difference. To look at all the available assays within sce, we can type: assays(sce) ## List of length 2 ## names(2): counts logcounts While the functions above demonstrate automatic addition of assays to our sce object, there may be cases where we want to perform our own calculations and save the result into the assays slot. In particular, this is important for using functions that do not return a SingleCellExperiment object. Let’s append a new version of the data that has been offset by +100. counts_100 &lt;- assay(sce, &quot;counts&quot;) + 100 assay(sce, &quot;counts_100&quot;) &lt;- counts_100 # assign a new entry to assays slot Then we can use the accessor assays() (notice this is plural!) to see all our entries into the assay slot that we have made so far. Note that to see all the assays, we use the plural assays() accessor, and to retrieve a single assay entry (as a matrix) we use the singular assay() accessor, providing the name of the assay we wish to retrieve as above. assays(sce) ## List of length 3 ## names(3): counts logcounts counts_100 These entries are also seen on the default view of sce: sce ## class: SingleCellExperiment ## dim: 10 3 ## metadata(0): ## assays(3): counts logcounts counts_100 ## rownames(10): gene_1 gene_2 ... gene_9 gene_10 ## rowData names(0): ## colnames(3): cell_1 cell_2 cell_3 ## colData names(0): ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): This sort of extension of the assays slot is represented graphically in Figure 1B (dark blue box), showing the addition of the logcounts matrix into the assays slot. In a similar manner, many of the slots of sce are extendable through assignment as shown above, thus allowing for myriad custom functionality as needed for interoperability with functions outside of single-cell oriented Bioconductor packages. 4.2.3 Column (Meta)Data: colData Slot To further annotate our sce object, one of the first and most useful pieces of information is adding metadata that describes the columns of our primary data, e.g., the samples or cells of our experiment. This data is entered into the colData slot: colData slot: metadata that describes that samples (cells) provided as a data.frame (or DataFrame if appending), where rows correspond to cells, and columns correspond to the sample (cells) metadata features (e.g. id, batch, author, etc.) (Figure 1A, orange box). So, let’s come up with some metadata for the cells, starting with a batch variable, where cells 1 and 2 are in batch 1, and cell 3 is from batch 2. cell_metadata &lt;- data.frame(batch = c(1, 1, 2)) rownames(cell_metadata) &lt;- paste0(&quot;cell_&quot;, 1:3) Now, we can take two approaches - either append the cell_metadata to our existing sce, or start from scratch via the SingleCellExperiment() constructor and provide it from the get go. We’ll start from scratch for now, but will also show how to append the data: ## From scratch: sce &lt;- SingleCellExperiment(assays = list(counts = counts_matrix), colData = cell_metadata) ## Appending to existing object (requires DataFrame() coercion) ## colData(sce) &lt;- DataFrame(cell_metadata) Similar to assays, we can see our colData is now populated from the default view of sce: sce ## class: SingleCellExperiment ## dim: 10 3 ## metadata(0): ## assays(1): counts ## rownames(10): gene_1 gene_2 ... gene_9 gene_10 ## rowData names(0): ## colnames(3): cell_1 cell_2 cell_3 ## colData names(1): batch ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): And furthermore access our column (meta)data with the accessor, colData(): colData(sce) ## DataFrame with 3 rows and 1 column ## batch ## &lt;numeric&gt; ## cell_1 1 ## cell_2 1 ## cell_3 2 Finally, some packages automatically add to the colData slot, for example, the scater package features a function, addPerCellQC(), which appends a lot of quality control data. Here we show the first five columns of colData(sce) with the quality control metrics appended to it. sce &lt;- addPerCellQC(sce) colData(sce)[, 1:5] ## DataFrame with 3 rows and 5 columns ## batch sum detected percent_top_50 percent_top_100 ## &lt;numeric&gt; &lt;integer&gt; &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; ## cell_1 1 103 10 100 100 ## cell_2 1 118 10 100 100 ## cell_3 2 293 10 100 100 4.2.3.1 Using colData for Subsetting A common operation with colData is its use in subsetting. One simple way to access colData is through the use of the $ operator, which is a shortcut for accessing a variable within the colData slot: sce$batch ## [1] 1 1 2 ## colData(sce)$batch # same as above If we only wanted cells within batch 1, we could subset our sce object as follows (remember, we subset on the columns in this case because we are filtering by cells/samples here). sce[, sce$batch == 1] ## class: SingleCellExperiment ## dim: 10 2 ## metadata(0): ## assays(1): counts ## rownames(10): gene_1 gene_2 ... gene_9 gene_10 ## rowData names(0): ## colnames(2): cell_1 cell_2 ## colData names(8): batch sum ... percent_top_500 total ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): 4.2.4 Feature Metadata: rowData/rowRanges Lastly, the rows also have their own metadata slot to store information that pertains to the features of the sce object: rowData slot: contains data in a data.frame (DataFrame) format that describes aspects of the data corresponding to the rows of the primary data (Figure 1A, green box). Furthermore, there is a special slot which pertains to features with genomic coordinates: rowRanges slot: contains data in a GRangesList (where each entry is a GenomicRanges format) that describes the chromosome, start, and end coordinates of the features (genes, genomic regions). Both of these can be accessed via their respective accessors, rowRanges() and rowData(). In our case, rowRanges(sce) produces an empty list: rowRanges(sce) # empty ## GRangesList object of length 10: ## $gene_1 ## GRanges object with 0 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## ------- ## seqinfo: no sequences ## ## $gene_2 ## GRanges object with 0 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## ------- ## seqinfo: no sequences ## ## $gene_3 ## GRanges object with 0 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## ------- ## seqinfo: no sequences ## ## ... ## &lt;7 more elements&gt; Currently the rowData slot is also empty. However, analogous to our call to addPerCellQC() in the prior section, the function addPerFeatureQC() will insert values in the rowData slot of our sce object, as we can see below: sce &lt;- addPerFeatureQC(sce) rowData(sce) ## DataFrame with 10 rows and 2 columns ## mean detected ## &lt;numeric&gt; &lt;numeric&gt; ## gene_1 17.6667 100 ## gene_2 15.6667 100 ## gene_3 19.6667 100 ## gene_4 15.0000 100 ## gene_5 14.0000 100 ## gene_6 20.6667 100 ## gene_7 15.0000 100 ## gene_8 20.3333 100 ## gene_9 13.6667 100 ## gene_10 19.6667 100 In a similar fashion to the colData slot, such feature metadata could be provided at the onset when creating the SingleCellExperiment object, which we leave up to the reader as an exercise. 4.2.4.1 Subsetting by Rows To subset an sce object down at the feature/gene level, we can do a row subsetting operation similar to other R objects, by supplying either numeric indices or a vector of names: sce[c(&quot;gene_1&quot;, &quot;gene_4&quot;), ] ## class: SingleCellExperiment ## dim: 2 3 ## metadata(0): ## assays(1): counts ## rownames(2): gene_1 gene_4 ## rowData names(2): mean detected ## colnames(3): cell_1 cell_2 cell_3 ## colData names(8): batch sum ... percent_top_500 total ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): ## sce[c(1, 4), ] # same as above in this case 4.2.5 Size Factors Slot: sizeFactors Briefly, we already encountered this via the scran::computeSumFactors(sce) call, which adds a sizeFactors slot: sizeFactors slot: contains information in a numeric vector regarding the sample/cell normalization factors used to produce a normalized data representation (Figure 1B, brown box) sce &lt;- scran::computeSumFactors(sce) sce &lt;- scater::logNormCounts(sce) sizeFactors(sce) ## [1] 0.601 0.689 1.710 4.3 A Brief Recap: From se to sce So far, we have covered the assays (primary data), colData (sample metadata), rowData/rowRanges (feature metadata), and sizeFactors slots of SingleCellExperiment. What is important to note is that the SingleCellExperiment class derives from the SummarizedExperiment (se) class, its predecessor, and in particular inherits the assays, colData and rowData/rowRanges slots. As such, much of the SummarizedExperiment functionality is retained in SingleCellExperiment. This allows existing methods that work with SummarizedExperiment to work similarly on SingleCellExperiment objects. So what’s new about the SingleCellExperiment class then? For our discussion, the most important change is the addition of a new slot called reducedDims. 4.4 The reducedDims Slot The reducedDims slot is a new addition which is specially designed to store reduced dimensionality representations of primary data, obtained by methods such as PCA, tSNE, UMAP, and others. reducedDims slot: contains a list of numeric matrix entries which describe dimensionality reduced representations of the primary data, such that rows represent the columns of the primary data (aka the samples/cells), and columns represent the dimensions Most importantly, just like the assays slot, the reducedDims slot can hold a list of many entries. So, it can hold a PCA, TSNE, and UMAP representation of a given dataset all within the reducedDims slot. In our example, we can calculate a PCA representation of our data as follows using the scater package function runPCA(). We see that the sce now shows a new reducedDim and that the accessor reducedDim() produces the results of running PCA on the normalized data from logcounts(sce). sce &lt;- scater::runPCA(sce) reducedDim(sce, &quot;PCA&quot;) ## PC1 PC2 ## cell_1 -0.495 -0.3154 ## cell_2 1.047 0.0111 ## cell_3 -0.552 0.3043 ## attr(,&quot;percentVar&quot;) ## [1] 89.5 10.5 From this, we can also calculate a tSNE representation using the scater package function runTSNE(), and see that it can be seen both in the default view of sce and via accession: sce &lt;- scater::runTSNE(sce, perplexity = 0.1) ## Perplexity should be lower than K! reducedDim(sce, &quot;TSNE&quot;) ## [,1] [,2] ## cell_1 783 5637 ## cell_2 -5278 -2133 ## cell_3 4495 -3504 We can view the names of all our entries in the reducedDims slot via the accessor, reducedDims() (notice that this is plural, and thus not the same as reducedDim(): reducedDims(sce) ## List of length 2 ## names(2): PCA TSNE Now, say we have a different dimensionality reduction algorithm we’d like to try that is not yet implemented with direct compatibility for SingleCellExperiment, e.g. with an associated wrapper in packages such as scater. To accommodate this case (or alternately, when we want to directly run the dimensionality reduction method on the data ourselves rather than through a wrapper), we can directly add to the reducedDims slot. This is similar to how we previously extended the assays slot with our own custom entry of counts_100. Below, we show how to run umap() as implemented in the uwot package directly, rather than through the associated wrapper function implemented in scater via runUMAP(), saving the intermediate results, and then adding them into the sce object we had previously. u &lt;- uwot::umap(t(logcounts(sce)), n_neighbors = 2) reducedDim(sce, &quot;UMAP_uwot&quot;) &lt;- u reducedDim(sce, &quot;UMAP_uwot&quot;) ## [,1] [,2] ## cell_1 -0.168 -0.3907 ## cell_2 0.647 -0.0126 ## cell_3 -0.479 0.4034 ## attr(,&quot;scaled:center&quot;) ## [1] 11.23 -8.34 And now we can also see its entry when we look at the reducedDims() accessor output: reducedDims(sce) ## List of length 3 ## names(3): PCA TSNE UMAP_uwot 4.5 The metadata Slot Some analyses produce results that do not fit into the aforementioned slots. Thankfully, there is a slot just for this type of messy data, and in fact, can accommodate any type of data, so long as it is in a named list: metadata slot: a named list of entries, where each entry in the list can be anything you want it to be For example, say we have some favorite genes, such as highly variable genes, we want to save inside of sce for use in our analysis at a later point. We can do this simply by appending to the metadata slot as follows: my_genes &lt;- c(&quot;gene_1&quot;, &quot;gene_5&quot;) metadata(sce) &lt;- list(favorite_genes = my_genes) metadata(sce) ## $favorite_genes ## [1] &quot;gene_1&quot; &quot;gene_5&quot; Similarly, we can append more information via the $ operator: your_genes &lt;- c(&quot;gene_4&quot;, &quot;gene_8&quot;) metadata(sce)$your_genes &lt;- your_genes metadata(sce) ## $favorite_genes ## [1] &quot;gene_1&quot; &quot;gene_5&quot; ## ## $your_genes ## [1] &quot;gene_4&quot; &quot;gene_8&quot; 4.6 About Spike-Ins You might have noticed that the sce default view produces an entry with spikeNames. The SingleCellExperiment object contains some special considerations for experiments with spike-in (ERCC) controls. We leave this to the interested reader to learn more about in the SingleCellExperiment introductory vignette. 4.7 Recording Analyses in SingleCellExperiment In subsequent sections, we will show an example workflow that uses the SingleCellExperiment object as its base, and similar to our walkthrough of the SingleCellExperiment class above, continually appends new entries to save the results of the analysis. The SingleCellExperiment thus can serve as a record of analysis in this manner. This makes it especially useful for collaboration, as the object can be transferred, analyzed, and even visualized via graphical user interfaces such as iSEE. 4.8 Conclusion The SingleCellExperiment class to the Bioc-verse single-cell related packages. It is this connection to SingleCellExperiment that makes many of these packages easily interoperable and modular over the span of an scRNA-seq analysis. Furthermore, it allows anybody to implement their own analytical tools for scRNA-seq that build on the SingleCellExperiment, enabling decentralized scientific developments. "],
["overview.html", "Chapter 5 Overview 5.1 Introduction 5.2 Experimental Design 5.3 Obtaining a count matrix 5.4 Data processing and downstream analysis 5.5 Quick start Session Info", " Chapter 5 Overview .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 5.1 Introduction This chapter provides an overview of the framework of a typical scRNA-seq analysis workflow (Figure 5.1). Subsequent chapters will describe each analysis step in more detail. Figure 5.1: Schematic of a typical scRNA-seq analysis workflow. Each stage (separated by dashed lines) consists of a number of specific steps, many of which operate on and modify a SingleCellExperiment instance. 5.2 Experimental Design Before starting the analysis itself, some comments on experimental design may be helpful. The most obvious question is the choice of technology, which can be roughly divided into: Droplet-based: 10X Genomics, inDrop, Drop-seq Plate-based with unique molecular identifiers (UMIs): CEL-seq, MARS-seq Plate-based with reads: Smart-seq2 Other: sci-RNA-seq, Seq-Well Each of these methods have their own advantages and weaknesses that are discussed extensively elsewhere (Mereu et al. 2019; Ziegenhain et al. 2017). In practical terms, droplet-based technologies are the current de facto standard due to their throughput and low cost per cell. Plate-based methods can capture other phenotypic information (e.g., morphology) and are more amenable to customization. Read-based methods provide whole-transcript coverage, which is useful in some applications (e.g., splicing, exome mutations); otherwise, UMI-based methods are more popular as they mitigate the effects of PCR amplification noise. The choice of method is left to the reader’s circumstances - we will simply note that most aspects of our analysis pipeline are technology-agnostic. The next question is how many cells should be captured, and to what depth they should be sequenced. The short answer is “as much as you can afford to spend”. The long answer is that it depends on the aim of the analysis. If we are aiming to discover rare cell subpopulations, then we need more cells. If we are aiming to characterize subtle differences, then we need more sequencing depth. As of time of writing, an informal survey of the literature suggests that typical droplet-based experiments would capture anywhere from 10,000 to 100,000 cells, sequenced at anywhere from 1,000 to 10,000 UMIs per cell (usually in inverse proportion to the number of cells). Droplet-based methods also have a trade-off between throughput and doublet rate that affects the true efficiency of sequencing. For studies involving multiple samples or conditions, the design considerations are the same as those for bulk RNA-seq experiments. There should be multiple biological replicates for each condition and conditions should not be confounded with batch. Note that individual cells are not replicates; rather, we are referring to samples derived from replicate donors or cultures. 5.3 Obtaining a count matrix Sequencing data from scRNA-seq experiments must be converted into a matrix of expression values that can be used for statistical analysis. Given the discrete nature of sequencing data, this is usually a count matrix containing the number of UMIs or reads mapped to each gene in each cell. The exact procedure for quantifying expression tends to be technology-dependent: For 10X Genomics data, the CellRanger software suite provides a custom pipeline to obtain a count matrix. This uses STAR to align reads to the reference genome and then counts the number of unique UMIs mapped to each gene. Pseudo-alignment methods such as alevin can be used to obtain a count matrix from the same data with greater efficiency. This avoids the need for explicit alignment, which reduces the compute time and memory usage. For other highly multiplexed protocols, the scPipe package provides a more general pipeline for processing scRNA-seq data. This uses the Rsubread aligner to align reads and then counts UMIs per gene. For CEL-seq or CEL-seq2 data, the scruff package provides a dedicated pipeline for quantification. For read-based protocols, we can generally re-use the same pipelines for processing bulk RNA-seq data. For any data involving spike-in transcripts, the spike-in sequences should be included as part of the reference genome during alignment and quantification. After quantification, we import the count matrix into R and create a SingleCellExperiment object. This can be done with base methods (e.g., read.table()) followed by applying the SingleCellExperiment() constructor. Alternatively, for specific file formats, we can use dedicated methods from the DropletUtils (for 10X data) or tximport/tximeta packages (for pseudo-alignment methods). Depending on the origin of the data, this requires some vigilance: Some feature-counting tools will report mapping statistics in the count matrix (e.g., the number of unaligned or unassigned reads). While these values can be useful for quality control, they would be misleading if treated as gene expression values. Thus, they should be removed (or at least moved to the colData) prior to further analyses. Be careful of using the ^ERCC regular expression to detect spike-in rows in human data where the row names of the count matrix are gene symbols. An ERCC gene family actually exists in human annotation, so this would result in incorrect identification of genes as spike-in transcripts. This problem can be avoided by using count matrices with standard identifiers (e.g., Ensembl, Entrez). 5.4 Data processing and downstream analysis In the simplest case, the workflow has the following form: We compute quality control metrics to remove low-quality cells that would interfere with downstream analyses. These cells may have been damaged during processing or may not have been fully captured by the sequencing protocol. Common metrics includes the total counts per cell, the proportion of spike-in or mitochondrial reads and the number of detected features. We convert the counts into normalized expression values to eliminate cell-specific biases (e.g., in capture efficiency). This allows us to perform explicit comparisons across cells in downstream steps like clustering. We also apply a transformation, typically log, to adjust for the mean-variance relationship. We perform feature selection to pick a subset of interesting features for downstream analysis. This is done by modelling the variance across cells for each gene and retaining genes that are highly variable. The aim is to reduce computational overhead and noise from uninteresting genes. We apply dimensionality reduction to compact the data and further reduce noise. Principal components analysis is typically used to obtain an initial low-rank representation for more computational work, followed by more aggressive methods like \\(t\\)-stochastic neighbor embedding for visualization purposes. We cluster cells into groups according to similarities in their (normalized) expression profiles. This aims to obtain groupings that serve as empirical proxies for distinct biological states. We typically interpret these groupings by identifying differentially expressed marker genes between clusters. Additional steps such as data integration and cell annotation will be discussed in their respective chapters. 5.5 Quick start Here, we use the a droplet-based retina dataset from Macosko et al. (2015), provided in the scRNAseq package. This starts from a count matrix and finishes with clusters (Figure 5.2) in preparation for biological interpretation. Similar workflows are available in abbreviated form in the Workflows., library(scRNAseq) sce &lt;- MacoskoRetinaData() # Quality control. library(scater) is.mito &lt;- grepl(&quot;^MT-&quot;, rownames(sce)) qcstats &lt;- perCellQCMetrics(sce, subsets=list(Mito=is.mito)) filtered &lt;- quickPerCellQC(qcstats, percent_subsets=&quot;subsets_Mito_percent&quot;) sce &lt;- sce[, !filtered$discard] # Normalization. sce &lt;- logNormCounts(sce) # Feature selection. library(scran) dec &lt;- modelGeneVar(sce) hvg &lt;- getTopHVGs(dec, prop=0.1) # Dimensionality reduction. set.seed(1234) sce &lt;- runPCA(sce, ncomponents=25, subset_row=hvg) sce &lt;- runUMAP(sce, dimred = &#39;PCA&#39;, external_neighbors=TRUE) # Clustering. g &lt;- buildSNNGraph(sce, use.dimred = &#39;PCA&#39;) sce$clusters &lt;- factor(igraph::cluster_louvain(g)$membership) # Visualization. plotUMAP(sce, colour_by=&quot;clusters&quot;) Figure 5.2: UMAP plot of the retina dataset, where each point is a cell and is colored by the cluster identity. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] scran_1.15.14 scater_1.15.12 ggplot2_3.2.1 [4] scRNAseq_2.1.5 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [7] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [10] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [13] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [16] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 bit64_0.9-7 httr_1.4.1 [4] tools_4.0.0 backports_1.1.5 R6_2.4.1 [7] irlba_2.3.3 vipor_0.4.5 uwot_0.1.5 [10] DBI_1.1.0 lazyeval_0.2.2 colorspace_1.4-1 [13] withr_2.1.2 gridExtra_2.3 tidyselect_0.2.5 [16] processx_3.4.1 bit_1.1-14 curl_4.3 [19] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [22] bookdown_0.16 scales_1.1.0 callr_3.4.0 [25] rappdirs_0.3.1 stringr_1.4.0 digest_0.6.23 [28] rmarkdown_2.0 XVector_0.27.0 pkgconfig_2.0.3 [31] htmltools_0.4.0 limma_3.43.0 dbplyr_1.4.2 [34] fastmap_1.0.1 highr_0.8 rlang_0.4.2 [37] RSQLite_2.2.0 shiny_1.4.0 DelayedMatrixStats_1.9.0 [40] farver_2.0.1 dplyr_0.8.3 RCurl_1.95-4.12 [43] magrittr_1.5 BiocSingular_1.3.1 GenomeInfoDbData_1.2.2 [46] Matrix_1.2-18 Rcpp_1.0.3 ggbeeswarm_0.6.0 [49] munsell_0.5.0 viridis_0.5.1 lifecycle_0.1.0 [52] edgeR_3.29.0 stringi_1.4.3 yaml_2.2.0 [55] zlibbioc_1.33.0 BiocFileCache_1.11.4 AnnotationHub_2.19.3 [58] grid_4.0.0 blob_1.2.0 dqrng_0.2.1 [61] promises_1.1.0 ExperimentHub_1.13.5 crayon_1.3.4 [64] lattice_0.20-38 cowplot_1.0.0 locfit_1.5-9.1 [67] zeallot_0.1.0 knitr_1.26 ps_1.3.0 [70] pillar_1.4.3 igraph_1.2.4.2 glue_1.3.1 [73] BiocVersion_3.11.1 evaluate_0.14 RcppParallel_4.4.4 [76] BiocManager_1.30.10 vctrs_0.2.1 httpuv_1.5.2 [79] gtable_0.3.0 purrr_0.3.3 assertthat_0.2.1 [82] xfun_0.11 rsvd_1.0.2 mime_0.8 [85] xtable_1.8-4 RSpectra_0.16-0 later_1.0.0 [88] viridisLite_0.3.0 tibble_2.1.3 AnnotationDbi_1.49.0 [91] beeswarm_0.2.3 memoise_1.1.0 statmod_1.4.32 [94] interactiveDisplayBase_1.25.0 Bibliography "],
["quality-control.html", "Chapter 6 Quality Control 6.1 Motivation 6.2 Choice of QC metrics 6.3 Identifying low-quality cells 6.4 Checking diagnostic plots 6.5 Cell calling for droplet data 6.6 Removing low-quality cells 6.7 Marking low-quality cells Session Info", " Chapter 6 Quality Control .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 6.1 Motivation Low-quality libraries in scRNA-seq data can arise from a variety of sources such as cell damage during dissociation or failure in library preparation (e.g., inefficient reverse transcription or PCR amplification). These usually manifest as “cells” with low total counts, few expressed genes and high mitochondrial or spike-in proportions. These low-quality libraries are problematic as they can contribute to misleading results in downstream analyses: They form their own distinct cluster(s), complicating interpretation of the results. This is most obviously driven by increased mitochondrial proportions or enrichment for nuclear RNAs after cell damage. In the worst case, low-quality libraries generated from different cell types can cluster together based on similarities in the damage-induced expression profiles, creating artificial intermediate states or trajectories between otherwise distinct subpopulations. Additionally, very small libraries can form their own clusters due to shifts in the mean upon transformation (A. Lun 2018). They distort the characterization of population heterogeneity during variance estimation or principal components analysis. The first few principal components will capture differences in quality rather than biology, reducing the effectiveness of dimensionality reduction. Similarly, genes with the largest variances will be driven by differences between low- and high-quality cells. The most obvious example involves low-quality libraries with very low counts where scaling normalization inflates the apparent variance of genes that happen to have a non-zero count in those libraries. They contain genes that appear to be strongly “upregulated” due to aggressive scaling to normalize for small library sizes. This is most problematic for contaminating transcripts (e.g., from the ambient solution) that are present in all libraries at low but constant levels. Increased scaling in low-quality libraries transforms small counts for these transcripts in large normalized expression values, resulting in apparent upregulation compared to other cells. This can be misleading as the affected genes are often biologically sensible but are actually expressed in another subpopulation. To avoid - or at least mitigate - these problems, we need to remove these cells at the start of the analysis. This step is commonly referred to as quality control (QC) on the cells. (We will use “library” and “cell” rather interchangeably here, though the distinction will become important when dealing with droplet-based data.) We will demonstrate using a small scRNA-seq dataset from A. T. L. Lun et al. (2017), which is provided with no prior QC so that we can apply our own procedures. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.416b &lt;- LunSpikeInData(which=&quot;416b&quot;) sce.416b$block &lt;- factor(sce.416b$block) sce.416b ## class: SingleCellExperiment ## dim: 46604 192 ## metadata(0): ## assays(1): counts ## rownames(46604): ENSMUSG00000102693 ENSMUSG00000064842 ... ENSMUSG00000095742 ## CBFB-MYH11-mcherry ## rowData names(1): Length ## colnames(192): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ## ... SLX-11312.N712_S508.H5H5YBBXX.s_8.r_1 SLX-11312.N712_S517.H5H5YBBXX.s_8.r_1 ## colData names(9): Source Name cell line ... spike-in addition block ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(2): ERCC SIRV 6.2 Choice of QC metrics We use several common QC metrics to identify low-quality cells based on their expression profiles. These metrics are described below in terms of reads for SMART-seq2 data, but the same definitions apply to UMI data generated by other technologies like MARS-seq and droplet-based protocols. The library size is defined as the total sum of counts across all relevant features for each cell. Here, we will consider the relevant features to be the endogenous genes. Cells with small library sizes are of low quality as the RNA has been lost at some point during library preparation, either due to cell lysis or inefficient cDNA capture and amplification. The number of expressed features in each cell is defined as the number of endogenous genes with non-zero counts for that cell. Any cell with very few expressed genes is likely to be of poor quality as the diverse transcript population has not been successfully captured. The proportion of reads mapped to spike-in transcripts is calculated relative to the total count across all features (including spike-ins) for each cell. As the same amount of spike-in RNA should have been added to each cell, any enrichment in spike-in counts is symptomatic of loss of endogenous RNA. Thus, high proportions are indicative of poor-quality cells where endogenous RNA has been lost due to, e.g., partial cell lysis or RNA degradation during dissociation. In the absence of spike-in transcripts, the proportion of reads mapped to genes in the mitochondrial genome can be used. High proportions are indicative of poor-quality cells (Islam et al. 2014; Ilicic et al. 2016), presumably because of loss of cytoplasmic RNA from perforated cells. The reasoning is that, in the presence of modest damage, the holes in the cell membrane permit efflux of individual transcript molecules but are too small to allow mitochondria to escape, leading to a relative enrichment of mitochondrial transcripts. For each cell, we calculate these QC metrics using the perCellQCMetrics() function from the scater package (McCarthy et al. 2017). The sum column contains the total count for each cell, the detected column contains the number of detected genes, subsets_Mito_percent contains the percentage of reads mapped to mitochondrial transcripts (based on Ensembl annotation) and altexps_ERCC_percent contains the percentage of reads mapped to ERCC transcripts. # Identifying the mitochondrial transcripts: library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] location &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) is.mito &lt;- which(location==&quot;MT&quot;) # Computing the QC metrics. library(scater) df &lt;- perCellQCMetrics(sce.416b, subsets=list(Mito=is.mito)) df ## DataFrame with 192 rows and 16 columns ## sum detected percent_top_50 percent_top_100 percent_top_200 percent_top_500 ## &lt;integer&gt; &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## 1 865936 7618 26.7218 32.2773 39.7208 52.9038 ## 2 1076277 7521 29.4043 35.0354 42.2581 55.7454 ## 3 1180138 8306 27.3454 32.4770 39.3296 51.9337 ## 4 1342593 8143 35.8092 40.2666 46.2460 57.1210 ## 5 1668311 7154 34.1198 39.0901 45.6660 58.2004 ## ... ... ... ... ... ... ... ## 188 776622 8174 45.9362 49.7010 54.6101 64.4249 ## 189 1299950 8956 38.0829 42.8930 49.0622 60.6675 ## 190 1800696 9530 30.6675 35.5839 41.8550 53.6781 ## 191 46731 6649 32.2998 37.9149 44.5999 56.5235 ## 192 1866692 10964 26.6632 31.2584 37.5608 48.9489 ## subsets_Mito_sum subsets_Mito_detected subsets_Mito_percent altexps_ERCC_sum ## &lt;integer&gt; &lt;integer&gt; &lt;numeric&gt; &lt;integer&gt; ## 1 78790 20 9.09882 65278 ## 2 98613 20 9.16242 74748 ## 3 100341 19 8.50248 60878 ## 4 104882 20 7.81190 60073 ## 5 129559 22 7.76588 136810 ## ... ... ... ... ... ## 188 48126 20 6.19684 61575 ## 189 112225 25 8.63302 94982 ## 190 135693 23 7.53559 113707 ## 191 3505 16 7.50037 7580 ## 192 150375 29 8.05569 48664 ## altexps_ERCC_detected altexps_ERCC_percent altexps_SIRV_sum altexps_SIRV_detected ## &lt;integer&gt; &lt;numeric&gt; &lt;integer&gt; &lt;integer&gt; ## 1 39 6.80658 27828 7 ## 2 40 6.28030 39173 7 ## 3 42 4.78949 30058 7 ## 4 42 4.18567 32542 7 ## 5 44 7.28887 71850 7 ## ... ... ... ... ... ## 188 39 7.17620 19848 7 ## 189 41 6.65764 31729 7 ## 190 40 5.81467 41116 7 ## 191 44 13.48898 1883 7 ## 192 39 2.51930 16289 7 ## altexps_SIRV_percent total ## &lt;numeric&gt; &lt;integer&gt; ## 1 2.90165 959042 ## 2 3.29130 1190198 ## 3 2.36477 1271074 ## 4 2.26741 1435208 ## 5 3.82798 1876971 ## ... ... ... ## 188 2.313165 858045 ## 189 2.224004 1426661 ## 190 2.102562 1955519 ## 191 3.350892 56194 ## 192 0.843271 1931645 A key assumption here is that the QC metrics are independent of the biological state of each cell. Poor values (e.g., low library sizes, high mitochondrial proportions) are presumed to be driven by technical factors rather than biological processes, meaning that the subsequent removal of cells will not misrepresent the biology in downstream analyses. Major violations of this assumption would potentially result in the loss of cell types that have, say, systematically low RNA content or high numbers of mitochondria. We can check for such violations using some diagnostics described in Sections 6.4 and ??. 6.3 Identifying low-quality cells 6.3.1 With fixed thresholds The simplest approach to identifying low-quality cells is to apply thresholds on the QC metrics. For example, we might consider cells to be low quality if they have library sizes below 100,000 reads; express fewer than 5,000 genes; have spike-in proportions above 10%; or have mitochondrial proportions above 10%. qc.lib &lt;- df$sum &lt; 1e5 qc.nexprs &lt;- df$detected &lt; 5e3 qc.spike &lt;- df$altexps_ERCC_percent &gt; 10 qc.mito &lt;- df$subsets_Mito_percent &gt; 10 discard &lt;- qc.lib | qc.nexprs | qc.spike | qc.mito # Summarize the number of cells removed for each reason. DataFrame(LibSize=sum(qc.lib), NExprs=sum(qc.nexprs), SpikeProp=sum(qc.spike), MitoProp=sum(qc.mito), Total=sum(discard)) ## DataFrame with 1 row and 5 columns ## LibSize NExprs SpikeProp MitoProp Total ## &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; ## 1 3 0 19 14 33 While simple, this strategy requires considerable experience to determine appropriate thresholds for each experimental protocol and biological system. Thresholds for read count-based data are simply not applicable for UMI-based data, and vice versa. Differences in mitochondrial activity or total RNA content require constant adjustment of the mitochondrial and spike-in thresholds, respectively, for different biological systems. Indeed, even with the same protocol and system, the appropriate threshold can vary from run to run due to the vagaries of cDNA capture efficiency and sequencing depth per cell. 6.3.2 With adaptive thresholds 6.3.2.1 Identifying outliers To obtain an adaptive threshold, we assume that most of the dataset consists of high-quality cells. We then identify cells that are outliers for the various QC metrics, based on the median absolute deviation (MAD) from the median value of each metric across all cells. Specifically, a value is considered an outlier if it is more than 3 MADs from the median in the “problematic” direction. This is loosely motivated by the fact that such a filter will retain 99% of non-outlier values that follow a normal distribution. For the 416B data, we identify cells with log-transformed library sizes that are more than 3 MADs below the median. A log-transformation is used to improve resolution at small values when type=&quot;lower&quot;. In particular, it guarantees that the threshold is not a negative value, which would be meaningless for quality control on these metrics. Moreover, these metrics can occasionally exhibit a heavy right tail, and the log-transformation makes the distribution seem more normal to justify the 99% rationale mentioned above. qc.lib2 &lt;- isOutlier(df$sum, log=TRUE, type=&quot;lower&quot;) We do the same for the log-transformed number of expressed genes. qc.nexprs2 &lt;- isOutlier(df$detected, log=TRUE, type=&quot;lower&quot;) isOutlier() will also return the exact filter thresholds for each metric in the attributes of the output vector. These is useful for checking whether the automatically selected thresholds are appropriate. attr(qc.lib2, &quot;thresholds&quot;) ## lower higher ## 434083 Inf attr(qc.nexprs2, &quot;thresholds&quot;) ## lower higher ## 5231 Inf We identify outliers for the proportion-based metrics in a similar manner. Here, no transformation is required as we are identifying large outliers that should already be clearly distinguishable from zero. qc.spike2 &lt;- isOutlier(df$altexps_ERCC_percent, type=&quot;higher&quot;) attr(qc.spike2, &quot;thresholds&quot;) ## lower higher ## -Inf 14.15 qc.mito2 &lt;- isOutlier(df$subsets_Mito_percent, type=&quot;higher&quot;) attr(qc.mito2, &quot;thresholds&quot;) ## lower higher ## -Inf 11.92 A cell that is an outlier for any of these metrics is considered to be of low-quality and discarded. discard2 &lt;- qc.lib2 | qc.nexprs2 | qc.spike2 | qc.mito2 # Summarize the number of cells removed for each reason. DataFrame(LibSize=sum(qc.lib2), NExprs=sum(qc.nexprs2), SpikeProp=sum(qc.spike2), MitoProp=sum(qc.mito2), Total=sum(discard2)) ## DataFrame with 1 row and 5 columns ## LibSize NExprs SpikeProp MitoProp Total ## &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; ## 1 4 0 1 2 6 Alternatively, this entire process can be done in a single step using the quickPerCellQC() function. This is a wrapper that simply calls isOutlier() with the settings described above. reasons &lt;- quickPerCellQC(df, percent_subsets=c(&quot;subsets_Mito_percent&quot;, &quot;altexps_ERCC_percent&quot;)) colSums(as.matrix(reasons)) ## low_lib_size low_n_features high_subsets_Mito_percent ## 4 0 2 ## high_altexps_ERCC_percent discard ## 1 6 With this strategy, the thresholds adapt to both the location and spread of the distribution of values for a given metric. This allows the QC procedure to adjust to changes in sequencing depth, cDNA capture efficiency, mitochondrial content, etc. without requiring any user intervention or prior experience. However, it does require some implicit assumptions that are discussed below in more detail. 6.3.2.2 Assumptions of outlier detection Outlier detection assumes that most cells are of acceptable quality. This is usually reasonable and can be experimentally supported in some situations by visually checking that the cells are intact, e.g., on the microwell plate. If most cells are of (unacceptably) low quality, the adaptive thresholds will obviously fail as they cannot remove the majority of cells. Of course, what is acceptable or not is in the eye of the beholder - neurons, for example, are notoriously difficult to dissociate, and we would often retain cells in a neuronal scRNA-seq dataset with QC metrics that would be unacceptable in a more amenable system like embryonic stem cells. Another assumption discussed earlier is that the QC metrics are independent of the biological state of each cell. This assumption is most likely to be violated in highly heterogeneous cell populations where cell types that naturally have less RNA or more mitochondria are more likely to be considered outliers and removed, even if they are of high quality. The use of the MAD mitigates this problem to some extent by accounting for biological variability in the QC metrics. A heterogeneous population should have higher variability in the metrics among high-quality cells, increasing the MAD and reducing the chance of incorrectly removing particular cell types (at the cost of reducing power to remove low-quality cells). In general, these assumptions are either reasonable or their violations have little effect on downstream conclusions. Nonetheless, it is helpful to keep them in mind when interpreting the results. 6.3.2.3 Considering experimental factors More complex studies may involve batches of cells generated with different experimental parameters (e.g., sequencing depth). In such cases, the adaptive strategy should be applied to each batch separately. It makes little sense to compute medians and MADs from a mixture distribution containing samples from multiple batches. For example, if the sequencing coverage is lower in one batch compared to the others, it will drag down the median and inflate the MAD. This will reduce the suitability of the adaptive threshold for the other batches. If each batch is represented by its own SingleCellExperiment, the isOutlier() function can be directly applied to each batch as shown above. However, if cells from all batches have been merged into a single SingleCellExperiment, the batch= argument should be used to ensure that outliers are identified within each batch. This allows isOutlier() to accommodate systematic differences in the QC metrics across batches. We will again illustrate using the 416B dataset, which contains two experimental factors - plate of origin and oncogene induction status. We combine these factors together and use this in the batch= argument to isOutlier() via quickPerCellQC(). This results in the removal of more cells as the MAD is no longer inflated by (i) systematic differences in sequencing depth between batches and (ii) differences in number of genes expressed upon oncogene induction. batch &lt;- paste0(sce.416b$phenotype, &quot;-&quot;, sce.416b$Plate) batch.reasons &lt;- quickPerCellQC(df, percent_subsets=c(&quot;subsets_Mito_percent&quot;, &quot;altexps_ERCC_percent&quot;), batch=batch) colSums(as.matrix(batch.reasons)) ## low_lib_size low_n_features high_subsets_Mito_percent ## 4 2 2 ## high_altexps_ERCC_percent discard ## 4 7 That said, the use of batch= involves the stronger assumption that most cells in each batch are of high quality. If an entire batch failed, outlier detection will not be able to act as an appropriate QC filter for that batch. For example, two batches in the Grun et al. (2016) human pancreas dataset contain a substantial proportion of putative damaged cells with higher ERCC content than the other batches (Figure 6.1). This inflates the median and MAD within those batches, resulting in a failure to remove the assumed low-quality cells. In such cases, it is better to compute a shared median and MAD from the other batches and use those estimates to obtain an appropriate filter threshold for cells in the problematic batches, as shown below. library(scRNAseq) sce.grun &lt;- GrunPancreasData() sce.grun &lt;- addPerCellQC(sce.grun) discard.ercc &lt;- isOutlier(sce.grun$altexps_ERCC_percent, type=&quot;higher&quot;, batch=sce.grun$donor) with.blocking &lt;- plotColData(sce.grun, x=&quot;donor&quot;, y=&quot;altexps_ERCC_percent&quot;, colour_by=I(discard.ercc)) discard.ercc2 &lt;- isOutlier(sce.grun$altexps_ERCC_percent, type=&quot;higher&quot;, batch=sce.grun$donor, subset=sce.grun$donor %in% c(&quot;D17&quot;, &quot;D2&quot;, &quot;D7&quot;)) without.blocking &lt;- plotColData(sce.grun, x=&quot;donor&quot;, y=&quot;altexps_ERCC_percent&quot;, colour_by=I(discard.ercc2)) gridExtra::grid.arrange(with.blocking, without.blocking, ncol=2) Figure 6.1: Distribution of the proportion of ERCC transcripts in each donor of the Grun pancreas dataset. Each point represents a cell and is coloured according to whether it was identified as an outlier within each batch (left) or using a common threshold (right). To identify problematic batches, one useful rule of thumb is to find batches with QC thresholds that are themselves outliers compared to the thresholds of other batches. The assumption here is that most batches consist of a majority of high quality cells such that the threshold value should follow some unimodal distribution across “typical” batches. If we observe a batch with an extreme threshold value, we may suspect that it contains a large number of low-quality cells that inflate the per-batch MAD. We demonstrate this process below for the Grun et al. (2016) data. ercc.thresholds &lt;- attr(discard.ercc, &quot;thresholds&quot;)[&quot;higher&quot;,] ercc.thresholds ## D10 D17 D2 D3 D7 ## 73.611 7.600 6.011 113.106 15.217 names(ercc.thresholds)[isOutlier(ercc.thresholds, type=&quot;higher&quot;)] ## [1] &quot;D10&quot; &quot;D3&quot; If we cannot assume that most batches contain a majority of high-quality cells, then all bets are off; we must revert to the approach of picking an arbitrary threshold value (Section 6.3.1) and hoping for the best. 6.3.3 Other approaches Another strategy is to identify outliers in high-dimensional space based on the QC metrics for each cell. We use methods from robustbase to quantify the “outlyingness” of each cells based on their QC metrics, and then use isOutlier() to identify low-quality cells that exhibit unusually high levels of outlyingness. stats &lt;- cbind(log10(df$sum), log10(df$detected), df$subsets_Mito_percent, df$altexps_ERCC_percent) library(robustbase) outlying &lt;- adjOutlyingness(stats, only.outlyingness = TRUE) multi.outlier &lt;- isOutlier(outlying, type = &quot;higher&quot;) summary(multi.outlier) ## Mode FALSE TRUE ## logical 183 9 This and related approaches like PCA-based outlier detection and support vector machines can provide more power to distinguish low-quality cells from high-quality counterparts (Ilicic et al. 2016) as they can exploit patterns across many QC metrics. However, this comes at some cost to interpretability, as the reason for removing a given cell may not always be obvious. For completeness, we note that outliers can also be identified from the gene expression profiles, rather than QC metrics. We consider this to be a risky strategy as it can remove high-quality cells in rare populations. 6.4 Checking diagnostic plots It is good practice to inspect the distributions of QC metrics (Figure 6.2) to identify possible problems. In the most ideal case, we would see normal distributions that would justify the 3 MAD threshold used in outlier detection. A large proportion of cells in another mode suggests that the QC metrics might be correlated with some biological state, potentially leading to the loss of distinct cell types during filtering. Batches with systematically poor values for any metric can also be quickly identified for further troubleshooting or outright removal. colData(sce.416b) &lt;- cbind(colData(sce.416b), df) sce.416b$block &lt;- factor(sce.416b$block) sce.416b$phenotype &lt;- ifelse(grepl(&quot;induced&quot;, sce.416b$phenotype), &quot;induced&quot;, &quot;wild type&quot;) sce.416b$discard &lt;- reasons$discard gridExtra::grid.arrange( plotColData(sce.416b, x=&quot;block&quot;, y=&quot;sum&quot;, colour_by=&quot;discard&quot;, other_fields=&quot;phenotype&quot;) + facet_wrap(~phenotype) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(sce.416b, x=&quot;block&quot;, y=&quot;detected&quot;, colour_by=&quot;discard&quot;, other_fields=&quot;phenotype&quot;) + facet_wrap(~phenotype) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(sce.416b, x=&quot;block&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;, other_fields=&quot;phenotype&quot;) + facet_wrap(~phenotype) + ggtitle(&quot;Mito percent&quot;), plotColData(sce.416b, x=&quot;block&quot;, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;, other_fields=&quot;phenotype&quot;) + facet_wrap(~phenotype) + ggtitle(&quot;ERCC percent&quot;), ncol=1 ) Figure 6.2: Distribution of QC metrics for each batch and phenotype in the 416B dataset. Each point represents a cell and is colored according to whether it was discarded, respectively. Another useful diagnostic involves plotting the proportion of mitochondrial counts against some of the other QC metrics. The aim is to confirm that there are no cells with both large total counts and large mitochondrial counts, to ensure that we are not inadvertently removing high-quality cells that happen to be highly metabolically active (e.g., hepatocytes). In this case, we do not observe any points in the top-right corner in Figure 6.3. plotColData(sce.416b, x=&quot;sum&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;, other_fields=c(&quot;block&quot;, &quot;phenotype&quot;)) + facet_grid(block~phenotype) + theme(panel.border = element_rect(color = &quot;grey&quot;)) Figure 6.3: Percentage of reads assigned to mitochondrial transcripts, plotted against the library size for each phenotype and batch. Comparison of the ERCC and mitochondrial percentages can also be informative (Figure 6.4). Low-quality cells with small mitochondrial percentages, large spike-in percentages and small library sizes are likely to be stripped nuclei, i.e., they have been so extensively damaged that they have lost all cytoplasmic content. Conversely, cells with high mitochondrial percentages and low ERCC percentages may represent undamaged cells that are metabolically active. plotColData(sce.416b, x=&quot;altexps_ERCC_percent&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;, other_fields=c(&quot;block&quot;, &quot;phenotype&quot;)) + facet_grid(block~phenotype) + theme(panel.border = element_rect(color = &quot;grey&quot;)) Figure 6.4: Percentage of reads assigned to mitochondrial transcripts, plotted against the percentage of reads assigned to ERCC transcripts for each phenotype and batch. 6.5 Cell calling for droplet data 6.5.1 Background An unique aspect of droplet-based data is that we have no prior knowledge about whether a particular library (i.e., cell barcode) corresponds to cell-containing or empty droplets. Thus, we need to call cells from empty droplets based on the observed expression profiles. This is not entirely straightforward as empty droplets can contain ambient (i.e., extracellular) RNA that can be captured and sequenced, resulting in non-zero counts for libraries that do not contain any cell. To demonstrate, we obtain the unfiltered count matrix for the PBMC dataset from 10X Genomics. library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) library(Matrix) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) sce.pbmc ## class: SingleCellExperiment ## dim: 33694 737280 ## metadata(1): Samples ## assays(1): counts ## rownames(33694): ENSG00000243485 ENSG00000237613 ... ENSG00000277475 ENSG00000268674 ## rowData names(2): ID Symbol ## colnames(737280): AAACCTGAGAAACCAT-1 AAACCTGAGAAACCGC-1 ... TTTGTCATCTTTAGTC-1 ## TTTGTCATCTTTCCTC-1 ## colData names(2): Sample Barcode ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): The distribution of total counts exhibits a sharp transition between barcodes with large and small total counts (Figure 6.5), probably corresponding to cell-containing and empty droplets respectively. A simple approach would be to apply a threshold on the total count to only retain those barcodes with large totals. However, this unnecessarily discards libraries derived from cell types with low RNA content. bcrank &lt;- barcodeRanks(counts(sce.pbmc)) # Only showing unique points for plotting speed. uniq &lt;- !duplicated(bcrank$rank) plot(bcrank$rank[uniq], bcrank$total[uniq], log=&quot;xy&quot;, xlab=&quot;Rank&quot;, ylab=&quot;Total UMI count&quot;, cex.lab=1.2) abline(h=metadata(bcrank)$inflection, col=&quot;darkgreen&quot;, lty=2) abline(h=metadata(bcrank)$knee, col=&quot;dodgerblue&quot;, lty=2) legend(&quot;bottomleft&quot;, legend=c(&quot;Inflection&quot;, &quot;Knee&quot;), col=c(&quot;darkgreen&quot;, &quot;dodgerblue&quot;), lty=2, cex=1.2) Figure 6.5: Total UMI count for each barcode in the PBMC dataset, plotted against its rank (in decreasing order of total counts). The inferred locations of the inflection and knee points are also shown. 6.5.2 Testing for empty droplets We use the emptyDrops() function to test whether the expression profile for each cell barcode is significantly different from the ambient RNA pool (Lun et al. 2019). Any significant deviation indicates that the barcode corresponds to a cell-containing droplet. This allows us to discriminate between well-sequenced empty droplets and droplets derived from cells with little RNA, both of which would have similar total counts in Figure 6.5. We call cells at a false discovery rate (FDR) of 0.1%, meaning that no more than 0.1% of our called barcodes should be empty droplets on average. # emptyDrops performs Monte Carlo simulations to compute p-values, # so we need to set the seed to obtain reproducible results. set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) # See ?emptyDrops for an explanation of why there are NA values. summary(e.out$FDR &lt;= 0.001) ## Mode FALSE TRUE NA&#39;s ## logical 1056 4233 731991 emptyDrops() uses Monte Carlo simulations to compute \\(p\\)-values for the multinomial sampling transcripts from the ambient pool. The number of Monte Carlo iterations determines the lower bound for the \\(p\\)-values (Phipson and Smyth 2010). The Limited field in the output indicates whether or not the computed \\(p\\)-value for a particular barcode is bounded by the number of iterations. If any non-significant barcodes are TRUE for Limited, we may need to increase the number of iterations. A larger number of iterations will result in a lower \\(p\\)-value for these barcodes, which may allow them to be detected after correcting for multiple testing. table(Sig=e.out$FDR &lt;= 0.001, Limited=e.out$Limited) ## Limited ## Sig FALSE TRUE ## FALSE 1056 0 ## TRUE 1661 2572 As mentioned above, emptyDrops() assumes that barcodes with low total UMI counts are empty droplets. Thus, the null hypothesis should be true for all of these barcodes. We can check whether the hypothesis testing procedure holds its size by examining the distribution of \\(p\\)-values for low-total barcodes with test.ambient=TRUE. Ideally, the distribution should be close to uniform (Figure 6.6). Large peaks near zero indicate that barcodes with total counts below lower are not all ambient in origin. This can be resolved by decreasing lower further to ensure that barcodes corresponding to droplets with very small cells are not used to estimate the ambient profile. set.seed(100) limit &lt;- 100 all.out &lt;- emptyDrops(counts(sce.pbmc), lower=limit, test.ambient=TRUE) hist(all.out$PValue[all.out$Total &lt;= limit &amp; all.out$Total &gt; 0], xlab=&quot;P-value&quot;, main=&quot;&quot;, col=&quot;grey80&quot;) Figure 6.6: Distribution of \\(p\\)-values for the assumed empty droplets. Once we are satisfied with the performance of emptyDrops(), we subset our SingleCellExperiment object to retain only the detected cells. Discerning readers will notice the use of which(), which conveniently removes the NAs prior to the subsetting. sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] It is worth pointing out that, at this point, we do not attempt to remove the ambient contamination from each library. Accurate quantification of the contamination rate in each cell is difficult as it generally requires some prior biological knowledge about genes that are expected to have mutually exclusive expression profiles and are highly abundant in the ambient solution (Young and Behjati 2018). Fortunately, ambient contamination usually has little effect on the downstream conclusions for routine analyses; cell type identities are usually easy enough to determine from the affected genes, notwithstanding a (mostly harmless) low background level of expression for marker genes that should be unique to a cell type. However, more susceptible analyses may require specific remedies like those discussed in Section 14.6. 6.5.3 Relationship with other QC metrics While emptyDrops() will distinguish cells from empty droplets, it makes no statement about the quality of the cells. It is entirely possible for droplets to contain damaged or dying cells, which need to be removed prior to downstream analysis. This is achieved using the same outlier-based strategy described in Section 6.3.2. Filtering on the mitochondrial proportion provides the most additional benefit in this situation, provided that we check that we are not removing a subpopulation of metabolically active cells (Figure 6.7). is.mito &lt;- grep(&quot;^MT-&quot;, rowData(sce.pbmc)$Symbol) pbmc.qc &lt;- perCellQCMetrics(sce.pbmc, subsets=list(MT=is.mito)) discard.mito &lt;- isOutlier(pbmc.qc$subsets_MT_percent, type=&quot;higher&quot;) summary(discard.mito) ## Mode FALSE TRUE ## logical 3922 311 plot(pbmc.qc$sum, pbmc.qc$subsets_MT_percent, log=&quot;x&quot;, xlab=&quot;Total count&quot;, ylab=&#39;Mitochondrial %&#39;) abline(h=attr(discard.mito, &quot;thresholds&quot;)[&quot;higher&quot;], col=&quot;red&quot;) Figure 6.7: Percentage of reads assigned to mitochondrial transcripts, plotted against the library size. The red line represents the upper threshold used for QC filtering. emptyDrops() already removes cells with very low library sizes or (by association) low numbers of expressed genes. Thus, further filtering on these metrics is not strictly necessary. It may still be desirable to filter on both of these metrics to remove non-empty droplets containing cell fragments or stripped nuclei that were not caught by the mitochondrial filter. However, this should be weighed against the risk of losing genuine cell types as discussed in Section 6.3.2.2. Note that CellRanger version 3 automatically performs cell calling using an algorithm similar to emptyDrops(). If we had started our analysis with the filtered count matrix, we could go straight to computing other QC metrics. We would not need to run emptyDrops() manually as shown here, and indeed, attempting to do so would lead to nonsensical results if not outright software errors. Nonetheless, it may still be desirable to load the unfiltered matrix and apply emptyDrops() ourselves, on occasions where more detailed inspection or control of the cell-calling statistics is desired. 6.6 Removing low-quality cells Once low-quality cells have been identified, we can choose to either remove them or mark them. Removal is the most straightforward option and is achieved by subsetting the SingleCellExperiment by column. In this case, we use the low-quality calls from Section 6.3.2.3 to generate a subsetted SingleCellExperiment that we would use for downstream analyses. # Keeping the columns we DON&#39;T want to discard. filtered &lt;- sce.416b[,!reasons$discard] The biggest practical concern during QC is whether an entire cell type is inadvertently discarded. There is always some risk of this occurring as the QC metrics are never fully independent of biological state. We can diagnose cell type loss by looking for systematic differences in gene expression between the discarded and retained cells. To demonstrate, we compute the average count across the discarded and retained pools in the 416B data set, and we compute the log-fold change between the pool averages. # Using the &#39;discard&#39; vector for demonstration, # as it has more cells for stable calculation of &#39;lost&#39;. lost &lt;- calculateAverage(counts(sce.416b)[,!discard]) kept &lt;- calculateAverage(counts(sce.416b)[,discard]) library(edgeR) logged &lt;- cpm(cbind(lost, kept), log=TRUE, prior.count=2) logFC &lt;- logged[,1] - logged[,2] abundance &lt;- rowMeans(logged) If the discarded pool is enriched for a certain cell type, we should observe increased expression of the corresponding marker genes. No systematic upregulation of genes is apparent in the discarded pool in Figure 6.8, suggesting that the QC step did not inadvertently filter out a cell type in the 416B dataset. plot(abundance, logFC, xlab=&quot;Average count&quot;, ylab=&quot;Log-FC (lost/kept)&quot;, pch=16) points(abundance[is.mito], logFC[is.mito], col=&quot;dodgerblue&quot;, pch=16) Figure 6.8: Log-fold change in expression in the discarded cells compared to the retained cells in the 416B dataset. Each point represents a gene with mitochondrial transcripts in blue. For comparison, let’s pretend that we applied a fixed threshold on the library size to filter cells in the PBMC data set. Specifically, we remove all libraries with a library size below 500. alt.discard &lt;- colSums(counts(sce.pbmc)) &lt; 500 lost &lt;- calculateAverage(counts(sce.pbmc)[,alt.discard]) kept &lt;- calculateAverage(counts(sce.pbmc)[,!alt.discard]) logged &lt;- edgeR::cpm(cbind(lost, kept), log=TRUE, prior.count=2) logFC &lt;- logged[,1] - logged[,2] abundance &lt;- rowMeans(logged) The presence of a distinct population in the discarded pool manifests in Figure 6.9 as a set of genes that are strongly upregulated in lost. This includes PF4, PPBP and CAVIN2, which (spoiler alert!) indicates that there is a platelet population that has been discarded by alt.discard. plot(abundance, logFC, xlab=&quot;Average count&quot;, ylab=&quot;Log-FC (lost/kept)&quot;, pch=16) platelet &lt;- c(&quot;PF4&quot;, &quot;PPBP&quot;, &quot;CAVIN2&quot;) library(org.Hs.eg.db) ids &lt;- mapIds(org.Hs.eg.db, keys=platelet, column=&quot;ENSEMBL&quot;, keytype=&quot;SYMBOL&quot;) points(abundance[ids], logFC[ids], col=&quot;orange&quot;, pch=16) Figure 6.9: Average counts across all discarded and retained cells in the PBMC dataset, after using a more stringent filter on the total UMI count. Each point represents a gene, with platelet-related genes highlighted in orange. If we suspect that cell types have been incorrectly discarded by our QC procedure, the most direct solution is to relax the QC filters for metrics that are associated with genuine biological differences. For example, outlier detection can be relaxed by increasing nmads= in the isOutlier() calls. Of course, this increases the risk of retaining more low-quality cells and encountering the problems discussed in Section 6.1. The logical endpoint of this line of reasoning is to avoid filtering altogether, as discussed in Section 6.7. As an aside, it is worth mentioning that the true technical quality of a cell may also be correlated with its type. (This differs from a correlation between the cell type and the QC metrics, as the latter are our imperfect proxies for quality.) This can arise if some cell types are not amenable to dissociation or microfluidics handling during the scRNA-seq protocol. In such cases, it is possible to “correctly” discard an entire cell type during QC if all of its cells are damaged. Indeed, concerns over the computational removal of cell types during QC are probably minor compared to losses in the experimental protocol. 6.7 Marking low-quality cells The other option is to simply mark the low-quality cells as such and retain them in the downstream analysis. The aim here is to allow clusters of low-quality cells to form, and then to identify and ignore such clusters during interpretation of the results. This approach avoids discarding cell types that have poor values for the QC metrics, giving users an opportunity to decide whether a cluster of such cells represents a genuine biological state. marked &lt;- sce.416b marked$discard &lt;- batch.reasons$discard The downside is that it shifts the burden of QC to the interpretation of the clusters, which is already the bottleneck in scRNA-seq data analysis (Chapters 10, 11 and 12). Indeed, if we do not trust the QC metrics, we would have to distinguish between genuine cell types and low-quality cells based only on marker genes, and this is not always easy due to the tendency of the latter to “express” interesting genes (Section 6.1). Retention of low-quality cells also compromises the accuracy of the variance modelling, requiring, e.g., use of more PCs to offset the fact that the early PCs are driven by differences between low-quality and other cells. For routine analyses, we suggest performing removal by default to avoid complications from low-quality cells. This allows most of the population structure to be characterized with no - or, at least, fewer - concerns about its validity. Once the initial analysis is done, and if there are any concerns about discarded cell types (Section ??), a more thorough re-analysis can be performed where the low-quality cells are only marked. This recovers cell types with low RNA content, high mitochondrial proportions, etc. that only need to be interpreted insofar as they “fill the gaps” in the initial analysis. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] org.Hs.eg.db_3.10.0 edgeR_3.29.0 limma_3.43.0 [4] Matrix_1.2-18 DropletUtils_1.7.1 robustbase_0.93-5 [7] scRNAseq_2.1.5 scater_1.15.12 ggplot2_3.2.1 [10] ensembldb_2.11.2 AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 [13] AnnotationDbi_1.49.0 AnnotationHub_2.19.3 BiocFileCache_1.11.4 [16] dbplyr_1.4.2 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [19] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [22] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [25] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [28] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_1.4-1 XVector_0.27.0 [4] BiocNeighbors_1.5.1 farver_2.0.1 bit64_0.9-7 [7] interactiveDisplayBase_1.25.0 R.methodsS3_1.7.1 knitr_1.26 [10] zeallot_0.1.0 Rsamtools_2.3.2 R.oo_1.23.0 [13] HDF5Array_1.15.2 shiny_1.4.0 BiocManager_1.30.10 [16] compiler_4.0.0 httr_1.4.1 dqrng_0.2.1 [19] backports_1.1.5 assertthat_0.2.1 fastmap_1.0.1 [22] lazyeval_0.2.2 later_1.0.0 BiocSingular_1.3.1 [25] htmltools_0.4.0 prettyunits_1.0.2 tools_4.0.0 [28] rsvd_1.0.2 gtable_0.3.0 glue_1.3.1 [31] GenomeInfoDbData_1.2.2 reshape2_1.4.3 dplyr_0.8.3 [34] rappdirs_0.3.1 Rcpp_1.0.3 vctrs_0.2.1 [37] Biostrings_2.55.4 ExperimentHub_1.13.5 rtracklayer_1.47.0 [40] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [43] ps_1.3.0 mime_0.8 lifecycle_0.1.0 [46] irlba_2.3.3 XML_3.98-1.20 DEoptimR_1.0-8 [49] zlibbioc_1.33.0 scales_1.1.0 hms_0.5.2 [52] promises_1.1.0 ProtGenerics_1.19.3 rhdf5_2.31.1 [55] yaml_2.2.0 curl_4.3 memoise_1.1.0 [58] gridExtra_2.3 biomaRt_2.43.0 stringi_1.4.3 [61] RSQLite_2.2.0 BiocVersion_3.11.1 highr_0.8 [64] rlang_0.4.2 pkgconfig_2.0.3 bitops_1.0-6 [67] evaluate_0.14 lattice_0.20-38 Rhdf5lib_1.9.0 [70] purrr_0.3.3 GenomicAlignments_1.23.1 labeling_0.3 [73] cowplot_1.0.0 bit_1.1-14 processx_3.4.1 [76] tidyselect_0.2.5 plyr_1.8.5 magrittr_1.5 [79] bookdown_0.16 R6_2.4.1 DBI_1.1.0 [82] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [85] tibble_2.1.3 crayon_1.3.4 rmarkdown_2.0 [88] viridis_0.5.1 progress_1.2.2 locfit_1.5-9.1 [91] grid_4.0.0 blob_1.2.0 callr_3.4.0 [94] digest_0.6.23 xtable_1.8-4 httpuv_1.5.2 [97] R.utils_2.9.2 openssl_1.4.1 munsell_0.5.0 [100] beeswarm_0.2.3 viridisLite_0.3.0 vipor_0.4.5 [103] askpass_1.1 Bibliography "],
["normalization.html", "Chapter 7 Normalization 7.1 Motivation 7.2 Library size normalization 7.3 Normalization by deconvolution 7.4 Normalization by spike-ins 7.5 Applying the size factors Session Info", " Chapter 7 Normalization .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 7.1 Motivation Systematic differences in sequencing coverage between libraries are often observed in single-cell RNA sequencing data (Stegle, Teichmann, and Marioni 2015). They typically arise from technical differences in cDNA capture or PCR amplification efficiency across cells, attributable to the difficulty of achieving consistent library preparation with minimal starting material. Normalization aims to remove these differences such that they do not interfere with comparisons of the expression profiles between cells. This ensures that any observed heterogeneity or differential expression within the cell population are driven by biology and not technical biases. At this point, it is worth noting the difference between normalization and batch correction (Chapter 26.8). Normalization occurs regardless of the batch structure and only considers technical biases, while batch correction - as the name suggests - only occurs across batches and must consider both technical biases and biological differences. Technical biases tend to affect genes in a similar manner, or at least in a manner related to their biophysical properties (e.g., length, GC content), while biological differences between batches can be highly unpredictable. As such, these two tasks involve different assumptions and generally involve different computational methods (though some packages aim to perform both steps at once, e.g., zinbwave). Thus, it is important to avoid conflating “normalized” and “batch-corrected” data, as these usually refer to different things. We will mostly focus our attention on scaling normalization, which is the simplest and most commonly used class of normalization strategies. This involves dividing all counts for each cell by a cell-specific scaling factor, often called a “size factor” (Anders and Huber 2010). The assumption here is that any cell-specific bias (e.g., in capture or amplification efficiency) affects all genes equally via scaling of the expected mean count for that cell. The size factor for each cell represents the estimate of the relative bias in that cell, so division of its counts by its size factor should remove that bias. The resulting “normalized expression values” can then be used for downstream analyses such as clustering and dimensionality reduction. To demonstrate, we will use the Zeisel et al. (2015) dataset from the scRNAseq package. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.zeisel &lt;- ZeiselBrainData() sce.zeisel &lt;- sce.zeisel[rowData(sce.zeisel)$featureType!=&quot;repeat&quot;,] library(scater) sce.zeisel &lt;- aggregateAcrossFeatures(sce.zeisel, id=sub(&quot;_loc[0-9]+$&quot;, &quot;&quot;, rownames(sce.zeisel))) #--- gene-annotation ---# library(org.Mm.eg.db) ensembl &lt;- mapIds(org.Mm.eg.db, keys=rownames(sce.zeisel), keytype=&quot;SYMBOL&quot;, column=&quot;ENSEMBL&quot;) rowData(sce.zeisel)$ENSEMBL &lt;- ensembl #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.zeisel, subsets=list( Mt=rowData(sce.zeisel)$featureType==&quot;mito&quot;)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;altexps_ERCC_percent&quot;, &quot;subsets_Mt_percent&quot;)) sce.zeisel &lt;- sce.zeisel[,!qc$discard] sce.zeisel ## class: SingleCellExperiment ## dim: 19839 2816 ## metadata(0): ## assays(1): counts ## rownames(19839): 0610005C13Rik 0610007N19Rik ... mt-Tw mt-Ty ## rowData names(2): featureType ENSEMBL ## colnames(2816): 1772071015_C02 1772071017_G12 ... 1772063068_D01 1772066098_A12 ## colData names(10): tissue group # ... level1class level2class ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(2): ERCC repeat 7.2 Library size normalization Library size normalization is the simplest strategy for performing scaling normalization. We define the library size as the total sum of counts across all genes for each cell, the expected value of which is assumed to scale with any cell-specific biases. The “library size factor” for each cell is then directly proportional to its library size where the proportionality constant is defined such that the mean size factor across all cells is equal to 1. This definition ensures that the normalized expression values are on the same scale as the original counts, which is useful for interpretation - especially when dealing with transformed data (see Section 7.5.1). library(scater) lib.sf.zeisel &lt;- librarySizeFactors(sce.zeisel) summary(lib.sf.zeisel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.176 0.568 0.868 1.000 1.278 4.084 In the Zeisel brain data, the library size factors differ by up to 10-fold across cells (Figure 7.1). This is typical of the variability in coverage in scRNA-seq data. hist(log10(lib.sf.zeisel), xlab=&quot;Log10[Size factor]&quot;, col=&#39;grey80&#39;) Figure 7.1: Distribution of size factors derived from the library size in the Zeisel brain dataset. Strictly speaking, the use of library size factors assumes that there is no “imbalance” in the differentially expressed (DE) genes between any pair of cells. That is, any upregulation for a subset of genes is cancelled out by the same magnitude of downregulation in a different subset of genes. This ensures that the library size is an unbiased estimate of the relative cell-specific bias by avoiding composition effects (Robinson and Oshlack 2010). However, balanced DE is not generally present in scRNA-seq applications, which means that library size normalization may not yield accurate normalized expression values for downstream analyses. In practice, normalization accuracy is not a major consideration for exploratory scRNA-seq data analyses. Composition biases do not usually affect the separation of clusters, only the magnitude - and to a lesser extent, direction - of the log-fold changes between clusters or cell types. As such, library size normalization is usually sufficient in many applications where the aim is to identify clusters and the top markers that define each cluster. 7.3 Normalization by deconvolution As previously mentioned, composition biases will be present when any unbalanced differential expression exists between samples. Consider the simple example of two cells where a single gene \\(X\\) is upregulated in one cell \\(A\\) compared to the other cell \\(B\\). This upregulation means that either (i) more sequencing resources are devoted to \\(X\\) in \\(A\\), thus decreasing coverage of all other non-DE genes when the total library size of each cell is experimentally fixed (e.g., due to library quantification); or (ii) the library size of \\(A\\) increases when \\(X\\) is assigned more reads or UMIs, increasing the library size factor and yielding smaller normalized expression values for all non-DE genes. In both cases, the net effect is that non-DE genes in \\(A\\) will incorrectly appear to be downregulated compared to \\(B\\). The removal of composition biases is a well-studied problem for bulk RNA sequencing data analysis. Normalization can be performed with the estimateSizeFactorsFromMatrix() function in the DESeq2 package (Anders and Huber 2010; Love, Huber, and Anders 2014) or with the calcNormFactors() function (Robinson and Oshlack 2010) in the edgeR package. These assume that most genes are not DE between cells. Any systematic difference in count size across the non-DE majority of genes between two cells is assumed to represent bias that is used to compute an appropriate size factor for its removal. However, single-cell data can be problematic for these bulk normalization methods due to the dominance of low and zero counts. To overcome this, we pool counts from many cells to increase the size of the counts for accurate size factor estimation (Lun, Bach, and Marioni 2016). Pool-based size factors are then “deconvolved” into cell-based factors for normalization of each cell’s expression profile. This is performed using the calculateSumFactors() function from scran, as shown below. library(scran) set.seed(100) clust.zeisel &lt;- quickCluster(sce.zeisel) table(clust.zeisel) ## clust.zeisel ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ## 170 254 441 178 393 148 219 240 189 123 112 103 135 111 deconv.sf.zeisel &lt;- calculateSumFactors(sce.zeisel, cluster=clust.zeisel) summary(deconv.sf.zeisel) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.119 0.486 0.831 1.000 1.321 4.509 We use a pre-clustering step with quickCluster() where cells in each cluster are normalized separately and the size factors are rescaled to be comparable across clusters. This avoids the assumption that most genes are non-DE across the entire population - only a non-DE majority is required between pairs of clusters, which is a weaker assumption for highly heterogeneous populations. By default, quickCluster() will use an approximate algorithm for PCA based on methods from the irlba package. The approximation relies on stochastic initialization so we need to set the random seed (via set.seed()) for reproducibility. We see that the deconvolution size factors exhibit cell type-specific deviations from the library size factors in Figure 7.2. This is consistent with the presence of composition biases that are introduced by strong differential expression between cell types. Use of the deconvolution size factors adjusts for these biases to improve normalization accuracy for downstream applications. plot(lib.sf.zeisel, deconv.sf.zeisel, xlab=&quot;Library size factor&quot;, ylab=&quot;Deconvolution size factor&quot;, log=&#39;xy&#39;, pch=16, col=as.integer(factor(sce.zeisel$level1class))) abline(a=0, b=1, col=&quot;red&quot;) Figure 7.2: Deconvolution size factor for each cell in the Zeisel brain dataset, compared to the equivalent size factor derived from the library size. The red line corresponds to identity between the two size factors. Accurate normalization is most important for procedures that involve estimation and interpretation of per-gene statistics. For example, composition biases can compromise DE analyses by systematically shifting the log-fold changes in one direction or another. However, it tends to provide less benefit over simple library size normalization for cell-based analyses such as clustering. The presence of composition biases already implies strong differences in expression profiles, so changing the normalization strategy is unlikely to affect the outcome of a clustering procedure. 7.4 Normalization by spike-ins Spike-in normalization is based on the assumption that the same amount of spike-in RNA was added to each cell (A. T. L. Lun et al. 2017). Systematic differences in the coverage of the spike-in transcripts can only be due to cell-specific biases, e.g., in capture efficiency or sequencing depth. To remove these biases, we equalize spike-in coverage across cells by scaling with “spike-in size factors”. Compared to the previous methods, spike-in normalization requires no assumption about the biology of the system (i.e., the absence of many DE genes). Instead, it assumes that the spike-in transcripts were (i) added at a constant level to each cell, and (ii) respond to biases in the same relative manner as endogenous genes. Practically, spike-in normalization should be used if differences in the total RNA content of individual cells are of interest and must be preserved in downstream analyses. For a given cell, an increase in its overall amount of endogenous RNA will not increase its spike-in size factor. This ensures that the effects of total RNA content on expression across the population will not be removed upon scaling. By comparison, the other normalization methods described above will simply interpret any change in total RNA content as part of the bias and remove it. We demonstrate the use of spike-in normalization on a different dataset involving T cell activation after stimulation with T cell recepter ligands of varying affinity (Richard et al. 2018). library(scRNAseq) sce.richard &lt;- RichardTCellData() sce.richard &lt;- sce.richard[,sce.richard$`single cell quality`==&quot;OK&quot;] sce.richard ## class: SingleCellExperiment ## dim: 46603 528 ## metadata(0): ## assays(1): counts ## rownames(46603): ENSMUSG00000102693 ENSMUSG00000064842 ... ENSMUSG00000096730 ## ENSMUSG00000095742 ## rowData names(0): ## colnames(528): SLX-12611.N701_S502. SLX-12611.N702_S502. ... SLX-12612.i712_i522. ## SLX-12612.i714_i522. ## colData names(13): age individual ... stimulus time ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): ERCC We apply the computeSpikeFactors() method to estimate spike-in size factors for all cells. This is defined by converting the total spike-in count per cell into a size factor, using the same reasoning as in librarySizeFactors(). Scaling will subsequently remove any differences in spike-in coverage across cells. sce.richard &lt;- computeSpikeFactors(sce.richard, &quot;ERCC&quot;) summary(sizeFactors(sce.richard)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.125 0.428 0.627 1.000 1.070 23.316 We observe a positive correlation between the spike-in size factors and deconvolution size factors within each treatment condition (Figure 7.3), indicating that they are capturing similar technical biases in sequencing depth and capture efficiency. However, we also observe that increasing stimulation of the T cell receptor - in terms of increasing affinity or time - results in a decrease in the spike-in factors relative to the library size factors. This is consistent with an increase in biosynthetic activity and total RNA content during stimulation, which reduces the relative spike-in coverage in each library (thereby decreasing the spike-in size factors) but increases the coverage of endogenous genes (thus increasing the library size factors). to.plot &lt;- data.frame( DeconvFactor=calculateSumFactors(sce.richard), SpikeFactor=sizeFactors(sce.richard), Stimulus=sce.richard$stimulus, Time=sce.richard$time ) ggplot(to.plot, aes(x=DeconvFactor, y=SpikeFactor, color=Time)) + geom_point() + facet_wrap(~Stimulus) + scale_x_log10() + scale_y_log10() + geom_abline(intercept=0, slope=1, color=&quot;red&quot;) Figure 7.3: Size factors from spike-in normalization, plotted against the library size factors for all cells in the T cell dataset. Each plot represents a different ligand treatment and each point is a cell coloured according by time from stimulation. The differences between these two sets of size factors have real consequences for downstream interpretation. If the spike-in size factors were applied to the counts, the expression values in unstimulated cells would be scaled up while expression in stimulated cells would be scaled down. However, the opposite would occur if the deconvolution size factors were used. This can manifest as shifts in the magnitude and direction of DE between conditions when we switch between normalization strategies, as shown below for Malat1 (Figure 7.4). # See below for explanation of logNormCounts(). sce.richard.deconv &lt;- logNormCounts(sce.richard, size_factors=to.plot$DeconvFactor) sce.richard.spike &lt;- logNormCounts(sce.richard, size_factors=to.plot$SpikeFactor) gridExtra::grid.arrange( plotExpression(sce.richard.deconv, x=&quot;stimulus&quot;, colour_by=&quot;time&quot;, features=&quot;ENSMUSG00000092341&quot;) + theme(axis.text.x = element_text(angle = 90)) + ggtitle(&quot;After deconvolution&quot;), plotExpression(sce.richard.spike, x=&quot;stimulus&quot;, colour_by=&quot;time&quot;, features=&quot;ENSMUSG00000092341&quot;) + theme(axis.text.x = element_text(angle = 90)) + ggtitle(&quot;After spike-in normalization&quot;), ncol=2 ) Figure 7.4: Distribution of log-normalized expression values for Malat1 after normalization with the deconvolution size factors (left) or spike-in size factors (right). Cells are stratified by the ligand affinity and colored by the time after stimulation. Whether or not total RNA content is relevant – and thus, the choice of normalization strategy – depends on the biological hypothesis. In most cases, changes in total RNA content are not interesting and can be normalized out by applying the library size or deconvolution factors. However, this may not always be appropriate if differences in total RNA are associated with a biological process of interest, e.g., cell cycle activity or T cell activation. Spike-in normalization will preserve these differences such that any changes in expression between biological groups have the correct sign. However! Regardless of whether we care about total RNA content, it is critical that the spike-in transcripts are normalized using the spike-in size factors. Size factors computed from the counts for endogenous genes should not be applied to the spike-in transcripts, precisely because the former captures differences in total RNA content that are not experienced by the latter. Attempting to normalize the spike-in counts with the gene-based size factors will lead to over-normalization and incorrect quantification. Thus, if normalized spike-in data is required, we must compute a separate set of size factors for the spike-in transcripts; this is automatically performed by functions such as modelGeneVarWithSpikes(). 7.5 Applying the size factors 7.5.1 Scaling and log-transforming Once we have computed the size factors, we use the logNormCounts() function from scater to compute normalized expression values for each cell. This is done by dividing the count for each gene/spike-in transcript with the appropriate size factor for that cell. The function also log-transforms the normalized values, creating a new assay called &quot;logcounts&quot;. (Technically, these are “log-transformed normalized expression values”, but that’s too much of a mouthful to fit into the assay name.) These log-values will be the basis of our downstream analyses in the following chapters. set.seed(100) clust.zeisel &lt;- quickCluster(sce.zeisel) sce.zeisel &lt;- computeSumFactors(sce.zeisel, cluster=clust.zeisel, min.mean=0.1) sce.zeisel &lt;- logNormCounts(sce.zeisel) assayNames(sce.zeisel) ## [1] &quot;counts&quot; &quot;logcounts&quot; The log-transformation is useful as differences in the log-values represent log-fold changes in expression. This is important in downstream procedures based on Euclidean distances, which includes many forms of clustering and dimensionality reduction. By operating on log-transformed data, we ensure that these procedures are measuring distances between cells based on log-fold changes in expression. Or in other words, which is more interesting - a gene that is expressed at an average count of 50 in cell type \\(A\\) and 10 in cell type \\(B\\), or a gene that is expressed at an average count of 1100 in \\(A\\) and 1000 in \\(B\\)? Log-transformation focuses on the former by promoting contributions from genes with strong relative differences. When log-transforming, we typically add a pseudo-count to avoid undefined values at zero. Larger pseudo-counts will effectively shrink the log-fold changes between cells towards zero for low-abundance genes, meaning that downstream high-dimensional analyses will be driven more by differences in expression for high-abundance genes. Conversely, smaller pseudo-counts will increase the relative contribution of low-abundance genes. Common practice is to use a pseudo-count of 1, for the simple pragmatic reason that it preserves sparsity in the original matrix (i.e., zeroes in the input remain zeroes after transformation). This works well in all but the most pathological scenarios (A. Lun 2018). Incidentally, the addition of the pseudo-count is the motivation for the centering of the size factors at unity. This ensures that both the pseudo-count and the normalized expression values are on the same scale; a pseudo-count of 1 can be interpreted as an extra read or UMI for each gene. In practical terms, centering means that the shrinkage effect of the pseudo-count diminishes as sequencing depth improves. This correctly ensures that estimates of the log-fold change in expression (e.g., from differences in the log-values between groups of cells) become increasingly accurate with deeper coverage. In contrast, if we applied a constant pseudo-count to some count-per-million-like measure, accuracy of the subsequent log-fold changes would never improve regardless of how much additional sequencing we performed. 7.5.2 Downsampling and log-transforming In rare cases, direct scaling of the counts is not appropriate due to the effect described by A. Lun (2018). Briefly, this is caused by the fact that the mean of the log-normalized counts is not the same as the log-transformed mean of the normalized counts. The difference between them depends on the mean and variance of the original counts, such that there is a systematic trend in the mean of the log-counts with respect to the count size. This typically manifests as trajectories correlated strongly with library size even after library size normalization, as shown in Figure 7.5 for synthetic scRNA-seq data generated with a pool-and-split approach (Tian et al. 2019). # TODO: move to scRNAseq. library(BiocFileCache) bfc &lt;- BiocFileCache(ask=FALSE) qcdata &lt;- bfcrpath(bfc, &quot;https://github.com/LuyiTian/CellBench_data/blob/master/data/mRNAmix_qc.RData?raw=true&quot;) env &lt;- new.env() load(qcdata, envir=env) sce.8qc &lt;- env$sce8_qc # Library size normalization and log-transformation. sce.8qc &lt;- logNormCounts(sce.8qc) sce.8qc &lt;- runPCA(sce.8qc) gridExtra::grid.arrange( plotPCA(sce.8qc, colour_by=I(factor(sce.8qc$mix))), plotPCA(sce.8qc, colour_by=I(librarySizeFactors(sce.8qc))), ncol=2 ) Figure 7.5: PCA plot of all pool-and-split libraries in the SORT-seq CellBench data, computed from the log-normalized expression values with library size-derived size factors. Each point represents a library and is colored by the mixing ratio used to construct it (left) or by the size factor (right). As the problem arises from differences in the sizes of the counts, the most straightforward solution is to downsample the counts of the high-coverage cells to match those of low-coverage cells. This uses the size factors to determine the amount of downsampling for each cell required to reach the 1st percentile of size factors. (The small minority of cells with smaller size factors are simply scaled up. We do not attempt to downsample to the smallest size factor, as this would result in excessive loss of information for one aberrant cell with very low size factors.) We can see that this eliminates the library size factor-associated trajectories from the first two PCs, improving resolution of the known differences based on mixing ratios (Figure 7.6). The log-transformation is still necessary but no longer introduces a shift in the means when the sizes of the counts are similar across cells. sce.8qc2 &lt;- logNormCounts(sce.8qc, downsample=TRUE) sce.8qc2 &lt;- runPCA(sce.8qc2) gridExtra::grid.arrange( plotPCA(sce.8qc2, colour_by=I(factor(sce.8qc2$mix))), plotPCA(sce.8qc2, colour_by=I(librarySizeFactors(sce.8qc2))), ncol=2 ) Figure 7.6: PCA plot of pool-and-split libraries in the SORT-seq CellBench data, computed from the log-transformed counts after downsampling in proportion to the library size factors. Each point represents a library and is colored by the mixing ratio used to construct it (left) or by the size factor (right). While downsampling is an expedient solution, it is statistically inefficient as it needs to increase the noise of high-coverage cells in order to avoid differences with low-coverage cells. It is also slower than simple scaling. Thus, we would only recommend using this approach after an initial analysis with scaled counts reveals suspicious trajectories that are strongly correlated with the size factors. In such cases, it is a simple matter to re-normalize by downsampling to determine whether the trajectory is an artifact of the log-transformation. 7.5.3 Other options Of course, log-transformation is not the only possible transformation. More sophisticated approaches can be used such as dedicated variance stabilizing transformations (e.g., from the DESeq2 or sctransform packages), which out-perform the log-transformation for removal of the mean-variance trend. In practice, though, the log-transformation is a good default choice due to its simplicity (a.k.a., reliability, predictability and computational efficiency) and interpretability. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] BiocFileCache_1.11.4 dbplyr_1.4.2 scRNAseq_2.1.5 [4] scran_1.15.14 scater_1.15.12 ggplot2_3.2.1 [7] SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 DelayedArray_0.13.2 [10] BiocParallel_1.21.2 matrixStats_0.55.0 Biobase_2.47.2 [13] GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 IRanges_2.21.2 [16] S4Vectors_0.25.8 BiocGenerics_0.33.0 Cairo_1.5-10 [19] BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_1.4-1 XVector_0.27.0 [4] BiocNeighbors_1.5.1 farver_2.0.1 bit64_0.9-7 [7] interactiveDisplayBase_1.25.0 AnnotationDbi_1.49.0 R.methodsS3_1.7.1 [10] knitr_1.26 zeallot_0.1.0 R.oo_1.23.0 [13] shiny_1.4.0 HDF5Array_1.15.2 BiocManager_1.30.10 [16] compiler_4.0.0 httr_1.4.1 dqrng_0.2.1 [19] backports_1.1.5 assertthat_0.2.1 Matrix_1.2-18 [22] fastmap_1.0.1 lazyeval_0.2.2 limma_3.43.0 [25] later_1.0.0 BiocSingular_1.3.1 htmltools_0.4.0 [28] tools_4.0.0 rsvd_1.0.2 igraph_1.2.4.2 [31] gtable_0.3.0 glue_1.3.1 GenomeInfoDbData_1.2.2 [34] dplyr_0.8.3 rappdirs_0.3.1 Rcpp_1.0.3 [37] vctrs_0.2.1 ExperimentHub_1.13.5 DelayedMatrixStats_1.9.0 [40] xfun_0.11 stringr_1.4.0 ps_1.3.0 [43] mime_0.8 lifecycle_0.1.0 irlba_2.3.3 [46] statmod_1.4.32 AnnotationHub_2.19.3 edgeR_3.29.0 [49] zlibbioc_1.33.0 scales_1.1.0 promises_1.1.0 [52] rhdf5_2.31.1 yaml_2.2.0 curl_4.3 [55] memoise_1.1.0 gridExtra_2.3 stringi_1.4.3 [58] RSQLite_2.2.0 BiocVersion_3.11.1 highr_0.8 [61] rlang_0.4.2 pkgconfig_2.0.3 bitops_1.0-6 [64] evaluate_0.14 lattice_0.20-38 purrr_0.3.3 [67] Rhdf5lib_1.9.0 labeling_0.3 cowplot_1.0.0 [70] bit_1.1-14 processx_3.4.1 tidyselect_0.2.5 [73] magrittr_1.5 bookdown_0.16 R6_2.4.1 [76] DBI_1.1.0 pillar_1.4.3 withr_2.1.2 [79] RCurl_1.95-4.12 tibble_2.1.3 crayon_1.3.4 [82] DropletUtils_1.7.1 rmarkdown_2.0 viridis_0.5.1 [85] locfit_1.5-9.1 grid_4.0.0 blob_1.2.0 [88] callr_3.4.0 digest_0.6.23 xtable_1.8-4 [91] httpuv_1.5.2 R.utils_2.9.2 munsell_0.5.0 [94] beeswarm_0.2.3 viridisLite_0.3.0 vipor_0.4.5 Bibliography "],
["feature-selection.html", "Chapter 8 Feature selection 8.1 Motivation 8.2 Quantifying per-gene variation 8.3 Selecting highly variable genes 8.4 Selecting a priori genes of interest 8.5 Putting it all together Session Info", " Chapter 8 Feature selection .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 8.1 Motivation We often use scRNA-seq data in exploratory analyses to characterize heterogeneity across cells. Procedures like clustering and dimensionality reduction compare cells based on their gene expression profiles, which involves aggregating per-gene differences into a single (dis)similarity metric between a pair of cells. The choice of genes to use in this calculation has a major impact on the behavior of the metric and the performance of downstream methods. We want to select genes that contain useful information about the biology of the system while removing genes that contain random noise. This aims to preserve interesting biological structure without the variance that obscures that structure, and to reduce the size of the data to improve computational efficiency of later steps. The simplest approach to feature selection is to select the most variable genes based on their expression across the population. This assumes that genuine biological differences will manifest as increased variation in the affected genes, compared to other genes that are only affected by technical noise or a baseline level of “uninteresting” biological variation (e.g., from transcriptional bursting). Several methods are available to quantify the variation per gene and to select an appropriate set of highly variable genes (HVGs). We will discuss these below using the 10X PBMC dataset for demonstration: View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) #--- gene-annotation ---# library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) #--- cell-detection ---# set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) sce.pbmc ## class: SingleCellExperiment ## dim: 33694 3922 ## metadata(1): Samples ## assays(2): counts logcounts ## rownames(33694): RP11-34P13.3 FAM138A ... AC213203.1 FAM231B ## rowData names(2): ID Symbol ## colnames(3922): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ... TTTGTCACAGGTCCAC-1 ## TTTGTCATCCCAAGAT-1 ## colData names(2): Sample Barcode ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): As well as the 416B dataset: View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.416b &lt;- LunSpikeInData(which=&quot;416b&quot;) sce.416b$block &lt;- factor(sce.416b$block) #--- gene-annotation ---# library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.416b)$ENSEMBL &lt;- rownames(sce.416b) rowData(sce.416b)$SYMBOL &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SYMBOL&quot;) rowData(sce.416b)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) library(scater) rownames(sce.416b) &lt;- uniquifyFeatureNames(rowData(sce.416b)$ENSEMBL, rowData(sce.416b)$SYMBOL) #--- quality-control ---# mito &lt;- which(rowData(sce.416b)$SEQNAME==&quot;MT&quot;) stats &lt;- perCellQCMetrics(sce.416b, subsets=list(Mt=mito)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;subsets_Mt_percent&quot;, &quot;altexps_ERCC_percent&quot;), batch=sce.416b$block) sce.416b &lt;- sce.416b[,!qc$discard] #--- normalization ---# library(scran) sce.416b &lt;- computeSumFactors(sce.416b) sce.416b &lt;- logNormCounts(sce.416b) sce.416b ## class: SingleCellExperiment ## dim: 46604 185 ## metadata(0): ## assays(2): counts logcounts ## rownames(46604): 4933401J01Rik Gm26206 ... CAAA01147332.1 CBFB-MYH11-mcherry ## rowData names(4): Length ENSEMBL SYMBOL SEQNAME ## colnames(185): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ## ... SLX-11312.N712_S507.H5H5YBBXX.s_8.r_1 SLX-11312.N712_S517.H5H5YBBXX.s_8.r_1 ## colData names(9): Source Name cell line ... spike-in addition block ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(2): ERCC SIRV 8.2 Quantifying per-gene variation 8.2.1 Variance of the log-counts The simplest approach to quantifying per-gene variation is to simply compute the variance of the log-normalized expression values (referred to as “log-counts” for simplicity) for each gene across all cells in the population (A. T. L. Lun, McCarthy, and Marioni 2016). This has an advantage in that the feature selection is based on the same log-values that are used for later downstream steps. In particular, genes with the largest variances in log-values will contribute the most to the Euclidean distances between cells. By using log-values here, we ensure that our quantitative definition of heterogeneity is consistent throughout the entire analysis. Calculation of the per-gene variance is simple but feature selection requires modelling of the mean-variance relationship. As discussed briefly in Section 7.5.1, the log-transformation does not achieve perfect variance stabilization, which means that the variance of a gene is driven more by its abundance than its underlying biological heterogeneity. To account for this effect, we use the modelGeneVar() function to fit a trend to the variance with respect to abundance across all genes (Figure 8.1). library(scran) dec.pbmc &lt;- modelGeneVar(sce.pbmc) # Visualizing the fit: fit.pbmc &lt;- metadata(dec.pbmc) plot(fit.pbmc$mean, fit.pbmc$var, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curve(fit.pbmc$trend(x), col=&quot;dodgerblue&quot;, add=TRUE, lwd=2) Figure 8.1: Variance in the PBMC data set as a function of the mean. Each point represents a gene while the blue line represents the trend fitted to all genes. At any given abundance, we assume that the expression profiles of most genes are dominated by random technical noise (see Section 8.2.3 for details). Under this assumption, our trend represents an estimate of the technical noise as a function of abundance. We then break down the total variance of each gene into the technical component, i.e., the fitted value of the trend at that gene’s abundance; and the biological component, defined as the difference between the total variance and the technical component. This biological component represents the “interesting” variation for each gene and can be used as the metric for HVG selection. # Ordering by most interesting genes for inspection. dec.pbmc[order(dec.pbmc$bio, decreasing=TRUE),] ## DataFrame with 33694 rows and 6 columns ## mean total tech bio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## LYZ 1.97770 5.11595 0.827277 4.28867 7.03214e-271 6.90908e-267 ## S100A9 1.94951 4.58859 0.827542 3.76105 9.35451e-209 6.12720e-205 ## S100A8 1.71828 4.45723 0.819402 3.63783 2.60467e-199 1.27955e-195 ## HLA-DRA 2.09694 3.72690 0.823663 2.90324 1.69875e-126 2.38432e-123 ## CD74 2.89840 3.30912 0.793203 2.51592 7.30210e-103 6.83268e-100 ## ... ... ... ... ... ... ... ## PTMA 3.83013 0.471105 0.740525 -0.269420 0.993177 1 ## HLA-B 4.50161 0.475348 0.755807 -0.280459 0.994059 1 ## EIF1 3.24261 0.478352 0.771316 -0.292963 0.994987 1 ## TMSB4X 6.08483 0.408394 0.742840 -0.334446 0.998864 1 ## B2M 5.95481 0.304437 0.714661 -0.410224 0.999950 1 (Careful readers will notice that some genes have negative biological components, which have no obvious interpretation and can be ignored in most applications. They are inevitable when fitting a trend to the per-gene variances as approximately half of the genes will lie below the trend.) 8.2.2 Coefficient of variation An alternative approach to quantification uses the squared coefficient of variation (CV2) of the normalized expression values prior to log-transformation. The CV2 is a widely used metric for describing variation in non-negative data and is closely related to the dispersion parameter of the negative binomial distribution in packages like edgeR and DESeq2. We compute the CV2 for each gene in the PBMC dataset using the modelGeneCV2() function, which provides a robust implementation of the approach described by Brennecke et al. (2013). dec.cv2.pbmc &lt;- modelGeneCV2(sce.pbmc) This allows us to model the mean-variance relationship when considering the relevance of each gene (Figure 8.2). Again, our assumption is that most genes contain random noise and that the trend captures mostly technical variation. Large CV2 values that deviate strongly from the trend are likely to represent genes affected by biological structure. fit.cv2.pbmc &lt;- metadata(dec.cv2.pbmc) plot(fit.cv2.pbmc$mean, fit.cv2.pbmc$cv2, log=&quot;xy&quot;) curve(fit.cv2.pbmc$trend(x), col=&quot;dodgerblue&quot;, add=TRUE, lwd=2) Figure 8.2: CV2 in the PBMC data set as a function of the mean. Each point represents a gene while the blue line represents the fitted trend. For each gene, we quantify the deviation from the trend in terms of the ratio of its CV2 to the fitted value of trend at its abundance. This is more appropriate than the directly subtracting the trend from the CV2, as the magnitude of the ratio is not affected by the mean. dec.cv2.pbmc[order(dec.cv2.pbmc$ratio, decreasing=TRUE),] ## DataFrame with 33694 rows and 6 columns ## mean total trend ratio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## HIST1H2AC 0.9045169 267.718 1.55979 171.6372 0 0 ## GNG11 0.6905688 219.323 1.98064 110.7334 0 0 ## PRTFDC1 0.0412511 3034.952 29.98682 101.2096 0 0 ## TNNC2 0.1021577 1210.585 12.22872 98.9952 0 0 ## PF4 1.1083758 128.809 1.30995 98.3316 0 0 ## ... ... ... ... ... ... ... ## AC023491.2 0 NaN Inf NaN NaN NaN ## AC233755.2 0 NaN Inf NaN NaN NaN ## AC233755.1 0 NaN Inf NaN NaN NaN ## AC213203.1 0 NaN Inf NaN NaN NaN ## FAM231B 0 NaN Inf NaN NaN NaN Both the CV2 and the variance of log-counts are effective metrics for quantifying variation in gene expression. The CV2 tends to give higher rank to low-abundance HVGs driven by upregulation in rare subpopulations, for which the increase in variance on the raw scale is stronger than that on the log-scale. However, the variation described by the CV2 is less directly relevant to downstream procedures operating on the log-counts, and the reliance on the ratio can assign high rank to uninteresting genes with low absolute variance. We generally prefer the use of the variance of log-counts and will use it in the following sections, though the many of the same principles apply to procedures based on the CV2. 8.2.3 Quantifying technical noise Strictly speaking, the use of a trend fitted to endogenous genes assumes that the expression profiles of most genes are dominated by random technical noise. In practice, all expressed genes will exhibit some non-zero level of biological variability due to events like transcriptional bursting. This suggests that our estimates of the technical component are likely to be inflated. It would be more appropriate to consider these estimates as technical noise plus “uninteresting” biological variation, under the assumption that most genes are unaffected by the relevant heterogeneity in the population. This revised assumption is generally reasonable but may be problematic in some scenarios where many genes at a particular abundance are affected by a biological process. For example, strong upregulation of cell type-specific genes may result in an enrichment of HVGs at high abundances. This would inflate the fitted trend in that abundance interval and compromise the detection of the relevant genes. We can avoid this problem by fitting a mean-dependent trend to the variance of the spike-in transcripts (Figure 8.3), if they are available. The premise here is that spike-ins should not be affected by biological variation, so the fitted value of the spike-in trend should represent a better estimate of the technical component for each gene. dec.spike.416b &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;) dec.spike.416b[order(dec.spike.416b$bio, decreasing=TRUE),] ## DataFrame with 46604 rows and 6 columns ## mean total tech bio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Lyz2 6.61097 13.8497 1.57131 12.2784 1.48993e-186 1.54156e-183 ## Ccl9 6.67846 13.1869 1.50035 11.6866 2.21856e-185 2.19979e-182 ## Top2a 5.81024 14.1787 2.54776 11.6310 3.80016e-65 1.13040e-62 ## Cd200r3 4.83180 15.5613 4.22984 11.3314 9.46221e-24 6.08574e-22 ## Ccnb2 5.97776 13.1393 2.30177 10.8375 3.68706e-69 1.20193e-66 ## ... ... ... ... ... ... ... ## Rpl5-ps2 3.60625 0.612623 6.32853 -5.71590 0.999616 0.999726 ## Gm11942 3.38768 0.798570 6.51473 -5.71616 0.999459 0.999726 ## Gm12816 2.91276 0.838670 6.57364 -5.73497 0.999422 0.999726 ## Gm13623 2.72844 0.708071 6.45448 -5.74641 0.999544 0.999726 ## Rps12l1 3.15420 0.746615 6.59332 -5.84670 0.999522 0.999726 plot(dec.spike.416b$mean, dec.spike.416b$total, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) fit.spike.416b &lt;- metadata(dec.spike.416b) points(fit.spike.416b$mean, fit.spike.416b$var, col=&quot;red&quot;, pch=16) curve(fit.spike.416b$trend(x), col=&quot;dodgerblue&quot;, add=TRUE, lwd=2) Figure 8.3: Variance in the 416B data set as a function of the mean. Each point represents a gene (black) or spike-in transcript (red) and the blue line represents the trend fitted to all spike-ins. In the absence of spike-in data, one can attempt to create a trend by making some distributional assumptions about the noise. For example, UMI counts typically exhibit near-Poisson variation if we only consider technical noise from library preparation and sequencing. This can be used to construct a mean-variance trend in the log-counts (Figure 8.4) with the modelGeneVarByPoisson() function. Note the increased residuals of the high-abundance genes, which can be interpreted as the amount of biological variation that was assumed to be “uninteresting” when fitting the gene-based trend in Figure 8.1. set.seed(0010101) dec.pois.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) dec.pois.pbmc &lt;- dec.pois.pbmc[order(dec.pois.pbmc$bio, decreasing=TRUE),] head(dec.pois.pbmc) ## DataFrame with 6 rows and 6 columns ## mean total tech bio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## LYZ 1.97770 5.11595 0.621547 4.49440 0 0 ## S100A9 1.94951 4.58859 0.627306 3.96128 0 0 ## S100A8 1.71828 4.45723 0.669428 3.78781 0 0 ## HLA-DRA 2.09694 3.72690 0.596372 3.13053 0 0 ## CD74 2.89840 3.30912 0.422624 2.88650 0 0 ## CST3 1.49285 2.97369 0.695367 2.27833 0 0 plot(dec.pois.pbmc$mean, dec.pois.pbmc$total, pch=16, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curve(metadata(dec.pois.pbmc)$trend(x), col=&quot;dodgerblue&quot;, add=TRUE) Figure 8.4: Variance of normalized log-expression values for each gene in the PBMC dataset, plotted against the mean log-expression. The blue line represents represents the mean-variance relationship corresponding to Poisson noise. Interestingly, trends based purely on technical noise tend to yield large biological components for highly-expressed genes. This often includes so-called “house-keeping” genes coding for essential cellular components such as ribosomal proteins, which are considered uninteresting for characterizing cellular heterogeneity. These observations suggest that a more accurate noise model does not necessarily yield a better ranking of HVGs, though one should keep an open mind - house-keeping genes are regularly DE in a variety of conditions (Glare et al. 2002; Nazari, Parham, and Maleki 2015; Guimaraes and Zavolan 2016), and the fact that they have large biological components indicates that there is strong variation across cells that may not be completely irrelevant. 8.2.4 Accounting for blocking factors 8.2.4.1 Fitting block-specific trends Data containing multiple batches will often exhibit batch effects (see Chapter 26.8 for more details). We are usually not interested in HVGs that are driven by batch effects. Rather, we want to focus on genes that are highly variable within each batch. This is naturally achieved by performing trend fitting and variance decomposition separately for each batch. We demonstrate this approach by treating each plate (block) in the 416B dataset as a different batch, using the modelGeneVarWithSpikes() function. (The same argument is available in all other variance-modelling functions.) dec.block.416b &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;, block=sce.416b$block) head(dec.block.416b[order(dec.block.416b$bio, decreasing=TRUE),1:6]) ## DataFrame with 6 rows and 6 columns ## mean total tech bio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Lyz2 6.61235 13.8619 1.58416 12.2777 0.00000e+00 0.00000e+00 ## Ccl9 6.67841 13.2599 1.44553 11.8143 0.00000e+00 0.00000e+00 ## Top2a 5.81275 14.0192 2.74571 11.2734 3.89855e-137 8.43398e-135 ## Cd200r3 4.83305 15.5909 4.31892 11.2719 1.17783e-54 7.00722e-53 ## Ccnb2 5.97999 13.0256 2.46647 10.5591 1.20380e-151 2.98405e-149 ## Hbb-bt 4.91683 14.6539 4.12156 10.5323 2.52639e-49 1.34197e-47 The use of a batch-specific trend fit is useful as it accommodates differences in the mean-variance trends between batches. This is especially important if batches exhibit systematic technical differences, e.g., differences in coverage or in the amount of spike-in RNA added. In this case, there are only minor differences between the trends in Figure 8.5, which indicates that the experiment was tightly replicated across plates. The analysis of each plate yields estimates of the biological and technical components for each gene, which are averaged across plates to take advantage of information from multiple batches. par(mfrow=c(1,2)) blocked.stats &lt;- dec.block.416b$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) points(curfit$mean, curfit$var, col=&quot;red&quot;, pch=16) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 8.5: Variance in the 416B data set as a function of the mean after blocking on the plate of origin. Each plot represents the results for a single plate, each point represents a gene (black) or spike-in transcript (red) and the blue line represents the trend fitted to all spike-ins. As an aside, the wave-like shape observed above is typical of the mean-variance trend for log-expression values. (The same wave is present but much less pronounced for UMI data.) A linear increase in the variance is observed as the mean increases from zero, as larger variances are obviously possible when the counts are not all equal to zero. In contrast, the relative contribution of sampling noise decreases at high abundances, resulting in a downward trend. The peak represents the point at which these two competing effects cancel each other out. 8.2.4.2 Using a design matrix The use of block-specific trends is the recommended approach for experiments with a single blocking factor. However, this is not practical for studies involving a large number of blocking factors and/or covariates. In such cases, we can use the design= argument to specify a design matrix with uninteresting factors of variation. We illustrate again with the 416B data set, blocking on the plate of origin and oncogene induction. (The same argument is available in modelGeneVar() when spike-ins are not available.) design &lt;- model.matrix(~factor(block) + phenotype, colData(sce.416b)) dec.design.416b &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;, design=design) dec.design.416b[order(dec.design.416b$bio, decreasing=TRUE),] ## DataFrame with 46604 rows and 6 columns ## mean total tech bio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Lyz2 6.61097 8.90513 1.50405 7.40107 1.78185e-172 1.28493e-169 ## Ccnb2 5.97776 9.54373 2.24180 7.30192 7.77223e-77 1.44497e-74 ## Gem 5.90225 9.54358 2.35175 7.19183 5.49586e-68 8.12330e-66 ## Cenpa 5.81349 8.65622 2.48792 6.16830 2.08034e-45 1.52796e-43 ## Idh1 5.99343 8.32113 2.21965 6.10148 2.42819e-55 2.41772e-53 ## ... ... ... ... ... ... ... ## Gm5054 2.90434 0.463698 6.77000 -6.30630 1 1 ## Gm12191 3.55920 0.170709 6.53285 -6.36214 1 1 ## Gm7429 3.45394 0.248351 6.63458 -6.38623 1 1 ## Gm16378 2.83987 0.208215 6.74663 -6.53841 1 1 ## Rps2-ps2 3.11324 0.202307 6.78484 -6.58253 1 1 This strategy is simple but somewhat inaccurate as it does not consider the mean expression in each blocking level. Recall that the technical component is estimated as the fitted value of the trend at the average abundance for each gene. However, the true technical component is the average of the fitted values at the per-block means, which may be quite different for strong batch effects and non-linear mean-variance relationships. The block= approach is safer and should be preferred in all situations where it is applicable. 8.3 Selecting highly variable genes 8.3.1 Overview Once we have quantified the per-gene variation, the next step is to select the subset of HVGs to use in downstream analyses. A larger subset will reduce the risk of discarding interesting biological signal by retaining more potentially relevant genes, at the cost of increasing noise from irrelevant genes that might obscure said signal. It is difficult to determine the optimal trade-off for any given application as noise in one context may be useful signal in another. For example, heterogeneity in T cell activation responses is an interesting phenomena (Richard et al. 2018) but may be irrelevant noise in studies that only care about distinguishing the major immunophenotypes. That said, there are several common strategies that are routinely used to guide HVG selection, which we shall discuss here. 8.3.2 Based on the largest metrics The simplest HVG selection strategy is to take the top \\(X\\) genes with the largest values for the relevant variance metric. The main advantage of this approach is that the user can directly control the number of genes retained, which ensures that the computational complexity of downstream calculations is easily predicted. For modelGeneVar() and modelGeneVarWithSpikes(), we would select the genes with the largest biological components: # Taking the top 1000 genes here: hvg.pbmc.var &lt;- getTopHVGs(dec.pbmc, n=1000) str(hvg.pbmc.var) ## chr [1:1000] &quot;LYZ&quot; &quot;S100A9&quot; &quot;S100A8&quot; &quot;HLA-DRA&quot; &quot;CD74&quot; &quot;CST3&quot; &quot;TYROBP&quot; &quot;IGKC&quot; &quot;CCL5&quot; &quot;S100A4&quot; ... For modelGeneCV2() (and its relative, modelGeneCV2WithSpikes()), this would instead be the genes with the largest ratios: hvg.pbmc.cv2 &lt;- getTopHVGs(dec.cv2.pbmc, var.field=&quot;ratio&quot;, n=1000) str(hvg.pbmc.cv2) ## chr [1:1000] &quot;HIST1H2AC&quot; &quot;GNG11&quot; &quot;PRTFDC1&quot; &quot;TNNC2&quot; &quot;PF4&quot; &quot;HGD&quot; &quot;PPBP&quot; &quot;AATK&quot; &quot;RP11-885N19.6&quot; ... The choice of \\(X\\) also has a fairly straightforward biological interpretation. Recall our trend-fitting assumption that most genes do not exhibit biological heterogeneity; this implies that they are not differentially expressed between cell types or states in our population. If we quantify this assumption into a statement that, e.g., no more than 5% of genes are differentially expressed, we can naturally set \\(X\\) to 5% of the number of genes. In practice, we usually do not know the proportion of DE genes beforehand so this interpretation just exchanges one unknown for another. Nonetheless, it is still useful as it implies that we should lower \\(X\\) for less heterogeneous datasets, retaining most of the biological signal without unnecessary noise from irrelevant genes. Conversely, more heterogeneous datasets should use larger values of \\(X\\) to preserve secondary factors of variation beyond those driving the most obvious HVGs. The main disadvantage of this approach that it turns HVG selection into a competition between genes, whereby a subset of very highly variable genes can push other informative genes out of the top set. This can be problematic for analyses of highly heterogeneous populations if the loss of important markers prevents the resolution of certain subpopulations. In the most extreme example, consider a situation where a single subpopulation is very different from the others. In such cases, the top set will be dominated by differentially expressed genes involving that distinct subpopulation, compromising resolution of heterogeneity between the other populations. (This can salvaged with a nested analysis, as discussed in Section 10.7, but we would prefer to avoid the problem in the first place.) Another possible concern with this approach is the fact that the choice of \\(X\\) is fairly arbitrary, with any value from 500 to 5000 considered “reasonable”. We have chosen \\(X=1000\\) in the code above though there is no particular a priori reason for doing so. Our recommendation is to simply pick an arbitrary \\(X\\) and proceed with the rest of the analysis, with the intention of testing other choices later, rather than spending much time worrying about obtaining the “optimal” value. 8.3.3 Based on significance Another approach to feature selection is to set a fixed threshold of one of the metrics. This is most commonly done with the (adjusted) \\(p\\)-value reported by each of the above methods. The \\(p\\)-value for each gene is generated by testing against the null hypothesis that the variance is equal to the trend. For example, we might define our HVGs as all genes that have adjusted \\(p\\)-values below 0.05. hvg.pbmc.var.2 &lt;- getTopHVGs(dec.pbmc, fdr.threshold=0.05) length(hvg.pbmc.var.2) ## [1] 651 This approach is simple to implement and - if the test holds its size - it controls the false discovery rate (FDR). That is, it returns a subset of genes where the proportion of false positives is expected to be below the specified threshold. This can occasionally be useful in applications where the HVGs themselves are of interest. For example, if we were to use the list of HVGs in further experiments to verify the existence of heterogeneous expression for some of the genes, we would want to control the FDR in that list. The downside of this approach is that it is less predictable than the top \\(X\\) strategy. The number of genes returned depends on the type II error rate of the test and the severity of the multiple testing correction. One might obtain no genes or every gene at a given FDR threshold, depending on the circumstances. Moreover, control of the FDR is usually not helpful at this stage of the analysis. We are not interpreting the individual HVGs themselves but are only using them for feature selection prior to downstream steps. There is no reason to think that a 5% threshold on the FDR yields a more suitable compromise between bias and noise compared to the top \\(X\\) selection. As an aside, we might consider ranking genes by the \\(p\\)-value instead of the biological component for use in a top \\(X\\) approach. This results in some counterintuitive behavior due to the nature of the underlying hypothesis test, which is based on the ratio of the total variance to the expected technical variance. Ranking based on \\(p\\)-value tends to prioritize HVGs that are more likely to be true positives but, at the same time, less likely to be biologically interesting. Many of the largest ratios are observed in high-abundance genes and are driven by very low technical variance; the total variance is typically modest for such genes, and they do not contribute much to population heterogeneity in absolute terms. (Note that the same can be said of the ratio of CV2 values, as briefly discussed above.) 8.3.4 Keeping all genes above the trend Here, the aim is to only remove the obviously uninteresting genes with variances below the trend. By doing so, we avoid the need to make any judgement calls regarding what level of variation is interesting enough to retain. This approach represents one extreme of the bias-variance trade-off where bias is minimized at the cost of maximizing noise. For modelGeneVar(), it equates to keeping all positive biological components: hvg.pbmc.var.3 &lt;- getTopHVGs(dec.pbmc, var.threshold=0) length(hvg.pbmc.var.3) ## [1] 12791 For modelGeneCV2(), this involves keeping all ratios above 1: hvg.pbmc.cv2.3 &lt;- getTopHVGs(dec.cv2.pbmc, var.field=&quot;ratio&quot;, var.threshold=1) length(hvg.pbmc.cv2.3) ## [1] 9295 By retaining all potential biological signal, we give secondary population structure the chance to manifest. This is most useful for rare subpopulations where the relevant markers will not exhibit strong overdispersion owing to the small number of affected cells. It will also preserve a weak but consistent effect across many genes with small biological components; admittedly, though, this is not of major interest in most scRNA-seq studies given the difficulty of experimentally validating population structure in the absence of strong marker genes. The obvious cost is that more noise is also captured, which can reduce the resolution of otherwise well-separated populations and mask the secondary signal that we were trying to preserve. The use of more genes also introduces more computational work in each downstream step. This strategy is thus best suited to very heterogeneous populations containing many different cell types (possibly across many datasets that are to be merged, as in Chapter 13) where there is a justified fear of ignoring marker genes for low-abundance subpopulations under a competitive top \\(X\\) approach. 8.4 Selecting a priori genes of interest A blunt yet effective feature selection strategy is to use pre-defined sets of interesting genes. The aim is to focus on specific aspects of biological heterogeneity that may be masked by other factors when using unsupervised methods for HVG selection. One example application lies in the dissection of transcriptional changes during the earliest stages of cell fate commitment (Messmer et al. 2019), which may be modest relative to activity in other pathways (e.g., cell cycle, metabolism). Indeed, if our aim is to show that there is no meaningful heterogeneity in a given pathway, we would - at the very least - be obliged to repeat our analysis using only the genes in that pathway to maximize power for detecting such heterogeneity. Using scRNA-seq data in this manner is conceptually equivalent to a fluorescence activated cell sorting (FACS) experiment, with the convenience of being able to (re)define the features of interest at any time. For example, in the PBMC dataset, we might use some of the C7 immunologic signatures from MSigDB (Godec et al. 2016) to improve resolution of the various T cell subtypes. We stress that there is no shame in leveraging prior biological knowledge to address specific hypotheses in this manner. We say this because a common refrain in genomics is that the data analysis should be “unbiased”, i.e., free from any biological preconceptions. Attempting to derive biological insight ab initio is admirable but such “biases” are already present at every stage, starting from experimental design (why are we interested in this cell population in the first place?) and continuing through to interpretation of marker genes (Section 11). library(msigdbr) c7.sets &lt;- msigdbr(species = &quot;Homo sapiens&quot;, category = &quot;C7&quot;) head(unique(c7.sets$gs_name)) ## [1] &quot;GOLDRATH_EFF_VS_MEMORY_CD8_TCELL_DN&quot; &quot;GOLDRATH_EFF_VS_MEMORY_CD8_TCELL_UP&quot; ## [3] &quot;GOLDRATH_NAIVE_VS_EFF_CD8_TCELL_DN&quot; &quot;GOLDRATH_NAIVE_VS_EFF_CD8_TCELL_UP&quot; ## [5] &quot;GOLDRATH_NAIVE_VS_MEMORY_CD8_TCELL_DN&quot; &quot;GOLDRATH_NAIVE_VS_MEMORY_CD8_TCELL_UP&quot; # Using the Goldrath sets to distinguish CD8 subtypes cd8.sets &lt;- c7.sets[grep(&quot;GOLDRATH&quot;, c7.sets$gs_name),] cd8.genes &lt;- rowData(sce.pbmc)$Symbol %in% cd8.sets$human_gene_symbol summary(cd8.genes) ## Mode FALSE TRUE ## logical 32866 828 # Using GSE11924 to distinguish between T helper subtypes th.sets &lt;- c7.sets[grep(&quot;GSE11924&quot;, c7.sets$gs_name),] th.genes &lt;- rowData(sce.pbmc)$Symbol %in% th.sets$human_gene_symbol summary(th.genes) ## Mode FALSE TRUE ## logical 31781 1913 # Using GSE11961 to distinguish between B cell subtypes b.sets &lt;- c7.sets[grep(&quot;GSE11961&quot;, c7.sets$gs_name),] b.genes &lt;- rowData(sce.pbmc)$Symbol %in% b.sets$human_gene_symbol summary(b.genes) ## Mode FALSE TRUE ## logical 28158 5536 Of course, the downside of focusing on pre-defined genes is that it will limit our capacity to detect novel or unexpected aspects of variation. Thus, this kind of focused analysis should be complementary to (rather than a replacement for) the unsupervised feature selection strategies discussed previously. Alternatively, we can also invert this reasoning to remove genes that are unlikely to be of interest prior to downstream analyses, thus avoiding unwanted variation that interferes with downstream interpretation. Common candidates for removal include ribosomal protein genes or mitochondrial genes; for immune cell subsets, we might also be inclined to remove immunoglobulin genes and T cell receptor genes, where clonal expression introduces (possibly irrelevant) population structure. # Identifying ribosomal proteins: ribo.discard &lt;- grepl(&quot;^RP[SL]\\\\d+&quot;, rownames(sce.pbmc)) sum(ribo.discard) ## [1] 99 # A more curated approach for identifying ribosomal protein genes: c2.sets &lt;- msigdbr(species = &quot;Homo sapiens&quot;, category = &quot;C2&quot;) ribo.set &lt;- c2.sets[c2.sets$gs_name==&quot;KEGG_RIBOSOME&quot;,]$human_gene_symbol ribo.discard &lt;- rownames(sce.pbmc) %in% ribo.set sum(ribo.discard) ## [1] 86 library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] anno &lt;- select(edb, keys=rowData(sce.pbmc)$ID, keytype=&quot;GENEID&quot;, columns=&quot;TXBIOTYPE&quot;) # Removing immunoglobulin variable chains: igv.set &lt;- anno$GENEID[anno$TXBIOTYPE %in% c(&quot;IG_V_gene&quot;, &quot;IG_V_pseudogene&quot;)] igv.discard &lt;- rowData(sce.pbmc)$ID %in% igv.set sum(igv.discard) ## [1] 326 # Removing TCR variable chains: tcr.set &lt;- anno$GENEID[anno$TXBIOTYPE %in% c(&quot;TR_V_gene&quot;, &quot;TR_V_pseudogene&quot;)] tcr.discard &lt;- rowData(sce.pbmc)$ID %in% tcr.set sum(tcr.discard) ## [1] 138 In practice, we tend to err on the side of caution and abstain from preemptive filtering on biological function until these genes are demonstrably problematic in downstream analyses. 8.5 Putting it all together The few lines of code below will select the top 10% of genes with the highest biological components. dec.pbmc &lt;- modelGeneVar(sce.pbmc) chosen &lt;- getTopHVGs(dec.pbmc, prop=0.1) str(chosen) ## chr [1:1279] &quot;LYZ&quot; &quot;S100A9&quot; &quot;S100A8&quot; &quot;HLA-DRA&quot; &quot;CD74&quot; &quot;CST3&quot; &quot;TYROBP&quot; &quot;IGKC&quot; &quot;CCL5&quot; &quot;S100A4&quot; ... We then have several options to enforce our HVG selection on the rest of the analysis. We can subset the SingleCellExperiment to only retain our selection of HVGs. This ensures that downstream methods will only use these genes for their calculations. The downside is that the non-HVGs are discarded from the new SingleCellExperiment, making it slightly more inconvenient to interrogate the full dataset for interesting genes that are not HVGs. sce.pbmc.hvg &lt;- sce.pbmc[chosen,] dim(sce.pbmc.hvg) ## [1] 1279 3922 We can keep the original SingleCellExperiment object and specify the genes to use for downstream functions via an extra argument like subset.row=. This is useful if the analysis uses multiple sets of HVGs at different steps, whereby one set of HVGs can be easily swapped for another in specific steps. However, it can be inconvenient to repeatedly specify the same HVG set across steps. # Performing PCA only on the chosen HVGs. library(scater) sce.pbmc &lt;- runPCA(sce.pbmc, subset_row=chosen) reducedDimNames(sce.pbmc) ## [1] &quot;PCA&quot; We can have our cake and eat it too by (ab)using the “alternative Experiment” system in the SingleCellExperiment class. Initially designed for storing alternative features like spike-ins or antibody tags, we can instead use it to hold our full dataset while we perform our downstream operations conveniently on the HVG subset. This avoids book-keeping problems in long analyses when the original dataset is not synchronized with the HVG subsetted data. # Recycling the class above. altExp(sce.pbmc.hvg, &quot;original&quot;) &lt;- sce.pbmc altExpNames(sce.pbmc.hvg) ## [1] &quot;original&quot; # No need for explicit subset_row= specification in downstream operations. sce.pbmc.hvg &lt;- runPCA(sce.pbmc.hvg) # Recover original data: sce.pbmc.original &lt;- altExp(sce.pbmc.hvg, &quot;original&quot;, withColData=TRUE) Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] scater_1.15.12 ggplot2_3.2.1 ensembldb_2.11.2 [4] AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 [7] AnnotationHub_2.19.3 BiocFileCache_1.11.4 dbplyr_1.4.2 [10] msigdbr_7.0.1 scran_1.15.14 SingleCellExperiment_1.9.1 [13] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [16] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [19] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [22] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [25] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_1.4-1 XVector_0.27.0 [4] BiocNeighbors_1.5.1 bit64_0.9-7 interactiveDisplayBase_1.25.0 [7] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [10] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [13] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [16] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [19] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [22] BiocSingular_1.3.1 htmltools_0.4.0 prettyunits_1.0.2 [25] tools_4.0.0 rsvd_1.0.2 igraph_1.2.4.2 [28] gtable_0.3.0 glue_1.3.1 GenomeInfoDbData_1.2.2 [31] dplyr_0.8.3 rappdirs_0.3.1 Rcpp_1.0.3 [34] vctrs_0.2.1 Biostrings_2.55.4 rtracklayer_1.47.0 [37] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [40] ps_1.3.0 mime_0.8 lifecycle_0.1.0 [43] irlba_2.3.3 statmod_1.4.32 XML_3.98-1.20 [46] edgeR_3.29.0 zlibbioc_1.33.0 scales_1.1.0 [49] ProtGenerics_1.19.3 hms_0.5.2 promises_1.1.0 [52] yaml_2.2.0 curl_4.3 memoise_1.1.0 [55] gridExtra_2.3 biomaRt_2.43.0 stringi_1.4.3 [58] RSQLite_2.2.0 BiocVersion_3.11.1 highr_0.8 [61] rlang_0.4.2 pkgconfig_2.0.3 bitops_1.0-6 [64] evaluate_0.14 lattice_0.20-38 purrr_0.3.3 [67] GenomicAlignments_1.23.1 bit_1.1-14 processx_3.4.1 [70] tidyselect_0.2.5 magrittr_1.5 bookdown_0.16 [73] R6_2.4.1 DBI_1.1.0 withr_2.1.2 [76] pillar_1.4.3 RCurl_1.95-4.12 tibble_2.1.3 [79] crayon_1.3.4 rmarkdown_2.0 viridis_0.5.1 [82] progress_1.2.2 locfit_1.5-9.1 grid_4.0.0 [85] blob_1.2.0 callr_3.4.0 digest_0.6.23 [88] xtable_1.8-4 httpuv_1.5.2 openssl_1.4.1 [91] munsell_0.5.0 beeswarm_0.2.3 viridisLite_0.3.0 [94] vipor_0.4.5 askpass_1.1 Bibliography "],
["dimensionality-reduction.html", "Chapter 9 Dimensionality reduction 9.1 Overview 9.2 Principal components analysis 9.3 Choosing the number of PCs 9.4 Dimensionality reduction for visualization Session Info", " Chapter 9 Dimensionality reduction .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 9.1 Overview Many scRNA-seq analysis procedures involve comparing cells based on their expression values across multiple genes. For example, clustering aims to identify cells with similar transcriptomic profiles by computing Euclidean distances across genes. In these applications, each individual gene represents a dimension of the data. More intuitively, if we had a scRNA-seq data set with two genes, we could make a two-dimensional plot where each axis represents the expression of one gene and each point in the plot represents a cell. This concept can be extended to data sets with thousands of genes where each cell’s expression profile defines its location in the high-dimensional expression space. As the name suggests, dimensionality reduction aims to reduce the number of separate dimensions in the data. This is possible because different genes are correlated if they are affected by the same biological process. Thus, we do not need to store separate information for individual genes, but can instead compress multiple features into a single dimension, e.g., an “eigengene” (Langfelder and Horvath 2007). This reduces computational work in downstream analyses, as calculations only need to be performed for a few dimensions rather than thousands of genes; reduces noise by averaging across multiple genes to obtain a more precise representation of the patterns in the data; and enables effective plotting of the data, for those of us who are not capable of visualizing more than 3 dimensions. We will use the Zeisel et al. (2015) dataset to demonstrate the applications of various dimensionality reduction methods in this chapter. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.zeisel &lt;- ZeiselBrainData() sce.zeisel &lt;- sce.zeisel[rowData(sce.zeisel)$featureType!=&quot;repeat&quot;,] library(scater) sce.zeisel &lt;- aggregateAcrossFeatures(sce.zeisel, id=sub(&quot;_loc[0-9]+$&quot;, &quot;&quot;, rownames(sce.zeisel))) #--- gene-annotation ---# library(org.Mm.eg.db) ensembl &lt;- mapIds(org.Mm.eg.db, keys=rownames(sce.zeisel), keytype=&quot;SYMBOL&quot;, column=&quot;ENSEMBL&quot;) rowData(sce.zeisel)$ENSEMBL &lt;- ensembl #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.zeisel, subsets=list( Mt=rowData(sce.zeisel)$featureType==&quot;mito&quot;)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;altexps_ERCC_percent&quot;, &quot;subsets_Mt_percent&quot;)) sce.zeisel &lt;- sce.zeisel[,!qc$discard] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.zeisel) sce.zeisel &lt;- computeSumFactors(sce.zeisel, cluster=clusters) sce.zeisel &lt;- logNormCounts(sce.zeisel) #--- variance-modelling ---# dec.zeisel &lt;- modelGeneVarWithSpikes(sce.zeisel, &quot;ERCC&quot;) top.hvgs &lt;- getTopHVGs(dec.zeisel, prop=0.1) sce.zeisel ## class: SingleCellExperiment ## dim: 19839 2816 ## metadata(0): ## assays(2): counts logcounts ## rownames(19839): 0610005C13Rik 0610007N19Rik ... mt-Tw mt-Ty ## rowData names(2): featureType ENSEMBL ## colnames(2816): 1772071015_C02 1772071017_G12 ... 1772063068_D01 1772066098_A12 ## colData names(10): tissue group # ... level1class level2class ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(2): ERCC repeat 9.2 Principal components analysis Principal components analysis (PCA) discovers axes in high-dimensional space that capture the largest amount of variation. This is best understood by imagining each axis as a line. Say we draw a line anywhere, and we move all cells in our data set onto this line by the shortest path. The variance captured by this axis is defined as the variance across cells along that line. In PCA, the first axis (or “principal component”, PC) is chosen such that it captures the greatest variance across cells. The next PC is chosen such that it is orthogonal to the first and captures the greatest remaining amount of variation, and so on. By definition, the top PCs capture the dominant factors of heterogeneity in the data set. Thus, we can perform dimensionality reduction by restricting downstream analyses to the top PCs. This strategy is simple, highly effective and widely used throughout the data sciences. It takes advantage of the well-studied theoretical properties of the PCA - namely, that a low-rank approximation formed from the top PCs is the optimal approximation of the original data for a given matrix rank. It also allows us to use a wide range of fast PCA implementations for scalable and efficient data analysis. When applying PCA to scRNA-seq data, our assumption is that biological processes affect multiple genes in a coordinated manner. This means that the earlier PCs are likely to represent biological structure as more variation can be captured by considering the correlated behaviour of many genes. By comparison, random technical or biological noise is expected to affect each gene independently. There is unlikely to be an axis that can capture random variation across many genes, meaning that noise should mostly be concentrated in the later PCs. This motivates the use of the earlier PCs in our downstream analyses, which concentrates the biological signal to simultaneously reduce computational work and remove noise. We perform the PCA on the log-normalized expression values using the runPCA() function from scater. By default, runPCA() will compute the first 50 PCs and store them in the reducedDims() of the output SingleCellExperiment object, as shown below. Here, we use only the top 2000 genes with the largest biological components to reduce computational work and noise. Specifically, PCA is generally robust to random noise but an excess of it may cause the earlier PCs to capture noise instead of biological structure. This effect can be avoided - or at least mitigated - by restricting the PCA to a subset of HVGs, for which we can use any of the strategies described in Chapter 8. library(scran) top.zeisel &lt;- getTopHVGs(dec.zeisel, n=2000) library(scater) set.seed(100) # See below. sce.zeisel &lt;- runPCA(sce.zeisel, subset_row=top.zeisel) reducedDimNames(sce.zeisel) ## [1] &quot;PCA&quot; dim(reducedDim(sce.zeisel, &quot;PCA&quot;)) ## [1] 2816 50 For large data sets, greater efficiency is obtained by using approximate SVD algorithms that only compute the top PCs. By default, most PCA-related functions in scater and scran will use methods from the irlba or rsvd packages to perform the SVD. We can explicitly specify the SVD algorithm to use by passing an BiocSingularParam object (from the BiocSingular package) to the BSPARAM= argument (see Section 21.2.2 for more details). Many of these approximate algorithms are based on randomization and thus require set.seed() to obtain reproducible results. library(BiocSingular) set.seed(1000) sce.zeisel &lt;- runPCA(sce.zeisel, subset_row=top.zeisel, BSPARAM=RandomParam(), name=&quot;IRLBA&quot;) reducedDimNames(sce.zeisel) ## [1] &quot;PCA&quot; &quot;IRLBA&quot; 9.3 Choosing the number of PCs 9.3.1 Motivation How many of the top PCs should we retain for downstream analyses? The choice of the number of PCs \\(d\\) is a decision that is analogous to the choice of the number of HVGs to use. Using more PCs will avoid discarding biological signal in later PCs, at the cost of retaining more noise. Most practitioners will simply set \\(d\\) to a “reasonable” but arbitrary value, typically ranging from 10 to 50. This is often satisfactory provided it is coupled with sufficient testing of alternative values to explore other perspectives of the data at a different bias-variance trade-off. Nonetheless, we will describe some more data-driven strategies to guide a suitable choice of \\(d\\). 9.3.2 Using the elbow point A simple heuristic for choosing \\(d\\) involves identifying the elbow point in the percentage of variance explained by successive PCs. This refers to the “elbow” in the curve of a scree plot as shown in Figure 9.1. # Percentage of variance explained is tucked away in the attributes. percent.var &lt;- attr(reducedDim(sce.zeisel), &quot;percentVar&quot;) chosen.elbow &lt;- PCAtools::findElbowPoint(percent.var) chosen.elbow ## [1] 7 plot(percent.var, xlab=&quot;PC&quot;, ylab=&quot;Variance explained (%)&quot;) abline(v=chosen.elbow, col=&quot;red&quot;) Figure 9.1: Percentage of variance explained by successive PCs in the Zeisel brain data. The identified elbow point is marked with a red line. Our assumption is that each of the top PCs capturing biological signal should explain much more variance than the remaining PCs. Thus, there should be a sharp drop in the percentage of variance explained when we move past the last “biological” PC. This manifests as an elbow in the scree plot, the location of which serves as a natural choice for \\(d\\). From a practical perspective, the use of the elbow point tends to retain fewer PCs compared to other methods. The definition of “much more variance” is relative so, in order to be retained, later PCs must explain a amount of variance that is comparable to that explained by the first few PCs. Strong biological variation in the early PCs will shift the elbow to the left, potentially excluding weaker (but still interesting) variation in the next PCs immediately following the elbow. 9.3.3 Using the technical noise Another strategy is to retain all PCs until the percentage of total variation explained reaches some threshold \\(T\\). For example, we might retain the top set of PCs that explains 80% of the total variation in the data. Of course, it would be pointless to swap one arbitrary parameter \\(d\\) for another \\(T\\). Instead, we derive a suitable value for \\(T\\) by calculating the proportion of variance in the data that is attributed to the biological component. This is done using the denoisePCA() function with the variance modelling results from modelGeneVarWithSpikes() or related functions, where \\(T\\) is defined as the ratio of the sum of the biological components to the sum of total variances. To illustrate, we use this strategy to pick the number of PCs in the 10X PBMC dataset. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) #--- gene-annotation ---# library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) #--- cell-detection ---# set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) #--- variance-modelling ---# set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop=0.1) library(scran) set.seed(111001001) denoised.pbmc &lt;- denoisePCA(sce.pbmc, technical=dec.pbmc, subset.row=top.pbmc) ncol(reducedDim(denoised.pbmc)) ## [1] 8 The dimensionality of the output represents the lower bound on the number of PCs required to retain all biological variation. This choice of \\(d\\) is motivated by the fact that any fewer PCs will definitely discard some aspect of biological signal. (Of course, the converse is not true; there is no guarantee that the retained PCs capture all of the signal, which is only generally possible if no dimensionality reduction is performed at all.) From a practical perspective, the denoisePCA() approach usually retains more PCs than the elbow point method as the former does not compare PCs to each other and is less likely to discard PCs corresponding to secondary factors of variation. The downside is that many minor aspects of variation may not be interesting (e.g., transcriptional bursting) and their retention would only add irrelevant noise. Thus, whether this is a “better” approach depends on the our willingness to increase noise in order to preserve weaker biological signals. Incidentally, denoisePCA() imposes internal caps on the number of PCs that can be chosen in this manner. By default, the number is bounded within the “reasonable” limits of 5 and 50 to avoid selection of too few PCs (when technical noise is high relative to biological variation) or too many PCs (when technical noise is very low). For example, applying this function to the Zeisel brain data hits the upper limit: set.seed(001001001) denoised.zeisel &lt;- denoisePCA(sce.zeisel, technical=dec.zeisel, subset.row=top.zeisel) ncol(reducedDim(denoised.zeisel)) ## [1] 50 This method also tends to perform best when the mean-variance trend reflects the actual technical noise, i.e., estimated by modelGeneVarByPoisson() or modelGeneVarWithSpikes() instead of modelGeneVar() (Chapter 8). Variance modelling results from modelGeneVar() tend to understate the actual biological variation, especially in highly heterogeneous datasets where secondary factors of variation inflate the fitted values of the trend. Fewer PCs are subsequently retained because \\(T\\) is artificially lowered, as evidenced by denoisePCA() returning the lower limit of 5 PCs for the PBMC dataset: dec.pbmc2 &lt;- modelGeneVar(sce.pbmc) denoised.pbmc2 &lt;- denoisePCA(sce.pbmc, technical=dec.pbmc2, subset.row=top.pbmc) ncol(reducedDim(denoised.pbmc2)) ## [1] 5 9.3.4 Based on population structure Yet another method to choose \\(d\\) uses information about the number of subpopulations in the data. Consider a situation where each subpopulation differs from the others along a different axis in the high-dimensional space (e.g., because it is defined by a unique set of marker genes). This suggests that we should set \\(d\\) to the number of unique subpopulations minus 1, which guarantees separation of all subpopulations while retaining as few dimensions (and noise) as possible. We can use this reasoning to loosely motivate an a priori choice for \\(d\\) - for example, if we expect around 10 different cell types in our population, we would set \\(d \\approx 10\\). In practice, the number of subpopulations is usually not known in advance. Rather, we use a heuristic approach that uses the number of clusters as a proxy for the number of subpopulations. We perform clustering (graph-based by default, see Chapter 10) on the first \\(d^*\\) PCs and only consider the values of \\(d^*\\) that yield no more than \\(d^*+1\\) clusters. If we detect more clusters with fewer dimensions, we consider this to represent overclustering rather than distinct subpopulations, assuming that multiple subpopulations should not be distinguishable on the same axes. We test a range of \\(d^*\\) and set \\(d\\) to the value that maximizes the number of clusters while satisfying the above condition. This attempts to capture as many distinct (putative) subpopulations as possible by retaining biological signal in later PCs, up until the point that the additional noise reduces resolution. pcs &lt;- reducedDim(sce.zeisel) choices &lt;- getClusteredPCs(pcs) metadata(choices)$chosen ## [1] 37 plot(choices$n.pcs, choices$n.clusters, xlab=&quot;Number of PCs&quot;, ylab=&quot;Number of clusters&quot;) abline(a=1, b=1, col=&quot;red&quot;) abline(v=metadata(choices)$chosen, col=&quot;grey80&quot;, lty=2) Figure 9.2: Number of clusters detected in the Zeisel brain dataset as a function of the number of PCs. The red unbroken line represents the theoretical upper constraint on the number of clusters, while the grey dashed line is the number of PCs suggested by getClusteredPCs(). This strategy is the most pragmatic as it directly addresses the role of the bias-variance trade-off in downstream analyses, specifically clustering. There is no need to preserve biological signal beyond what is distinguishable in later steps. However, it involves strong assumptions about the nature of the biological differences between subpopulations - and indeed, discrete subpopulations may not even exist in studies of continuous processes like differentiation. 9.3.5 Putting it together Once we have chosen \\(d\\), applying it is as simple as subsetting the PC matrix by column. We then use the reducedDim()&lt;- command to reassign the subsetted matrix back into the SingleCellExperiment object. For example, if we were to take the top 20 PCs, we would do: reducedDim(sce.zeisel, &quot;PCA&quot;) &lt;- reducedDim(sce.zeisel, &quot;PCA&quot;)[,1:20] ncol(reducedDim(sce.zeisel, &quot;PCA&quot;)) ## [1] 20 Downstream applications that use the &quot;PCA&quot; dimensionality reduction results in sce.zeisel will subsequently operate on the first 20 PCs only. Alternatively, some users may prefer to keep the full set of PCs, in which case the top set can be assigned to another name: reducedDim(sce.zeisel, &quot;PCA_20&quot;) &lt;- reducedDim(sce.zeisel, &quot;PCA&quot;)[,1:20] reducedDimNames(sce.zeisel) ## [1] &quot;PCA&quot; &quot;IRLBA&quot; &quot;PCA_20&quot; Note that this is not necessary if the desired number of PCs is directly specified in the initial call to runPCA(). Similarly, denoisePCA() will return its chosen number of PCs without requiring further user intervention. 9.4 Dimensionality reduction for visualization 9.4.1 Motivation Another application of dimensionality reduction is to compress the data into 2 (sometimes 3) dimensions for plotting. This serves a separate purpose to the PCA-based dimensionality reduction described above. Algorithms are more than happy to operate on 10-50 PCs, but these are still too many dimensions for human comprehension. Further dimensionality reduction strategies are required to pack the most salient features of the data into 2 or 3 dimensions, which we will discuss below. 9.4.2 Visualizating with PCA The simplest visualization approach is to plot the top 2 PCs (Figure 9.3): plotReducedDim(sce.zeisel, dimred=&quot;PCA&quot;, colour_by=&quot;level1class&quot;) Figure 9.3: PCA plot of the first two PCs in the Zeisel brain data. Each point is a cell, coloured according to the annotation provided by the original authors. The problem is that PCA is a linear technique, i.e., only variation along a line in high-dimensional space is captured by each PC. As such, it cannot efficiently pack differences in \\(d\\) dimensions into the first 2 PCs. This is demonstrated in Figure 9.3 where the top two PCs fail to resolve some subpopulations identified by Zeisel et al. (2015). If the first PC is devoted to resolving the biggest difference between subpopulations, and the second PC is devoted to resolving the next biggest difference, then the remaining differences will not be visible in the plot. One workaround is to plot several of the top PCs against each other in pairwise plots (Figure 9.4). However, it is difficult to interpret multiple plots simultaneously, and even this approach is not sufficient to separate some of the annotated subpopulations. plotReducedDim(sce.zeisel, dimred=&quot;PCA&quot;, ncomponents=4, colour_by=&quot;level1class&quot;) Figure 9.4: PCA plot of the first two PCs in the Zeisel brain data. Each point is a cell, coloured according to the annotation provided by the original authors. There are some advantages to the PCA for visualization. It is predictable and will not introduce artificial structure in the visualization. It is also deterministic and robust to small changes in the input values. However, as shown above, PCA is usually not satisfactory for visualization of complex populations. 9.4.3 \\(t\\)-stochastic neighbor embedding The de facto standard for visualization of scRNA-seq data is the \\(t\\)-stochastic neighbour embedding (\\(t\\)-SNE) method (Van der Maaten and Hinton 2008). This attempts to find a low-dimensional representation of the data that preserves the distances between each point and its neighbours in the high-dimensional space. Unlike PCA, it is not restricted to linear transformations, nor is it obliged to accurately represent distances between distance populations. This means that it has much more freedom in how it arranges cells in low-dimensional space, enabling it to separate many distinct clusters in a complex population (Figure 9.5). set.seed(00101001101) # runTSNE() stores the t-SNE coordinates in the reducedDims # for re-use across multiple plotReducedDim() calls. sce.zeisel &lt;- runTSNE(sce.zeisel, dimred=&quot;PCA&quot;) plotReducedDim(sce.zeisel, dimred=&quot;TSNE&quot;, colour_by=&quot;level1class&quot;) Figure 9.5: \\(t\\)-SNE plots constructed from the top PCs in the Zeisel brain dataset. Each point represents a cell, coloured according to the published annotation. One of the main disadvantages of \\(t\\)-SNE is that it is much more computationally intensive than other visualization methods. We mitigate this effect by setting dimred=&quot;PCA&quot; in runtTSNE(), which instructs the function to perform the \\(t\\)-SNE calculations on the top PCs to exploit the data compaction and noise removal provided by the PCA. It is possible to run \\(t\\)-SNE on the original expression matrix but this is less efficient. Another issue with \\(t\\)-SNE is that it requires the user to be aware of additional parameters (discussed here in some depth). It involves a random initialization so we need to (i) repeat the visualization several times to ensure that the results are representative and (ii) set the seed to ensure that the chosen results are reproducible. The “perplexity” is another important parameter that determines the granularity of the visualization (Figure 9.6). Low perplexities will favour resolution of finer structure, possibly to the point that the visualization is compromised by random noise. Thus, it is advisable to test different perplexity values to ensure that the choice of perplexity does not drive the interpretation of the plot. set.seed(100) sce.zeisel &lt;- runTSNE(sce.zeisel, dimred=&quot;PCA&quot;, perplexity=5) out5 &lt;- plotReducedDim(sce.zeisel, dimred=&quot;TSNE&quot;, colour_by=&quot;level1class&quot;) + ggtitle(&quot;perplexity = 5&quot;) set.seed(100) sce.zeisel &lt;- runTSNE(sce.zeisel, dimred=&quot;PCA&quot;, perplexity=20) out20 &lt;- plotReducedDim(sce.zeisel, dimred=&quot;TSNE&quot;, colour_by=&quot;level1class&quot;) + ggtitle(&quot;perplexity = 20&quot;) set.seed(100) sce.zeisel &lt;- runTSNE(sce.zeisel, dimred=&quot;PCA&quot;, perplexity=80) out80 &lt;- plotReducedDim(sce.zeisel, dimred=&quot;TSNE&quot;, colour_by=&quot;level1class&quot;) + ggtitle(&quot;perplexity = 80&quot;) multiplot(out5, out20, out80, cols=3) Figure 9.6: \\(t\\)-SNE plots constructed from the top PCs in the Zeisel brain dataset, using a range of perplexity values. Each point represents a cell, coloured according to its annotation. Finally, it is tempting to interpret the \\(t\\)-SNE results as a “map” of single-cell identities. This is generally unwise as any such interpretation is easily misled by the size and positions of the visual clusters. Specifically, \\(t\\)-SNE will inflate dense clusters and compress sparse ones, such that we cannot use the size as a measure of subpopulation heterogeneity. Similarly, \\(t\\)-SNE is not obliged to preserve the relative locations of non-neighboring clusters, such that we cannot use their positions to determine relationships between distant clusters. We provide some suggestions on how to interpret these plots in Section 9.4.5. Despite its shortcomings, \\(t\\)-SNE is proven tool for general-purpose visualization of scRNA-seq data and remains a popular choice in many analysis pipelines. 9.4.4 Uniform manifold approximation and projection The uniform manifold approximation and projection (UMAP) method (McInnes, Healy, and Melville 2018) is an alternative to \\(t\\)-SNE for non-linear dimensionality reduction. It is roughly similar to \\(t\\)-SNE in that it also tries to find a low-dimensional representation that preserves relationships between neighbors in high-dimensional space. However, the two methods are based on different theory, represented by differences in the various graph weighting equations. This manifests as a different visualization as shown in Figure 9.7. set.seed(1100101001) sce.zeisel &lt;- runUMAP(sce.zeisel, dimred=&quot;PCA&quot;) plotReducedDim(sce.zeisel, dimred=&quot;UMAP&quot;, colour_by=&quot;level1class&quot;) Figure 9.7: UMAP plots constructed from the top PCs in the Zeisel brain dataset. Each point represents a cell, coloured according to the published annotation. Compared to \\(t\\)-SNE, the UMAP visualization tends to have more compact visual clusters with more empty space between them. It also attempts to preserve more of the global structure than \\(t\\)-SNE. From a practical perspective, UMAP is much faster than \\(t\\)-SNE, which may be an important consideration for large datasets. (Nonetheless, we have still run UMAP on the top PCs here for consistency.) UMAP also involves a series of randomization steps so setting the seed is critical. Like \\(t\\)-SNE, UMAP has its own suite of hyperparameters that affect the visualization. Of these, the number of neighbours (n_neighbors) and the minimum distance between embedded points (min_dist) have the greatest effect on the granularity of the output. If these values are too low, random noise will be incorrectly treated as high-resolution structure, while values that are too high will discard fine structure altogether in favour of obtaining an accurate overview of the entire dataset. Again, it is a good idea to test a range of values for these parameters to ensure that they do not compromise any conclusions drawn from a UMAP plot. It is arguable whether the UMAP or \\(t\\)-SNE visualizations are more useful or aesthetically pleasing. UMAP aims to preserve more global structure but this necessarily reduces resolution within each visual cluster. However, UMAP is unarguably much faster, and for that reason alone, it is increasingly displacing \\(t\\)-SNE as the method of choice for visualizing large scRNA-seq data sets. 9.4.5 Interpreting the plots Dimensionality reduction for visualization necessarily involves discarding information and distorting the distances between cells in order to fit high-dimensional data into a 2-dimensional space. One might wonder whether the results of such extreme data compression can be trusted. Some of our more quantitative colleagues consider such visualizations to be more artistic than scientific, fit for little but impressing collaborators and reviewers. Perhaps this perspective is not entirely invalid, but we suggest that there is some value to be extracted from them provided that they are accompanied by an analysis of a higher-rank representation. To illustrate, consider the interaction between clustering and \\(t\\)-SNE. As a general rule, we would not perform clustering on the \\(t\\)-SNE coordinates. Rather, we would cluster on the first 10-50 PCs (Chapter (clustering)) and then visualize the cluster identities on the \\(t\\)-SNE plot. This ensures that clustering makes use of the information that was lost during compression into two dimensions. The \\(t\\)-SNE plot can then be used for a diagnostic inspection of the clustering output. In particular, the plot is most useful for checking whether two clusters are actually neighboring subclusters or whether a cluster can be split into further subclusters, which are generally safe interpretations of \\(t\\)-SNE coordinates. It is worth elaborating on why we should not perform downstream analyses directly on the \\(t\\)-SNE or UMAP coordinates. Let us put aside the fact that operating on the high-dimensional representations preserves more information; from a naive perspective, using the \\(t\\)-SNE coordinates is very tempting as it ensures that any results are immediately consistent with the visualizations (regardless of whether they are right). However, this can actually be considered a disservice as it masks the uncertainty of the results, leading us to place more confidence in them than is warranted. Rather than being errors, major discrepancies can instead be useful for motivating further investigation into the more ambiguous parts of the dataset; conversely, the lack of discrepancies increases trust in the results. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] BiocSingular_1.3.1 scater_1.15.12 ggplot2_3.2.1 [4] scran_1.15.14 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [7] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [10] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [13] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [16] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 tools_4.0.0 R6_2.4.1 [4] irlba_2.3.3 vipor_0.4.5 uwot_0.1.5 [7] lazyeval_0.2.2 colorspace_1.4-1 withr_2.1.2 [10] tidyselect_0.2.5 gridExtra_2.3 processx_3.4.1 [13] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [16] bookdown_0.16 scales_1.1.0 callr_3.4.0 [19] stringr_1.4.0 digest_0.6.23 rmarkdown_2.0 [22] XVector_0.27.0 pkgconfig_2.0.3 htmltools_0.4.0 [25] limma_3.43.0 highr_0.8 rlang_0.4.2 [28] FNN_1.1.3 DelayedMatrixStats_1.9.0 farver_2.0.1 [31] dplyr_0.8.3 RCurl_1.95-4.12 magrittr_1.5 [34] GenomeInfoDbData_1.2.2 Matrix_1.2-18 Rcpp_1.0.3 [37] ggbeeswarm_0.6.0 munsell_0.5.0 viridis_0.5.1 [40] PCAtools_1.3.0 lifecycle_0.1.0 stringi_1.4.3 [43] yaml_2.2.0 edgeR_3.29.0 zlibbioc_1.33.0 [46] Rtsne_0.15 plyr_1.8.5 grid_4.0.0 [49] ggrepel_0.8.1 dqrng_0.2.1 crayon_1.3.4 [52] lattice_0.20-38 cowplot_1.0.0 locfit_1.5-9.1 [55] knitr_1.26 ps_1.3.0 pillar_1.4.3 [58] igraph_1.2.4.2 reshape2_1.4.3 glue_1.3.1 [61] evaluate_0.14 BiocManager_1.30.10 RcppParallel_4.4.4 [64] gtable_0.3.0 purrr_0.3.3 assertthat_0.2.1 [67] xfun_0.11 rsvd_1.0.2 RSpectra_0.16-0 [70] viridisLite_0.3.0 tibble_2.1.3 beeswarm_0.2.3 [73] statmod_1.4.32 Bibliography "],
["clustering.html", "Chapter 10 Clustering 10.1 Motivation 10.2 What is the “true clustering”? 10.3 Graph-based clustering 10.4 \\(k\\)-means clustering 10.5 Hierarchical clustering 10.6 Evaluating cluster stability 10.7 Subclustering Session Info", " Chapter 10 Clustering .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 10.1 Motivation Clustering is an unsupervised learning procedure that is used in scRNA-seq data analysis to empirically define groups of cells with similar expression profiles. Its primary purpose is to summarize the data in a digestible format for human interpretation. This allows us to describe population heterogeneity in terms of discrete labels that are easily understood, rather than attempting to comprehend the high-dimensional manifold on which the cells truly reside. After annotation based on marker genes, the clusters can be treated as proxies for more abstract biological concepts such as cell types or states. Clustering is thus a critical step for extracting biological insights from scRNA-seq data. Here, we demonstrate the application of several commonly used methods with the 10X PBMC dataset. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) #--- gene-annotation ---# library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) #--- cell-detection ---# set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) #--- variance-modelling ---# set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop=0.1) #--- dimensionality-reduction ---# set.seed(10000) sce.pbmc &lt;- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc) set.seed(100000) sce.pbmc &lt;- runTSNE(sce.pbmc, dimred=&quot;PCA&quot;) set.seed(1000000) sce.pbmc &lt;- runUMAP(sce.pbmc, dimred=&quot;PCA&quot;) sce.pbmc ## class: SingleCellExperiment ## dim: 33694 3922 ## metadata(1): Samples ## assays(2): counts logcounts ## rownames(33694): RP11-34P13.3 FAM138A ... AC213203.1 FAM231B ## rowData names(2): ID Symbol ## colnames(3922): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ... TTTGTCACAGGTCCAC-1 ## TTTGTCATCCCAAGAT-1 ## colData names(2): Sample Barcode ## reducedDimNames(3): PCA TSNE UMAP ## spikeNames(0): ## altExpNames(0): 10.2 What is the “true clustering”? At this point, it is worth stressing the distinction between clusters and cell types. The former is an empirical construct while the latter is a biological truth (albeit a vaguely defined one). For this reason, questions like “what is the true number of clusters?” are usually meaningless. We can define as many clusters as we like, with whatever algorithm we like - each clustering will represent its own partitioning of the high-dimensional expression space, and is as “real” as any other clustering. A more relevant question is “how well do the clusters approximate the cell types?” Unfortunately, this is difficult to answer given the context-dependent interpretation of biological truth. Some analysts will be satisfied with resolution of the major cell types; other analysts may want resolution of subtypes; and others still may require resolution of different states (e.g., metabolic activity, stress) within those subtypes. Moreover, two clusterings can be highly inconsistent yet both valid, simply partitioning the cells based on different aspects of biology. Indeed, asking for an unqualified “best” clustering is akin to asking for the best magnification on a microscope without any context. It is helpful to realize that clustering, like a microscope, is simply a tool to explore the data. We can zoom in and out by changing the resolution of the clustering parameters, and we can experiment with different clustering algorithms to obtain alternative perspectives of the data. This iterative approach is entirely permissible for data exploration, which constitutes the majority of all scRNA-seq data analyses. 10.3 Graph-based clustering 10.3.1 Background Popularized by its use in Seurat, graph-based clustering is a flexible and scalable technique for clustering large scRNA-seq datasets. We first build a graph where each node is a cell that is connected to its nearest neighbours in the high-dimensional space. Edges are weighted based on the similarity between the cells involved, with higher weight given to cells that are more closely related. We then apply algorithms to identify “communities” of cells that are more connected to cells in the same community than they are to cells of different communities. Each community represents a cluster that we can use for downstream interpretation. The major advantage of graph-based clustering lies in its scalability. It only requires a \\(k\\)-nearest neighbor search that can be done in log-linear time on average, in contrast to hierachical clustering methods with runtimes that are quadratic with respect to the number of cells. Graph construction avoids making strong assumptions about the shape of the clusters or the distribution of cells within each cluster, compared to other methods like \\(k\\)-means (that favor spherical clusters) or Gaussian mixture models (that require normality). From a practical perspective, each cell is forcibly connected to a minimum number of neighboring cells, which reduces the risk of generating many uninformative clusters consisting of one or two outlier cells. The main drawback of graph-based methods is that, after graph construction, no information is retained about relationships beyond the neighbouring cells1. This has some practical consequences in datasets that exhibit differences in cell density, as more steps through the graph are required to move the same distance through a region of higher cell density. From the perspective of community detection algorithms, this effect “inflates” the high-density regions such that any internal substructure or noise is more likely to cause formation of subclusters. The resolution of clustering thus becomes dependent on the density of cells, which can occasionally be misleading if it overstates the heterogeneity in the data. 10.3.2 Implementation There are several considerations in the practical execution of a graph-based clustering method: How many neighbors are considered when constructing the graph. What scheme is used to weight the edges. Which community detection algorithm is used to define the clusters. For example, the following code uses the 10 nearest neighbors of each cell to construct a shared nearest neighbor graph. Two cells are connected by an edge if any of their nearest neighbors are shared, with the edge weight defined from the highest average rank of the shared neighbors (Xu and Su 2015). The Walktrap method from the igraph package is then used to identify communities. All calculations are performed using the top PCs to take advantage of data compression and denoising. library(scran) g &lt;- buildSNNGraph(sce.pbmc, k=10, use.dimred = &#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership table(clust) ## clust ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## 585 518 364 458 170 791 295 107 45 46 152 84 40 60 142 16 28 21 We assign the cluster assignments back into our SingleCellExperiment object as a factor in the column metadata. This allows us to conveniently visualize the distribution of clusters in a \\(t\\)-SNE plot (Figure 10.1). library(scater) sce.pbmc$cluster &lt;- factor(clust) plotReducedDim(sce.pbmc, &quot;TSNE&quot;, colour_by=&quot;cluster&quot;) Figure 10.1: \\(t\\)-SNE plot of the 10X PBMC dataset, where each point represents a cell and is coloured according to the identity of the assigned cluster from graph-based clustering. One of the most important parameters is k, the number of nearest neighbors used to construct the graph. This controls the resolution of the clustering where higher k yields a more inter-connected graph and broader clusters. Users can exploit this by experimenting with different values of k to obtain a satisfactory resolution. # More resolved. g.5 &lt;- buildSNNGraph(sce.pbmc, k=5, use.dimred = &#39;PCA&#39;) clust.5 &lt;- igraph::cluster_walktrap(g.5)$membership table(clust.5) ## clust.5 ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ## 81 45 457 296 168 350 79 432 428 897 64 171 68 135 79 26 18 30 21 16 36 9 16 # Less resolved. g.50 &lt;- buildSNNGraph(sce.pbmc, k=50, use.dimred = &#39;PCA&#39;) clust.50 &lt;- igraph::cluster_walktrap(g.50)$membership table(clust.50) ## clust.50 ## 1 2 3 4 5 6 7 8 ## 307 729 789 187 516 524 825 45 The graph itself can be visualized using a force-directed layout (Figure 10.2). This yields a dimensionality reduction result that is closely related to \\(t\\)-SNE and UMAP, though which of these is the most aesthetically pleasing is left to the eye of the beholder. set.seed(2000) reducedDim(sce.pbmc, &quot;force&quot;) &lt;- igraph::layout_with_fr(g) plotReducedDim(sce.pbmc, colour_by=&quot;cluster&quot;, dimred=&quot;force&quot;) Figure 10.2: Force-directed layout for the shared nearest-neighbour graph of the PBMC dataset. Each point represents a cell and is coloured according to its assigned cluster identity. 10.3.3 Other parameters Further tweaking can be performed by changing the edge weighting scheme during graph construction. Setting type=&quot;number&quot; will weight edges based on the number of nearest neighbors that are shared between two cells. Similarly, type=&quot;jaccard&quot; will weight edges according to the Jaccard index of the two sets of neighbors. We can also disable weighting altogether by using buildKNNGraph(), which is occasionally useful for downstream graph operations that do not support weights. g.num &lt;- buildSNNGraph(sce.pbmc, use.dimred=&quot;PCA&quot;, type=&quot;number&quot;) g.jaccard &lt;- buildSNNGraph(sce.pbmc, use.dimred=&quot;PCA&quot;, type=&quot;jaccard&quot;) g.none &lt;- buildKNNGraph(sce.pbmc, use.dimred=&quot;PCA&quot;) All of these g variables are graph objects from the igraph package and can be used with any of the community detection algorithms provided by igraph. We have already mentioned the Walktrap approach, but many others are available to choose from: clust.louvain &lt;- igraph::cluster_louvain(g)$membership clust.infomap &lt;- igraph::cluster_infomap(g)$membership clust.fast &lt;- igraph::cluster_fast_greedy(g)$membership clust.labprop &lt;- igraph::cluster_label_prop(g)$membership clust.eigen &lt;- igraph::cluster_leading_eigen(g)$membership It is then straightforward to compare two clustering strategies to see how they differ. For example, Figure 10.3 suggests that Infomap yields finer clusters than Walktrap while fast-greedy yields coarser clusters. library(pheatmap) # Using a large pseudo-count for a smoother color transition # between 0 and 1 cell in each &#39;tab&#39;. tab &lt;- table(paste(&quot;Infomap&quot;, clust.infomap), paste(&quot;Walktrap&quot;, clust)) ivw &lt;- pheatmap(log10(tab+10), main=&quot;Infomap vs Walktrap&quot;, color=viridis::viridis(100), silent=TRUE) tab &lt;- table(paste(&quot;Fast&quot;, clust.fast), paste(&quot;Walktrap&quot;, clust)) fvw &lt;- pheatmap(log10(tab+10), main=&quot;Fast-greedy vs Walktrap&quot;, color=viridis::viridis(100), silent=TRUE) gridExtra::grid.arrange(ivw[[4]], fvw[[4]]) Figure 10.3: Number of cells assigned to combinations of cluster labels with different community detection algorithms in the PBMC dataset. Each entry of each heatmap represents a pair of labels, coloured proportionally to the log-number of cells with those labels. Some community detection algorithms operate by agglomeration and thus can be used to construct a hierarchical dendrogram based on the pattern of merges between clusters. The dendrogram itself is not particularly informative as it simply describes the order of merge steps performed by the algorithm; unlike the dendrograms produced by hierarchical clustering (Section 10.5), it does not capture the magnitude of differences between subpopulations. However, it does provide a convenient avenue for manually tuning the clustering resolution by generatig nested clusterings using the cut_at() function, as shown below. community.walktrap &lt;- igraph::cluster_walktrap(g) table(igraph::cut_at(community.walktrap, n=5)) ## ## 1 2 3 4 5 ## 3612 198 45 46 21 table(igraph::cut_at(community.walktrap, n=20)) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 533 364 458 442 170 791 295 107 45 46 152 84 40 60 142 76 52 16 28 21 Pipelines involving scran default to rank-based weights followed by Walktrap clustering. In contrast, Seurat uses Jaccard-based weights followed by Louvain clustering. Both of these strategies work well, and it is likely that the same could be said for many other combinations of weighting schemes and community detection algorithms. 10.3.4 Assessing cluster separation When dealing with graphs, the modularity is a natural metric for evaluating the separation between communities/clusters. This is defined as the (scaled) difference between the observed total weight of edges between nodes in the same cluster and the expected total weight if edge weights were randomly distributed across all pairs of nodes. Larger modularity values indicate that there most edges occur within clusters, suggesting that the clusters are sufficiently well separated to avoid edges forming between neighboring cells in different clusters. The standard approach is to report a single modularity value for a clustering on a given graph. This is useful for comparing different clusterings on the same graph - and indeed, some community detection algorithms are designed with the aim of maximizing the modularity - but it is less helpful for interpreting a given clustering. Rather, we use the clusterModularity() function with as.ratio=TRUE, which returns the ratio of the observed to expected sum of weights between each pair of clusters. We use the ratio instead of the difference as the former is less dependent on the number of cells in each cluster. ratio &lt;- clusterModularity(g, clust, as.ratio=TRUE) dim(ratio) ## [1] 18 18 In this matrix, each row/column corresponds to a cluster and each entry contains the ratio of the observed to total weight of edges between cells in the respective clusters. A dataset containing well-separated clusters should contain most of the observed total weight on the diagonal entries, i.e., most edges occur between cells in the same cluster. Indeed, concentration of the weight on the diagonal of (Figure 10.4) indicates that most of the clusters are well-separated, while some modest off-diagonal entries represent closely related clusters with more inter-connecting edges. library(pheatmap) pheatmap(log2(ratio+1), cluster_rows=FALSE, cluster_cols=FALSE, color=colorRampPalette(c(&quot;white&quot;, &quot;blue&quot;))(100)) Figure 10.4: Heatmap of the log2-ratio of the total weight between nodes in the same cluster or in different clusters, relative to the total weight expected under a null model of random links. One useful approach is to use the ratio matrix to form another graph where the nodes are clusters rather than cells. Edges between nodes are weighted according to the ratio of observed to expected edge weights between cells in those clusters. We can then repeat our graph operations on this new cluster-level graph to explore the relationships between clusters. For example, we could obtain clusters of clusters, or we could simply create a new cluster-based layout for visualization (Figure 10.5). This is analogous to the “graph abstraction” approach described by Wolf et al. (2017), which can be used to identify trajectories in the data based on high-weight paths between clusters. cluster.gr &lt;- igraph::graph_from_adjacency_matrix(log2(ratio+1), mode=&quot;upper&quot;, weighted=TRUE, diag=FALSE) # Increasing the weight to increase the visibility of the lines. set.seed(11001010) plot(cluster.gr, edge.width=igraph::E(cluster.gr)$weight*5, layout=igraph::layout_with_lgl) Figure 10.5: Force-based layout showing the relationships between clusters based on the log-ratio of observed to expected total weights between nodes in different clusters. The thickness of the edge between a pair of clusters is proportional to the corresponding log-ratio. Incidentally, some readers may have noticed that all igraph commands were prefixed with igraph::. We have done this deliberately to avoid bringing igraph::normalize into the global namespace. Rather unfortunately, this normalize function accepts any argument and returns NULL, which causes difficult-to-diagnose bugs when it overwrites normalize from BiocGenerics. 10.4 \\(k\\)-means clustering 10.4.1 Background \\(k\\)-means clustering is a classic technique that aims to partition cells into \\(k\\) clusters. Each cell is assigned to the cluster with the closest centroid, which is done by minimizing the within-cluster sum of squares using a random starting configuration for the \\(k\\) centroids. The main advantage of this approach lies in its speed, given the simplicity and ease of implementation of the algorithm. However, it suffers from a number of serious shortcomings that reduce its appeal for obtaining interpretable clusters: It implicitly favours spherical clusters of equal radius. This can lead to unintuitive partitionings on real datasets that contain groupings with irregular sizes and shapes. The number of clusters \\(k\\) must be specified beforehand and represents a hard cap on the resolution of the clustering.. For example, setting \\(k\\) to be below the number of cell types will always lead to co-clustering of two cell types, regardless of how well separated they are. In contrast, other methods like graph-based clustering will respect strong separation even if the relevant resolution parameter is set to a low value. It is dependent on the randomly chosen initial coordinates. This requires multiple runs to verify that the clustering is stable. That said, \\(k\\)-means clustering is still one of the best approaches for sample-based data compression. In this application, we set \\(k\\) to a large value such as the square root of the number of cells to obtain fine-grained clusters. These are not meant to be interpreted directly, but rather, the centroids are treated as “samples” for further analyses. The idea here is to obtain a single representative of each region of the expression space, reducing the number of samples and computational work in later steps like, e.g., trajectory reconstruction (Ji and Ji 2016). This approach will also eliminate differences in cell density across the expression space, ensuring that the most abundant cell type does not dominate downstream results. 10.4.2 Base implementation Base R provides the kmeans() function that does as its name suggests. We call this on our top PCs to obtain a clustering for a specified number of clusters in the centers= argument, after setting the random seed to ensure that the results are reproducible. In general, the \\(k\\)-means clusters correspond to the visual clusters on the \\(t\\)-SNE plot in Figure 10.6, though there are some divergences that are not observed in, say, Figure 10.1. (This is at least partially due to the fact that \\(t\\)-SNE is itself graph-based and so will naturally agree more with a graph-based clustering strategy.) set.seed(100) clust.kmeans &lt;- kmeans(reducedDim(sce.pbmc, &quot;PCA&quot;), centers=10) table(clust.kmeans$cluster) ## ## 1 2 3 4 5 6 7 8 9 10 ## 472 200 46 515 90 320 241 865 735 438 sce.pbmc$cluster &lt;- factor(clust.kmeans$cluster) plotReducedDim(sce.pbmc, &quot;TSNE&quot;, colour_by=&quot;cluster&quot;) Figure 10.6: \\(t\\)-SNE plot of the 10X PBMC dataset, where each point represents a cell and is coloured according to the identity of the assigned cluster from \\(k\\)-means clustering. If we were so inclined, we could obtain a “reasonable” choice of \\(k\\) by computing the gap statistic using methods from the cluster package. This is the log-ratio of the expected to observed within-cluster sum of squares, where the expected value is computed by randomly distributing cells within the minimum bounding box of the original data. A larger gap statistic represents a lower observed sum of squares - and thus better clustering - compared to a population with no structure. Ideally, we would choose the \\(k\\) that maximizes the gap statistic, but this is often unhelpful as the tendency of \\(k\\)-means to favour spherical clusters drives a large \\(k\\) to capture different cluster shapes. Instead, we choose the most parsimonious \\(k\\) beyond which the increases in the gap statistic are considered insignificant (Figure 10.7). library(cluster) set.seed(110010101) gaps &lt;- clusGap(reducedDim(sce.pbmc, &quot;PCA&quot;), kmeans, K.max=20) best.k &lt;- maxSE(gaps$Tab[,&quot;gap&quot;], gaps$Tab[,&quot;SE.sim&quot;]) best.k ## [1] 9 plot(gaps$Tab[,&quot;gap&quot;], xlab=&quot;Number of clusters&quot;, ylab=&quot;Gap statistic&quot;) abline(v=best.k, col=&quot;red&quot;) Figure 10.7: Gap statistic with respect to increasing number of \\(k\\)-means clusters in the 10X PBMC dataset. The red line represents the chosen \\(k\\). A more practical use of \\(k\\)-means is to deliberately set \\(k\\) to a large value to achieve overclustering. This will forcibly partition cells inside broad clusters that do not have well-defined internal structure. For example, we might be interested in the change in expression from one “side” of a cluster to the other, but the lack of any clear separation within the cluster makes it difficult to separate with graph-based methods, even at the highest resolution. \\(k\\)-means has no such problems and will readily split these broad clusters for greater resolution, though obviously one must be prepared for the additional work involved in interpreting a greater number of clusters. set.seed(100) clust.kmeans2 &lt;- kmeans(reducedDim(sce.pbmc, &quot;PCA&quot;), centers=20) table(clust.kmeans2$cluster) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 153 172 47 254 125 207 160 334 204 442 163 68 192 271 113 168 124 420 45 260 sce.pbmc$cluster &lt;- factor(clust.kmeans2$cluster) plotTSNE(sce.pbmc, colour_by=&quot;cluster&quot;, text_by=&quot;cluster&quot;) Figure 10.8: \\(t\\)-SNE plot of the 10X PBMC dataset, where each point represents a cell and is coloured according to the identity of the assigned cluster from \\(k\\)-means clustering with \\(k=20\\). 10.4.3 Assessing cluster separation The within-cluster sum of squares (WCSS) for each cluster is the most relevant diagnostic for \\(k\\)-means, given that the algorithm aims to find a clustering that minimizes the WCSS. Specifically, we use the WCSS to compute the root-mean-squared deviation (RMSD) that represents the spread of cells within each cluster. A cluster is more likely to have a low RMSD if it has no internal structure and is separated from other clusters (such that there are not many cells on the boundaries between clusters, which would result in a higher sum of squares from the centroid). ncells &lt;- tabulate(clust.kmeans2$cluster) tab &lt;- data.frame(wcss=clust.kmeans2$withinss, ncells=ncells) tab$rms &lt;- sqrt(tab$wcss/tab$ncells) tab ## wcss ncells rms ## 1 2872 153 4.333 ## 2 4204 172 4.944 ## 3 1443 47 5.542 ## 4 4275 254 4.103 ## 5 1711 125 3.700 ## 6 3055 207 3.842 ## 7 1633 160 3.194 ## 8 2160 334 2.543 ## 9 7027 204 5.869 ## 10 2858 442 2.543 ## 11 4259 163 5.112 ## 12 2289 68 5.802 ## 13 2112 192 3.317 ## 14 6391 271 4.856 ## 15 1603 113 3.767 ## 16 12400 168 8.591 ## 17 1823 124 3.834 ## 18 7026 420 4.090 ## 19 2591 45 7.587 ## 20 3640 260 3.742 (As an aside, the RMSDs of the clusters are poorly correlated with their sizes in Figure 10.8. This highlights the risks of attempting to quantitatively interpret the sizes of visual clusters in \\(t\\)-SNE plots.) To explore the relationships between \\(k\\)-means clusters, a natural approach is to compute distances between their centroids. This directly lends itself to visualization as a tree after hierarchical clustering (Figure 10.9). cent.tree &lt;- hclust(dist(clust.kmeans2$centers), &quot;ward.D2&quot;) plot(cent.tree) Figure 10.9: Hierarchy of \\(k\\)-means cluster centroids, using Ward’s minimum variance method. 10.5 Hierarchical clustering 10.5.1 Background Hierarchical clustering is an ancient technique that aims to generate a dendrogram containing a hierarchy of samples. This is most commonly done by greedily agglomerating samples into clusters, then agglomerating those clusters into larger clusters, and so on until all samples belong to a single cluster. Variants of hierarchical clustering methods primarily differ in how they choose to perform the agglomerations. For example, complete linkage aims to merge clusters with the smallest maximum distance between their elements, while Ward’s method aims to minimize the increase in within-cluster variance. In the context of scRNA-seq, the main advantage of hierarchical clustering lies in the production of the dendrogram. This is a rich summary that describes the relationships between cells and subpopulations at various resolutions and in a quantitative manner based on the branch lengths. Users can easily “cut” the tree at different heights to define clusters with different granularity, where clusters defined at high resolution are guaranteed to be nested within those defined at a lower resolution. (Guaranteed nesting can be helpful for interpretation, as discussed in Section 10.7.) The dendrogram is also a natural representation of the data in situations where cells have descended from a relatively recent common ancestor. In practice, hierachical clustering is too slow to be used for anything but the smallest scRNA-seq datasets. Most variants require a cell-cell distance matrix that is prohibitively expensive to compute for many cells. Greedy agglomeration is also likely to result in a quantitatively suboptimal partitioning (as defined by the agglomeration measure) at higher levels of the dendrogram when the number of cells and merge steps is high. Nonetheless, we will still demonstrate the application of hierarchical clustering here, as it can occasionally be useful for squeezing more information out of datasets with very few cells. 10.5.2 Implementation As the PBMC dataset is too large, we will demonstrate on the 416B dataset instead. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.416b &lt;- LunSpikeInData(which=&quot;416b&quot;) sce.416b$block &lt;- factor(sce.416b$block) #--- gene-annotation ---# library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.416b)$ENSEMBL &lt;- rownames(sce.416b) rowData(sce.416b)$SYMBOL &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SYMBOL&quot;) rowData(sce.416b)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) library(scater) rownames(sce.416b) &lt;- uniquifyFeatureNames(rowData(sce.416b)$ENSEMBL, rowData(sce.416b)$SYMBOL) #--- quality-control ---# mito &lt;- which(rowData(sce.416b)$SEQNAME==&quot;MT&quot;) stats &lt;- perCellQCMetrics(sce.416b, subsets=list(Mt=mito)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;subsets_Mt_percent&quot;, &quot;altexps_ERCC_percent&quot;), batch=sce.416b$block) sce.416b &lt;- sce.416b[,!qc$discard] #--- normalization ---# library(scran) sce.416b &lt;- computeSumFactors(sce.416b) sce.416b &lt;- logNormCounts(sce.416b) #--- variance-modelling ---# dec.416b &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;, block=sce.416b$block) chosen.hvgs &lt;- getTopHVGs(dec.416b, prop=0.1) #--- batch-correction ---# library(limma) assay(sce.416b, &quot;corrected&quot;) &lt;- removeBatchEffect(logcounts(sce.416b), design=model.matrix(~sce.416b$phenotype), batch=sce.416b$block) #--- dimensionality-reduction ---# sce.416b &lt;- runPCA(sce.416b, ncomponents=10, subset_row=chosen.hvgs, exprs_values=&quot;corrected&quot;, BSPARAM=BiocSingular::ExactParam()) set.seed(1010) sce.416b &lt;- runTSNE(sce.416b, dimred=&quot;PCA&quot;, perplexity=10) sce.416b ## class: SingleCellExperiment ## dim: 46604 185 ## metadata(0): ## assays(3): counts logcounts corrected ## rownames(46604): 4933401J01Rik Gm26206 ... CAAA01147332.1 CBFB-MYH11-mcherry ## rowData names(4): Length ENSEMBL SYMBOL SEQNAME ## colnames(185): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ## ... SLX-11312.N712_S507.H5H5YBBXX.s_8.r_1 SLX-11312.N712_S517.H5H5YBBXX.s_8.r_1 ## colData names(9): Source Name cell line ... spike-in addition block ## reducedDimNames(2): PCA TSNE ## spikeNames(0): ## altExpNames(2): ERCC SIRV We compute a cell-cell distance matrix using the top PCs and we apply hierarchical clustering with Ward’s method. The resulting tree in Figure 10.10 shows a clear split in the population caused by oncogene induction. While both Ward’s method and complete linkage (hclust()’s default) yield compact clusters, we prefer the former it is less affected by differences in variance between clusters. dist.416b &lt;- dist(reducedDim(sce.416b, &quot;PCA&quot;)) tree.416b &lt;- hclust(dist.416b, &quot;ward.D2&quot;) # Making a prettier dendrogram. library(dendextend) tree.416b$labels &lt;- seq_along(tree.416b$labels) dend &lt;- as.dendrogram(tree.416b, hang=0.1) combined.fac &lt;- paste0(sce.416b$block, &quot;.&quot;, sub(&quot; .*&quot;, &quot;&quot;, sce.416b$phenotype)) labels_colors(dend) &lt;- c( `20160113.wild`=&quot;blue&quot;, `20160113.induced`=&quot;red&quot;, `20160325.wild`=&quot;dodgerblue&quot;, `20160325.induced`=&quot;salmon&quot; )[combined.fac][order.dendrogram(dend)] plot(dend) Figure 10.10: Hierarchy of cells in the 416B data set after hierarchical clustering, where each leaf node is a cell that is coloured according to its oncogene induction status (red is induced, blue is control) and plate of origin (light or dark). To obtain explicit clusters, we “cut” the tree by removing internal branches such that every subtree represents a distinct cluster. This is most simply done by removing internal branches above a certain height of the tree, as performed by the cutree() function. We generally prefer to use the dynamicTreeCut package, which uses the shape of the branches to obtain a more suitable partitioning for complex dendrograms (Figure 10.11). library(dynamicTreeCut) # minClusterSize needs to be turned down for small datasets. # deepSplit controls the resolution of the partitioning. clust.416b &lt;- cutreeDynamic(tree.416b, distM=as.matrix(dist.416b), minClusterSize=10, deepSplit=1) ## ..cutHeight not given, setting it to 783 ===&gt; 99% of the (truncated) height range in dendro. ## ..done. table(clust.416b) ## clust.416b ## 1 2 3 4 ## 78 69 24 14 labels_colors(dend) &lt;- clust.416b[order.dendrogram(dend)] plot(dend) Figure 10.11: Hierarchy of cells in the 416B data set after hierarchical clustering, where each leaf node is a cell that is coloured according to its assigned cluster identity from a dynamic tree cut. This generally corresponds well to the grouping of cells on a \\(t\\)-SNE plot (Figure 10.12). The exception is cluster 2, which is split across two visual clusters in the plot. We attribute this to a distortion introduced by \\(t\\)-SNE rather than inappropriate behaviour of the clustering algorithm, based on the examination of some later diagnostics. sce.416b$cluster &lt;- factor(clust.416b) plotReducedDim(sce.416b, &quot;TSNE&quot;, colour_by=&quot;cluster&quot;) Figure 10.12: \\(t\\)-SNE plot of the 416B dataset, where each point represents a cell and is coloured according to the identity of the assigned cluster from hierarchical clustering. 10.5.3 Assessing cluster separation We check the separation of the clusters using the silhouette width (Figure 10.13). For each cell, we compute the average distance to cells in each other cluster. We then compute the minimum of these average distances across all clusters, as well as the average distance to cells in the same cluster. The silhouette width for each cell is defined as the difference between these two values divided by their maximum. Cells with large positive silhouette widths are closer to other cells in the same cluster than to cells in different clusters. Each cluster would ideally contain large positive silhouette widths, indicating that it is well-separated from other clusters. This is indeed the case in Figure 10.13 - and in fact, cluster 2 has the largest width of all, indicating that it is a more coherent cluster than portrayed in Figure 10.12. Smaller widths can arise from the presence of internal subclusters, which inflates the within-cluster distance; or overclustering, where cells at the boundary of a partition are closer to the neighboring cluster than their own cluster. sil &lt;- silhouette(clust.416b, dist = dist.416b) plot(sil) Figure 10.13: Silhouette widths for cells in each cluster in the 416B dataset. Each bar represents a cell, grouped by the cluster to which it is assigned. For a more detailed examination, we identify the closest neighboring cluster for cells with negative widths. This provides a perspective on the relationships between clusters that is closer to the raw data than the dendrogram in Figure 10.11. neg.widths &lt;- sil[,3] &lt; 0 table(Cluster=sil[neg.widths,1], Neighbor=sil[neg.widths,2]) ## Neighbor ## Cluster 1 2 3 ## 2 0 0 3 ## 3 1 3 0 The average silhouette width across all cells can also be used to choose clustering parameters. The aim is to maximize the average silhouette width in order to obtain well-separated clusters. This can be helpful to automatically obtain a “reasonable” clustering, though in practice, the clustering that yields the strongest separation often does not provide the most biological insight. 10.6 Evaluating cluster stability A desirable property of a given clustering is that it is stable to perturbations to the input data (Von Luxburg 2010). Stable clusters are logistically convenient as small changes to upstream processing will not change the conclusions; greater stability also increases the likelihood that those conclusions can be reproduced in an independent replicate study. scran uses bootstrapping to evaluate the stability of a clustering algorithm on a given dataset - that is, cells are sampled with replacement to create a “bootstrap replicate” dataset, and clustering is repeated on this replicate to see if the same clusters can be reproduced. We demonstrate below for graph-based clustering on the PBMC dataset. myClusterFUN &lt;- function(x) { g &lt;- buildSNNGraph(x, use.dimred=&quot;PCA&quot;, type=&quot;jaccard&quot;) igraph::cluster_louvain(g)$membership } originals &lt;- myClusterFUN(sce.pbmc) set.seed(0010010100) coassign &lt;- bootstrapCluster(sce.pbmc, FUN=myClusterFUN, clusters=originals) dim(coassign) ## [1] 19 19 The function returns a matrix of coassignment probabilities between every pair of original clusters in originals (Figure 10.14). Each coassignment probability between clusters \\(X\\) and \\(Y\\) represents the probability that a randomly chosen cell from \\(X\\) and a randomly chosen from \\(Y\\) are assigned to the same cluster in the bootstrap replicate. High co-assignment probabilities indicate that \\(X\\) is not stable with respect to its separation from \\(Y\\), given that their cells are liable to cluster together in the replicates. Ideally, we would hope for high coassignment probabilites on the diagonal (i.e., \\(X\\) cells cluster with themselves) and low probabilites off the diagonal. pheatmap(coassign, cluster_row=FALSE, cluster_col=FALSE, color=rev(viridis::magma(100))) Figure 10.14: Heatmap of coassignment probabilities from bootstrapping of graph-based clustering in the PBMC dataset. Each row and column represents an original cluster and each entry is colored according to the value of the coassignment probability between that pair of clusters. Bootstrapping is a general approach for evaluating cluster stability that is compatible with any clustering algorithm. The coassignment probability is also more informative than a single per-cluster stability measure as the former considers the relationships between clusters, e.g., unstable separation between \\(X\\) and \\(Y\\) does not penalize the stability of separation between \\(X\\) and another cluster \\(Z\\). Of course, one should take these probabilities with a grain of salt, as bootstrapping only considers the effect of sampling noise and ignores other factors that affect reproducibility in an independent study (e.g., batch effects, donor variation). In addition, it is possible for a poor separation to be highly stable, so highly stable cluster may not necessarily represent some distinct subpopulation. 10.7 Subclustering Another simple approach to improving resolution is to repeat the feature selection and clustering within a single cluster. This aims to select HVGs and PCs that are more relevant to internal structure, improving resolution by avoiding noise from unnecessary features. Subsetting also encourages clustering methods to separate cells according to more modest heterogeneity in the absence of distinct subpopulations. We demonstrate with a cluster of putative memory T cells from the PBMC dataset, identified according to several markers (Figure 10.15). g.full &lt;- buildSNNGraph(sce.pbmc, use.dimred = &#39;PCA&#39;) clust.full &lt;- igraph::cluster_walktrap(g.full)$membership plotExpression(sce.pbmc, features=c(&quot;CD3E&quot;, &quot;CCR7&quot;, &quot;CD69&quot;, &quot;CD44&quot;), x=I(factor(clust.full)), colour_by=I(factor(clust.full))) Figure 10.15: Distribution of log-normalized expression values for several T cell markers within each cluster in the 10X PBMC dataset. Each cluster is color-coded for convenience. # Repeating modelling and PCA on the subset. memory &lt;- 6L sce.memory &lt;- sce.pbmc[,clust.full==memory] dec.memory &lt;- modelGeneVar(sce.memory) sce.memory &lt;- denoisePCA(sce.memory, technical=dec.memory, subset.row=getTopHVGs(dec.memory, prop=0.1)) We apply graph-based clustering within this memory subset to obtain CD4+ and CD8+ subclusters (Figure 10.16). Admittedly, the expression of CD4 is so low that the change is rather modest, but the interpretation is clear enough. g.memory &lt;- buildSNNGraph(sce.memory, use.dimred=&quot;PCA&quot;) clust.memory &lt;- igraph::cluster_walktrap(g.memory)$membership plotExpression(sce.memory, features=c(&quot;CD8A&quot;, &quot;CD4&quot;), x=I(factor(clust.memory))) Figure 10.16: Distribution of CD4 and CD8A log-normalized expression values within each cluster in the memory T cell subset of the 10X PBMC dataset. For subclustering analyses, it is helpful to define a customized function that calls our desired algorithms to obtain a clustering from a given SingleCellExperiment. This function can then be applied multiple times on different subsets without having to repeatedly copy and modify the code for each subset. For example, quickSubCluster() loops over all subsets and executes this user-specified function to generate a list of SingleCellExperiment objects containing the subclustering results. (Of course, the downside is that this assumes that a similar analysis is appropriate for each subset. If different subsets require extensive reparametrization, copying the code may actually be more straightforward.) set.seed(1000010) subcluster.out &lt;- quickSubCluster(sce.pbmc, groups=clust.full, prepFUN=function(x) { # Preparing the subsetted SCE for clustering. dec &lt;- modelGeneVar(x) input &lt;- denoisePCA(x, technical=dec, subset.row=getTopHVGs(dec, prop=0.1), BSPARAM=BiocSingular::IrlbaParam()) }, clusterFUN=function(x) { # Performing the subclustering in the subset. g &lt;- buildSNNGraph(x, use.dimred=&quot;PCA&quot;, k=20) igraph::cluster_walktrap(g)$membership } ) # One SingleCellExperiment object per parent cluster: names(subcluster.out) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; # Looking at the subclustering for one example: table(subcluster.out[[1]]$subcluster) ## ## 1.1 1.2 1.3 1.4 1.5 ## 179 113 44 117 132 Subclustering is a general and conceptually straightforward procedure for increasing resolution. It can also simplify the interpretation of the subclusters, which only need to be considered in the context of the parent cluster’s identity - for example, we did not have to re-identify the cells in cluster 6 as T cells. However, this is a double-edged sword as it is difficult for practitioners to consider the uncertainty of identification for parent clusters when working with deep nesting. If cell types or states span cluster boundaries, conditioning on the putative cell type identity of the parent cluster can encourage the construction of a “house of cards” of cell type assignments, e.g., where a subcluster of one parent cluster is actually contamination from a cell type in a separate parent cluster. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] dynamicTreeCut_1.63-1 dendextend_1.13.2 cluster_2.1.0 [4] pheatmap_1.0.12 scater_1.15.12 ggplot2_3.2.1 [7] scran_1.15.14 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [10] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [13] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [16] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [19] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] viridis_0.5.1 edgeR_3.29.0 BiocSingular_1.3.1 [4] viridisLite_0.3.0 DelayedMatrixStats_1.9.0 assertthat_0.2.1 [7] statmod_1.4.32 highr_0.8 BiocManager_1.30.10 [10] dqrng_0.2.1 GenomeInfoDbData_1.2.2 vipor_0.4.5 [13] yaml_2.2.0 pillar_1.4.3 lattice_0.20-38 [16] glue_1.3.1 limma_3.43.0 digest_0.6.23 [19] RColorBrewer_1.1-2 XVector_0.27.0 colorspace_1.4-1 [22] cowplot_1.0.0 htmltools_0.4.0 Matrix_1.2-18 [25] pkgconfig_2.0.3 bookdown_0.16 zlibbioc_1.33.0 [28] purrr_0.3.3 scales_1.1.0 processx_3.4.1 [31] tibble_2.1.3 farver_2.0.1 withr_2.1.2 [34] lazyeval_0.2.2 magrittr_1.5 crayon_1.3.4 [37] evaluate_0.14 ps_1.3.0 beeswarm_0.2.3 [40] tools_4.0.0 lifecycle_0.1.0 stringr_1.4.0 [43] munsell_0.5.0 locfit_1.5-9.1 irlba_2.3.3 [46] callr_3.4.0 compiler_4.0.0 rsvd_1.0.2 [49] rlang_0.4.2 grid_4.0.0 RCurl_1.95-4.12 [52] BiocNeighbors_1.5.1 igraph_1.2.4.2 labeling_0.3 [55] bitops_1.0-6 rmarkdown_2.0 gtable_0.3.0 [58] R6_2.4.1 gridExtra_2.3 knitr_1.26 [61] dplyr_0.8.3 stringi_1.4.3 ggbeeswarm_0.6.0 [64] Rcpp_1.0.3 tidyselect_0.2.5 xfun_0.11 Bibliography "],
["marker-detection.html", "Chapter 11 Marker gene detection 11.1 Motivation 11.2 Using pairwise \\(t\\)-tests 11.3 Alternative testing regimes 11.4 Handling blocking factors 11.5 Invalidity of \\(p\\)-values 11.6 Further comments Session Info", " Chapter 11 Marker gene detection .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 11.1 Motivation To interpret our clustering results from Chapter 10, we identify the genes that drive separation between clusters. These marker genes allow us to assign biological meaning to each cluster based on their functional annotation. In the most obvious case, the marker genes for each cluster are a priori associated with particular cell types, allowing us to treat the clustering as a proxy for cell type identity. The same principle can be applied to discover more subtle differences between clusters (e.g., changes in activation or differentiation state) based on the behavior of genes in the affected pathways. Identification of marker genes is usually based around the retrospective detection of differential expression between clusters. Genes that are more strongly DE are more likely to have caused separate clustering of cells in the first place. Several different statistical tests are available to quantify the differences in expression profiles, and different approaches can be used to consolidate test results into a single ranking of genes for each cluster. These choices parametrize the theoretical differences between the various marker detection strategies presented in this chapter. We will demonstrate using the 10X PBMC dataset: View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) #--- gene-annotation ---# library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) #--- cell-detection ---# set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) #--- variance-modelling ---# set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop=0.1) #--- dimensionality-reduction ---# set.seed(10000) sce.pbmc &lt;- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc) set.seed(100000) sce.pbmc &lt;- runTSNE(sce.pbmc, dimred=&quot;PCA&quot;) set.seed(1000000) sce.pbmc &lt;- runUMAP(sce.pbmc, dimred=&quot;PCA&quot;) #--- clustering ---# g &lt;- buildSNNGraph(sce.pbmc, k=10, use.dimred = &#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership sce.pbmc$cluster &lt;- factor(clust) sce.pbmc ## class: SingleCellExperiment ## dim: 33694 3922 ## metadata(1): Samples ## assays(2): counts logcounts ## rownames(33694): RP11-34P13.3 FAM138A ... AC213203.1 FAM231B ## rowData names(2): ID Symbol ## colnames(3922): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ... TTTGTCACAGGTCCAC-1 ## TTTGTCATCCCAAGAT-1 ## colData names(3): Sample Barcode cluster ## reducedDimNames(3): PCA TSNE UMAP ## spikeNames(0): ## altExpNames(0): 11.2 Using pairwise \\(t\\)-tests 11.2.1 Standard application The Welch \\(t\\)-test is an obvious choice of statistical method to test for differences in expression between clusters. It is quickly computed and has good statistical properties for large numbers of cells (Soneson and Robinson 2018). We use the findMarkers() function to perform pairwise comparisons between clusters for each gene, which returns a list of DataFrames containing ranked candidate markers for each cluster. library(scran) markers.pbmc &lt;- findMarkers(sce.pbmc, sce.pbmc$cluster) markers.pbmc ## List of length 18 ## names(18): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 To demonstrate, we use cluster 9 as our cluster of interest for this section. The relevant DataFrame contains log2-fold changes of expression in cluster 9 over each other cluster, along with several statistics obtained by combining \\(p\\)-values (Simes 1986) across the pairwise comparisons involving 9. chosen &lt;- &quot;9&quot; interesting &lt;- markers.pbmc[[chosen]] colnames(interesting) ## [1] &quot;Top&quot; &quot;p.value&quot; &quot;FDR&quot; &quot;summary.logFC&quot; &quot;logFC.1&quot; &quot;logFC.2&quot; ## [7] &quot;logFC.3&quot; &quot;logFC.4&quot; &quot;logFC.5&quot; &quot;logFC.6&quot; &quot;logFC.7&quot; &quot;logFC.8&quot; ## [13] &quot;logFC.10&quot; &quot;logFC.11&quot; &quot;logFC.12&quot; &quot;logFC.13&quot; &quot;logFC.14&quot; &quot;logFC.15&quot; ## [19] &quot;logFC.16&quot; &quot;logFC.17&quot; &quot;logFC.18&quot; Of particular interest is the Top field. The set of genes with Top \\(\\le X\\) is the union of the top \\(X\\) genes (ranked by \\(p\\)-value) from each pairwise comparison involving cluster 9. For example, the set of all genes with Top values of 1 contains the gene with the lowest \\(p\\)-value from each comparison. Similarly, the set of genes with Top values less than or equal to 10 contains the top 10 genes from each comparison. The Top field represents findMarkers()’s approach to consolidating multiple pairwise comparisons into a single ranking for each cluster; each DataFrame produced by findMarkers() will order genes based on the Top value by default. interesting[1:10,1:4] ## DataFrame with 10 rows and 4 columns ## Top p.value FDR summary.logFC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## S100A4 1 3.29706e-57 3.05195e-55 -4.52198 ## TAGLN2 1 1.65522e-24 3.58425e-23 4.83531 ## PF4 1 2.54870e-35 9.99719e-34 5.91366 ## GZMA 1 1.41952e-120 7.71441e-118 -1.95444 ## HLA-DQA1 1 1.79189e-88 4.75402e-86 -3.64622 ## FCN1 1 1.13468e-246 4.77901e-243 -2.81179 ## SERPINA1 1 1.12795e-68 1.72751e-66 -2.43278 ## RPL23A 1 2.42151e-37 1.04737e-35 -4.07367 ## RPL17 1 0.00000e+00 0.00000e+00 -2.82856 ## RPS21 1 1.08454e-56 9.90316e-55 -3.99499 We use the Top field to identify a set of genes that is guaranteed to distinguish cluster 9 from any other cluster. Here, we examine the top 6 genes from each pairwise comparison (Figure 11.1). Some inspection of the most upregulated genes suggest that cluster 9 contains platelets or their precursors, based on the expression of platelet factor 4 (PF4) and pro-platelet basic protein (PPBP). best.set &lt;- interesting[interesting$Top &lt;= 6,] logFCs &lt;- getMarkerEffects(best.set) library(pheatmap) pheatmap(logFCs, breaks=seq(-5, 5, length.out=101)) Figure 11.1: Heatmap of log-fold changes for cluster 9 over all other clusters. Colours are capped at -5 and 5 to preserve dynamic range. Each DataFrame also contains several other statistics that may be of interest. The summary.logFC field provides a convenient summary of the direction and effect size for each gene, and is defined here as the log-fold change from the comparison with the lowest \\(p\\)-value. The p.value field contains the combined \\(p\\)-value that is obtained by applying Simes’ method to the pairwise \\(p\\)-values for each gene and represents the evidence against the joint null hypothesis, i.e., that the gene is not DE between cluster 9 and any other cluster. Examination of these statistics permits a quick evaluation of the suitability of a candidate marker; if both of these metrics are poor (small log-fold change, large \\(p\\)-value), the gene can most likely be dismissed. We intentionally use pairwise comparisons between clusters rather than comparing each cluster to the average of all other cells. The latter approach is sensitive to the population composition, potentially resulting in substantially different sets of markers when cell type abundances change in different contexts. In the worst case, the presence of a single dominant subpopulation will drive the selection of top markers for every other cluster, pushing out useful genes that can resolve the various minor subpopulations. Moreover, pairwise comparisons naturally provide more information to interpret of the utility of a marker, e.g., by providing log-fold changes to indicate which clusters are distinguished by each gene. 11.2.2 Using the log-fold change Our previous findMarkers() call considers both up- and downregulated genes to be potential markers. However, downregulated genes are less appealing as markers as it is more difficult to interpret and experimentally validate an absence of expression. To focus on up-regulated markers, we can instead perform a one-sided \\(t\\)-test to identify genes that are upregulated in each cluster compared to the others. This is achieved by setting direction=&quot;up&quot; in the findMarkers() call. markers.pbmc.up &lt;- findMarkers(sce.pbmc, sce.pbmc$cluster, direction=&quot;up&quot;) interesting.up &lt;- markers.pbmc.up[[chosen]] interesting.up[1:10,1:4] ## DataFrame with 10 rows and 4 columns ## Top p.value FDR summary.logFC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## TAGLN2 1 8.27609e-25 9.29516e-21 4.83531 ## PF4 1 1.27435e-35 4.29379e-31 5.91366 ## SDPR 2 2.26416e-21 1.90722e-17 4.72820 ## GPX1 2 1.79269e-20 1.00671e-16 4.83143 ## TMSB4X 2 1.61389e-31 2.71891e-27 3.71343 ## PPBP 3 2.67043e-20 1.28539e-16 5.54885 ## NRGN 3 1.41986e-20 9.56813e-17 4.18416 ## CCL5 5 2.55331e-18 9.55903e-15 4.62327 ## GNG11 6 2.06623e-18 8.70243e-15 4.73606 ## HIST1H2AC 7 1.05437e-17 3.55260e-14 4.76160 The \\(t\\)-test also allows us to specify a non-zero log-fold change as the null hypothesis. This allows us to consider the magnitude of the log-fold change in our \\(p\\)-value calculations, in a manner that is more rigorous than simply filtering directly on the log-fold changes (McCarthy and Smyth 2009). (Specifically, a simple threshold does not consider the variance and can enrich for genes that have both large log-fold changes and large variances.) We perform this by setting lfc= in our findMarkers() call - when combined with direction=, this tests for genes with log-fold changes that are significantly greater than 1: markers.pbmc.up2 &lt;- findMarkers(sce.pbmc, sce.pbmc$cluster, direction=&quot;up&quot;, lfc=1) interesting.up2 &lt;- markers.pbmc.up2[[chosen]] interesting.up2[1:10,1:4] ## DataFrame with 10 rows and 4 columns ## Top p.value FDR summary.logFC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## TAGLN2 1 4.96068e-20 5.57151e-16 4.83531 ## PF4 1 7.32681e-31 2.46869e-26 5.91366 ## SDPR 2 1.27379e-17 1.07297e-13 4.72820 ## TMSB4X 2 6.87689e-23 1.15855e-18 3.71343 ## PPBP 3 3.12848e-17 2.10822e-13 5.66420 ## NRGN 4 2.87887e-16 1.61668e-12 4.31853 ## GPX1 5 4.19071e-16 2.01717e-12 4.83143 ## GNG11 5 9.80841e-15 4.13106e-11 4.73606 ## CCL5 6 1.71914e-14 6.43609e-11 4.62327 ## HIST1H2AC 7 3.79677e-14 1.27928e-10 4.81161 These two settings yield a more focused set of candidate marker genes that are upregulated in cluster 9 (Figure 11.2). best.set &lt;- interesting.up2[interesting.up2$Top &lt;= 5,] logFCs &lt;- getMarkerEffects(best.set) library(pheatmap) pheatmap(logFCs, breaks=seq(-5, 5, length.out=101)) Figure 11.2: Heatmap of log-fold changes for cluster 9 over all other clusters. Colours are capped at -5 and 5 to preserve dynamic range. Of course, this increased stringency is not without cost. If only upregulated genes are requested from findMarkers(), any cluster defined by downregulation of a marker gene will not contain that gene among the top set of features in its DataFrame. This is occasionally relevant for subtypes or other states that are distinguished by high versus low expression of particular genes2. Similarly, setting an excessively high log-fold change threshold may discard otherwise useful genes. For example, a gene upregulated in a small proportion of cells of a cluster will have a small log-fold change but can still be an effective marker if the focus is on specificity rather than sensitivity. 11.2.3 Finding cluster-specific markers By default, findMarkers() will give a high ranking to genes that are differentially expressed in any pairwise comparison. This is because a gene only needs a very low \\(p\\)-value in a single pairwise comparison to achieve a low Top value. A more stringent approach would only consider genes that are differentially expressed in all pairwise comparisons involving the cluster of interest. To achieve this, we set pval.type=&quot;all&quot; in findMarkers() to use an intersection-union test (Berger and Hsu 1996) where the combined \\(p\\)-value for each gene is the maximum of the \\(p\\)-values from all pairwise comparisons. A gene will only achieve a low combined \\(p\\)-value if it is strongly DE in all comparisons to other clusters. # We can combine this with &#39;direction=&#39;. markers.pbmc.up3 &lt;- findMarkers(sce.pbmc, sce.pbmc$cluster, pval.type=&quot;all&quot;, direction=&quot;up&quot;) interesting.up3 &lt;- markers.pbmc.up3[[chosen]] interesting.up3[1:10,1:3] ## DataFrame with 10 rows and 3 columns ## p.value FDR summary.logFC ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## SDPR 2.89394e-21 9.75083e-17 4.77839 ## PF4 5.79594e-21 9.76443e-17 5.83594 ## PPBP 3.51586e-20 3.94878e-16 5.62861 ## NRGN 9.29995e-20 7.83382e-16 4.01347 ## GNG11 2.82509e-18 1.90377e-14 4.62265 ## HIST1H2AC 1.34167e-17 7.53437e-14 4.69263 ## TUBB1 2.36417e-17 1.13797e-13 4.20414 ## TAGLN2 6.10000e-17 2.56917e-13 3.00063 ## CLU 7.25940e-12 2.71776e-08 3.30158 ## RGS18 1.22730e-10 4.13526e-07 2.97197 This strategy will only report genes that are highly specific to the cluster of interest. When it works, it can be highly effective as it generates a small focused set of candidate markers. However, any gene that is expressed at the same level in two or more clusters will simply not be detected. This is likely to discard many interesting genes, especially if the clusters are finely resolved with weak separation. To give a concrete example, consider a mixed population of CD4+-only, CD8+-only, double-positive and double-negative T cells. With pval.type=&quot;all&quot;, neither Cd4 or Cd8 would be detected as subpopulation-specific markers because each gene is expressed in two subpopulations. In comparison, pval.type=&quot;any&quot; will detect both of these genes as they will be DE between at least one pair of subpopulations. If pval.type=&quot;all&quot; is too stringent yet pval.type=&quot;any&quot; is too generous, a compromise is to set pval.type=&quot;some&quot;. For each gene, we apply the Holm-Bonferroni correction across its \\(p\\)-values and take the middle-most value as the combined \\(p\\)-value. This effectively tests the global null hypothesis that at least 50% of the individual pairwise comparisons exhibit no DE. We then rank the genes by their combined \\(p\\)-values to obtain an ordered set of marker candidates. The aim is to improve the conciseness of the top markers for defining a cluster while mitigating the risk of discarding useful genes that are not DE to all other clusters. The downside is that taking this compromise position sacrifices the theoretical guarantees offered at the other two extremes. markers.pbmc.up4 &lt;- findMarkers(sce.pbmc, sce.pbmc$cluster, pval.type=&quot;some&quot;, direction=&quot;up&quot;) interesting.up4 &lt;- markers.pbmc.up4[[chosen]] interesting.up4[1:10,1:3] ## DataFrame with 10 rows and 3 columns ## p.value FDR summary.logFC ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## PF4 1.79357e-30 6.04325e-26 6.10842 ## TAGLN2 8.54344e-21 1.43931e-16 4.02798 ## SDPR 2.58318e-20 2.90126e-16 4.88092 ## NRGN 1.20651e-19 1.01630e-15 4.30117 ## PPBP 2.90774e-19 1.95947e-15 5.74738 ## TMSB4X 6.03867e-18 3.39111e-14 2.16428 ## CCL5 1.49262e-17 7.18461e-14 4.55128 ## GNG11 2.31950e-17 9.76915e-14 4.72482 ## GPX1 4.41862e-17 1.65423e-13 4.11078 ## HIST1H2AC 9.60766e-17 3.23720e-13 4.76584 In both cases, a different method is used to compute the summary effect size compared to pval.type=&quot;any&quot;. For pval.type=&quot;all&quot;, the summary log-fold change is defined as that corresponding to the pairwise comparison with the largest \\(p\\)-value, while for pval.type=&quot;some&quot;, it is defined as the log-fold change for the comparison with the middle-most \\(p\\)-value. This reflects the calculation of the combined \\(p\\)-value and avoids focusing on genes with strong changes in only one comparison. 11.3 Alternative testing regimes 11.3.1 Using the Wilcoxon rank sum test The Wilcoxon rank sum test (also known as the Wilcoxon-Mann-Whitney test, or WMW test) is another widely used method for pairwise comparisons between groups of observations. Its strength lies in the fact that it directly assesses separation between the expression distributions of different clusters. The WMW test statistic is proportional to the area-under-the-curve (AUC), i.e., the concordance probability, which is the probability of a random cell from one cluster having higher expression than a random cell from another cluster. In a pairwise comparison, AUCs of 1 or 0 indicate that the two clusters have perfectly separated expression distributions. Thus, the WMW test directly addresses the most desirable property of a candidate marker gene, while the \\(t\\) test only does so indirectly via the difference in the means and the intra-group variance. We perform WMW tests by again using the findMarkers() function, this time with test=&quot;wilcox&quot;. This returns a list of DataFrames containing ranked candidate markers for each cluster. The direction=, lfc= and pval.type= arguments can be specified and have the same interpretation as described for \\(t\\)-tests. We demonstrate below by detecting upregulated genes in each cluster with direction=&quot;up&quot;. markers.pbmc.wmw &lt;- findMarkers(sce.pbmc, test=&quot;wilcox&quot;, sce.pbmc$cluster, direction=&quot;up&quot;) names(markers.pbmc.wmw) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; To explore the results in more detail, we focus on the DataFrame for cluster 9. The interpretation of Top is the same as described for \\(t\\)-tests, and Simes’ method is again used to combine \\(p\\)-values across pairwise comparisons. If we want more focused sets, we can also change pval.type= as previously described. interesting.wmw &lt;- markers.pbmc.wmw[[chosen]] interesting.wmw[1:10,1:4] ## DataFrame with 10 rows and 4 columns ## Top p.value FDR summary.AUC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## PF4 1 3.13749e-164 1.05715e-159 0.988833 ## TMSB4X 1 5.07215e-27 2.05905e-24 0.992149 ## SDPR 2 2.12114e-145 3.57349e-141 0.955218 ## NRGN 2 1.18240e-131 7.96793e-128 0.966119 ## TAGLN2 3 1.55560e-28 6.98860e-26 0.967186 ## PPBP 3 3.57148e-134 4.01125e-130 0.932743 ## GNG11 3 2.46077e-126 1.38189e-122 0.932491 ## TUBB1 3 7.55573e-133 6.36457e-129 0.921632 ## HIST1H2AC 4 4.69094e-94 1.43688e-90 0.930973 ## ACTB 5 1.53723e-23 5.28523e-21 0.949431 The DataFrame contains the AUCs from comparing cluster 9 to every other cluster (Figure 11.3). A value greater than 0.5 indicates that the gene is upregulated in the current cluster compared to the other cluster, while values less than 0.5 correspond to downregulation. We would typically expect AUCs of 0.7-0.8 for a strongly upregulated candidate marker. best.set &lt;- interesting.wmw[interesting.wmw$Top &lt;= 5,] AUCs &lt;- getMarkerEffects(best.set, prefix=&quot;AUC&quot;) library(pheatmap) pheatmap(AUCs, breaks=seq(0, 1, length.out=21), color=viridis::viridis(21)) Figure 11.3: Heatmap of AUCs for cluster 9 compared to all other clusters. One practical advantage of the WMW test over the Welch \\(t\\)-test is that it is symmetric with respect to differences in the size of the groups being compared. This means that, all else being equal, the top-ranked genes on each side of a DE comparison will have similar expression profiles regardless of the number of cells in each group. In contrast, the \\(t\\)-test will favor genes where the larger group has the higher relative variance as this increases the estimated degrees of freedom and decreases the resulting \\(p\\)-value. This can lead to unappealing rankings when the aim is to identify genes upregulated in smaller groups. The WMW test is not completely immune the variance effects - for example, it will slightly favor detection of DEGs at low average abundance where the greater number of ties at zero deflates the approximate variance of the rank sum statistic - but this is relatively benign as the selected genes are still fairly interesting. We observe both of these effects in a comparison between alpha and gamma cells in the human pancreas data set from Lawlor et al. (2017) (Figure 11.4). View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.lawlor &lt;- LawlorPancreasData() #--- gene-annotation ---# library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] anno &lt;- select(edb, keys=rownames(sce.lawlor), keytype=&quot;GENEID&quot;, columns=c(&quot;SYMBOL&quot;, &quot;SEQNAME&quot;)) rowData(sce.lawlor) &lt;- anno[match(rownames(sce.lawlor), anno[,1]),-1] #--- quality-control ---# library(scater) stats &lt;- perCellQCMetrics(sce.lawlor, subsets=list(Mito=which(rowData(sce.lawlor)$SEQNAME==&quot;MT&quot;))) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;subsets_Mito_percent&quot;, batch=sce.lawlor$`islet unos id`) sce.lawlor &lt;- sce.lawlor[,!qc$discard] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.lawlor) sce.lawlor &lt;- computeSumFactors(sce.lawlor, clusters=clusters) sce.lawlor &lt;- logNormCounts(sce.lawlor) marker.lawlor.t &lt;- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`, direction=&quot;up&quot;, restrict=c(&quot;Alpha&quot;, &quot;Gamma/PP&quot;)) marker.lawlor.w &lt;- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`, direction=&quot;up&quot;, restrict=c(&quot;Alpha&quot;, &quot;Gamma/PP&quot;), test.type=&quot;wilcox&quot;) # Upregulated in alpha: marker.alpha.t &lt;- marker.lawlor.t$Alpha marker.alpha.w &lt;- marker.lawlor.w$Alpha marker.alpha.t &lt;- marker.alpha.t[order(marker.alpha.t$p.value),] marker.alpha.w &lt;- marker.alpha.w[order(marker.alpha.w$p.value),] chosen.alpha.t &lt;- rownames(marker.alpha.t)[1:20] chosen.alpha.w &lt;- rownames(marker.alpha.w)[1:20] u.alpha.t &lt;- setdiff(chosen.alpha.t, chosen.alpha.w) u.alpha.w &lt;- setdiff(chosen.alpha.w, chosen.alpha.t) # Upregulated in gamma: marker.gamma.t &lt;- marker.lawlor.t$`Gamma/PP` marker.gamma.w &lt;- marker.lawlor.w$`Gamma/PP` marker.gamma.t &lt;- marker.gamma.t[order(marker.gamma.t$p.value),] marker.gamma.w &lt;- marker.gamma.w[order(marker.gamma.w$p.value),] chosen.gamma.t &lt;- rownames(marker.gamma.t)[1:20] chosen.gamma.w &lt;- rownames(marker.gamma.w)[1:20] u.gamma.t &lt;- setdiff(chosen.gamma.t, chosen.gamma.w) u.gamma.w &lt;- setdiff(chosen.gamma.w, chosen.gamma.t) # Examining all uniquely detected markers in each direction. library(scater) subset &lt;- sce.lawlor[,sce.lawlor$`cell type` %in% c(&quot;Alpha&quot;, &quot;Gamma/PP&quot;)] gridExtra::grid.arrange( plotExpression(subset, x=&quot;cell type&quot;, features=u.alpha.t, ncol=2) + ggtitle(&quot;Upregulated in alpha, t-test-only&quot;), plotExpression(subset, x=&quot;cell type&quot;, features=u.alpha.w, ncol=2) + ggtitle(&quot;Upregulated in alpha, WMW-test-only&quot;), plotExpression(subset, x=&quot;cell type&quot;, features=u.gamma.t, ncol=2) + ggtitle(&quot;Upregulated in gamma, t-test-only&quot;), plotExpression(subset, x=&quot;cell type&quot;, features=u.gamma.w, ncol=2) + ggtitle(&quot;Upregulated in gamma, WMW-test-only&quot;), ncol=2 ) Figure 11.4: Distribution of expression values for alpha or gamma cell-specific markers in the GSE86469 human pancreas dataset. Each panel focuses on the genes that were uniquely ranked in the top 20 candidate markers by either the t-test or WMW test. The main disadvantage of the WMW test is that the AUCs are much slower to compute compared to \\(t\\)-statistics. This may be inconvenient for interactive analyses involving multiple iterations of marker detection. We can mitigate this to some extent by parallelizing these calculations using the BPPARAM= argument in findMarkers(). 11.3.2 Using a binomial test The binomial test identifies genes that differ in the proportion of expressing cells between clusters. (For the purposes of this section, a cell is considered to express a gene simply if it has non-zero expression for that gene.) This represents a much more stringent definition of marker genes compared to the other methods, as differences in expression between clusters are effectively ignored if both distributions of expression values are not near zero. The premise is that genes are more likely to contribute to important biological decisions if they were active in one cluster and silent in another, compared to more subtle “tuning” effects from changing the expression of an active gene. From a practical perspective, a binary measure of presence/absence is easier to validate. We perform pairwise binomial tests between clusters using the findMarkers() function with test=&quot;binom&quot;. This returns a list of DataFrames containing marker statistics for each cluster such as the Top rank and its \\(p\\)-value. Here, the effect size is reported as the log-fold change in this proportion between each pair of clusters. Large positive log-fold changes indicate that the gene is more frequently expressed in one cluster compared to the other. We focus on genes that are upregulated in each cluster compared to the others by setting direction=&quot;up&quot;. markers.pbmc.binom &lt;- findMarkers(sce.pbmc, test=&quot;binom&quot;, sce.pbmc$cluster, direction=&quot;up&quot;) names(markers.pbmc.binom) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; interesting.binom &lt;- markers.pbmc.binom[[chosen]] colnames(interesting.binom) ## [1] &quot;Top&quot; &quot;p.value&quot; &quot;FDR&quot; &quot;summary.logFC&quot; &quot;logFC.1&quot; &quot;logFC.2&quot; ## [7] &quot;logFC.3&quot; &quot;logFC.4&quot; &quot;logFC.5&quot; &quot;logFC.6&quot; &quot;logFC.7&quot; &quot;logFC.8&quot; ## [13] &quot;logFC.10&quot; &quot;logFC.11&quot; &quot;logFC.12&quot; &quot;logFC.13&quot; &quot;logFC.14&quot; &quot;logFC.15&quot; ## [19] &quot;logFC.16&quot; &quot;logFC.17&quot; &quot;logFC.18&quot; Figure 11.5 confirms that the top genes exhibit strong differences in the proportion of expressing cells in cluster 9 compared to the others. library(scater) top.genes &lt;- head(rownames(interesting.binom)) plotExpression(sce.pbmc, x=&quot;cluster&quot;, features=top.genes) Figure 11.5: Distribution of log-normalized expression values for the top 10 DE genes involving cluster 9 with the binomial test, stratified by cluster assignment and coloured by the plate of origin for each cell. The disadvantage of the binomial test is that its increased stringency can lead to the loss of good candidate markers. For example, GCG is a known marker for pancreatic alpha cells but is expressed in almost every other cell of the Lawlor et al. (2017) pancreas data (Figure 11.6) and would not be highly ranked by the binomial test. plotExpression(sce.lawlor, x=&quot;cell type&quot;, features=&quot;ENSG00000115263&quot;) Figure 11.6: Distribution of log-normalized expression values for GCG across different pancreatic cell types in the Lawlor pancreas data. Another property of the binomial test is that it will not respond to scaling normalization. Systematic differences in library size between clusters will not be considered when computing \\(p\\)-values or effect sizes. This is not necessarily problematic for marker gene detection - users can treat this as retaining information about the total RNA content, analogous to spike-in normalization in Section 7.4. 11.3.3 Using custom DE methods It is also possible to perform marker gene detection based on precomputed DE statistics, which allows us to take advantage of more sophisticated tests in dedicated DE analysis packages in the Bioconductor ecosystem. To demonstrate, consider the voom() approach from the limma package (Law et al. 2014). We first process our SingleCellExperiment to obtain a fit object as shown below. library(limma) design &lt;- model.matrix(~0 + cluster, data=colData(sce.pbmc)) colnames(design) ## [1] &quot;cluster1&quot; &quot;cluster2&quot; &quot;cluster3&quot; &quot;cluster4&quot; &quot;cluster5&quot; &quot;cluster6&quot; &quot;cluster7&quot; &quot;cluster8&quot; ## [9] &quot;cluster9&quot; &quot;cluster10&quot; &quot;cluster11&quot; &quot;cluster12&quot; &quot;cluster13&quot; &quot;cluster14&quot; &quot;cluster15&quot; &quot;cluster16&quot; ## [17] &quot;cluster17&quot; &quot;cluster18&quot; # Removing very low-abundance genes. keep &lt;- calculateAverage(sce.pbmc) &gt; 0.1 summary(keep) ## Mode FALSE TRUE ## logical 29482 4212 y &lt;- convertTo(sce.pbmc, subset.row=keep) v &lt;- voom(y, design) fit &lt;- lmFit(v, design) We then perform pairwise comparisons between clusters using the TREAT strategy (McCarthy and Smyth 2009) to test for log-fold changes that are significantly greater than 0.5. For each comparison, we store the corresponding data frame of statistics in all.results, along with the identities of the clusters involved in all.pairs. nclust &lt;- length(unique(sce.pbmc$cluster)) all.results &lt;- all.pairs &lt;- list() counter &lt;- 1L # Iterating across the first &#39;nclust&#39; coefficients in design, # and comparing them to each other in a pairwise manner. for (x in seq_len(nclust)) { for (y in seq_len(x-1L)) { con &lt;- integer(ncol(design)) con[x] &lt;- 1 con[y] &lt;- -1 fit2 &lt;- contrasts.fit(fit, con) fit2 &lt;- treat(fit2, robust=TRUE, lfc=0.5) res &lt;- topTreat(fit2, n=Inf, sort.by=&quot;none&quot;) all.results[[counter]] &lt;- res all.pairs[[counter]] &lt;- colnames(design)[c(x, y)] counter &lt;- counter+1L # Also filling the reverse comparison. res$logFC &lt;- -res$logFC all.results[[counter]] &lt;- res all.pairs[[counter]] &lt;- colnames(design)[c(y, x)] counter &lt;- counter+1L } } These custom results are consolidated into a single marker list for each cluster with the combineMarkers() function. This combines test statistics across all pairwise comparisons involving a single cluster, yielding a per-cluster DataFrame that can be interpreted in the same manner as discussed previously. all.pairs &lt;- do.call(rbind, all.pairs) combined &lt;- combineMarkers(all.results, all.pairs, pval.field=&quot;P.Value&quot;) # Inspecting results for our cluster of interest again. interesting.voom &lt;- combined[[paste0(&quot;cluster&quot;, chosen)]] colnames(interesting.voom) ## [1] &quot;Top&quot; &quot;p.value&quot; &quot;FDR&quot; &quot;summary.logFC&quot; &quot;logFC.cluster1&quot; ## [6] &quot;logFC.cluster2&quot; &quot;logFC.cluster3&quot; &quot;logFC.cluster4&quot; &quot;logFC.cluster5&quot; &quot;logFC.cluster6&quot; ## [11] &quot;logFC.cluster7&quot; &quot;logFC.cluster8&quot; &quot;logFC.cluster10&quot; &quot;logFC.cluster11&quot; &quot;logFC.cluster12&quot; ## [16] &quot;logFC.cluster13&quot; &quot;logFC.cluster14&quot; &quot;logFC.cluster15&quot; &quot;logFC.cluster16&quot; &quot;logFC.cluster17&quot; ## [21] &quot;logFC.cluster18&quot; head(interesting.voom[,1:4]) ## DataFrame with 6 rows and 4 columns ## Top p.value FDR summary.logFC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## RBP7 1 0 0 5.42205 ## LMNA 1 0 0 5.52666 ## FCRLA 1 0 0 4.51101 ## RGS18 1 0 0 5.82321 ## C2orf88 1 0 0 4.90540 ## SDPR 1 0 0 6.33236 By default, we do not use custom DE methods to perform marker detection, for several reasons. Many of these methods rely on empirical Bayes shrinkage to share information across genes in the presence of limited replication. However, this is unnecessary when there are large numbers of “replicate” cells in each group (Section 11.5.2). These methods also make stronger assumptions about the data (e.g., equal variances for linear models, the distribution of variances during empirical Bayes) that are more likely to be violated in noisy scRNA-seq contexts. From a practical perspective, they require more work to set up and take more time to run. Nonetheless, some custom methods (e.g., MAST) may provide a useful point of difference from the simpler tests, in which case they can be converted into a marker detection scheme as described above. 11.3.4 Combining multiple marker statistics On occasion, we might want to combine marker statistics from several testing regimes into a single DataFrame. This allows us to easily inspect multiple statistics at once to verify that a particular gene is a strong candidate marker. For example, a large AUC from the WMW test indicates that the expression distributions are well-separated between clusters, while the log-fold change reported with the \\(t\\)-test provides a more interpretable measure of the magnitude of the change in expression. We use the multiMarkerStats() to merge the results of separate findMarkers() calls into one DataFrame per cluster, with statistics interleaved to facilitate a direct comparison between different test regimes. combined &lt;- multiMarkerStats( t=findMarkers(sce.pbmc, sce.pbmc$cluster, direction=&quot;up&quot;), wilcox=findMarkers(sce.pbmc, test=&quot;wilcox&quot;, sce.pbmc$cluster, direction=&quot;up&quot;), binom=findMarkers(sce.pbmc, test=&quot;binom&quot;, sce.pbmc$cluster, direction=&quot;up&quot;) ) # Interleaved marker statistics from both tests for each cluster. colnames(combined[[&quot;1&quot;]]) ## [1] &quot;Top&quot; &quot;p.value&quot; &quot;FDR&quot; &quot;t.Top&quot; ## [5] &quot;wilcox.Top&quot; &quot;binom.Top&quot; &quot;t.p.value&quot; &quot;wilcox.p.value&quot; ## [9] &quot;binom.p.value&quot; &quot;t.FDR&quot; &quot;wilcox.FDR&quot; &quot;binom.FDR&quot; ## [13] &quot;t.summary.logFC&quot; &quot;wilcox.summary.AUC&quot; &quot;binom.summary.logFC&quot; &quot;t.logFC.2&quot; ## [17] &quot;wilcox.AUC.2&quot; &quot;binom.logFC.2&quot; &quot;t.logFC.3&quot; &quot;wilcox.AUC.3&quot; ## [21] &quot;binom.logFC.3&quot; &quot;t.logFC.4&quot; &quot;wilcox.AUC.4&quot; &quot;binom.logFC.4&quot; ## [25] &quot;t.logFC.5&quot; &quot;wilcox.AUC.5&quot; &quot;binom.logFC.5&quot; &quot;t.logFC.6&quot; ## [29] &quot;wilcox.AUC.6&quot; &quot;binom.logFC.6&quot; &quot;t.logFC.7&quot; &quot;wilcox.AUC.7&quot; ## [33] &quot;binom.logFC.7&quot; &quot;t.logFC.8&quot; &quot;wilcox.AUC.8&quot; &quot;binom.logFC.8&quot; ## [37] &quot;t.logFC.9&quot; &quot;wilcox.AUC.9&quot; &quot;binom.logFC.9&quot; &quot;t.logFC.10&quot; ## [41] &quot;wilcox.AUC.10&quot; &quot;binom.logFC.10&quot; &quot;t.logFC.11&quot; &quot;wilcox.AUC.11&quot; ## [45] &quot;binom.logFC.11&quot; &quot;t.logFC.12&quot; &quot;wilcox.AUC.12&quot; &quot;binom.logFC.12&quot; ## [49] &quot;t.logFC.13&quot; &quot;wilcox.AUC.13&quot; &quot;binom.logFC.13&quot; &quot;t.logFC.14&quot; ## [53] &quot;wilcox.AUC.14&quot; &quot;binom.logFC.14&quot; &quot;t.logFC.15&quot; &quot;wilcox.AUC.15&quot; ## [57] &quot;binom.logFC.15&quot; &quot;t.logFC.16&quot; &quot;wilcox.AUC.16&quot; &quot;binom.logFC.16&quot; ## [61] &quot;t.logFC.17&quot; &quot;wilcox.AUC.17&quot; &quot;binom.logFC.17&quot; &quot;t.logFC.18&quot; ## [65] &quot;wilcox.AUC.18&quot; &quot;binom.logFC.18&quot; head(combined[[&quot;1&quot;]][,1:9]) ## DataFrame with 6 rows and 9 columns ## Top p.value FDR t.Top wilcox.Top binom.Top t.p.value wilcox.p.value ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; ## TRAC 1 1.53395e-73 5.38747e-70 1 1 1 2.61642e-307 8.40991e-167 ## CD3D 2 1.59894e-73 5.38747e-70 2 2 1 7.26682e-268 1.11253e-156 ## CD3E 4 2.06967e-82 9.96220e-79 2 4 2 6.58564e-206 4.10254e-139 ## ITGB1 4 4.98826e-47 3.90871e-44 4 4 2 6.91022e-82 1.45852e-68 ## ANXA1 5 2.96038e-56 4.33683e-53 2 3 5 8.69304e-99 1.32177e-87 ## IL7R 6 3.66173e-84 2.46757e-80 1 6 1 1.44971e-151 4.30298e-119 ## binom.p.value ## &lt;numeric&gt; ## TRAC 1.53395e-73 ## CD3D 1.59894e-73 ## CD3E 2.06967e-82 ## ITGB1 4.98826e-47 ## ANXA1 2.96038e-56 ## IL7R 3.66173e-84 In addition, multiMarkerStats() will compute a number of new statistics by combining the per-regime statistics. The combined Top value is obtained by simply taking the largest Top value across all tests for a given gene, while the reported p.value is obtained by taking the largest \\(p\\)-value. Ranking on either metric focuses on genes with robust differences that are highly ranked and detected by each of the individual testing regimes. Of course, this might be considered an overly conservative approach in practice, so it is entirely permissible to re-rank the DataFrame according to the Top or p.value for an individual regime (effectively limiting the use of the other regimes’ statistics to diagnostics only). 11.4 Handling blocking factors 11.4.1 Using the block= argument Large studies may contain factors of variation that are known and not interesting (e.g., batch effects, sex differences). If these are not modelled, they can interfere with marker gene detection - most obviously by inflating the variance within each cluster, but also by distorting the log-fold changes if the cluster composition varies across levels of the blocking factor. To avoid these issues, we set the block= argument in the findMarkers() call, as demonstrated below for the 416B data set. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.416b &lt;- LunSpikeInData(which=&quot;416b&quot;) sce.416b$block &lt;- factor(sce.416b$block) #--- gene-annotation ---# library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.416b)$ENSEMBL &lt;- rownames(sce.416b) rowData(sce.416b)$SYMBOL &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SYMBOL&quot;) rowData(sce.416b)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) library(scater) rownames(sce.416b) &lt;- uniquifyFeatureNames(rowData(sce.416b)$ENSEMBL, rowData(sce.416b)$SYMBOL) #--- quality-control ---# mito &lt;- which(rowData(sce.416b)$SEQNAME==&quot;MT&quot;) stats &lt;- perCellQCMetrics(sce.416b, subsets=list(Mt=mito)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;subsets_Mt_percent&quot;, &quot;altexps_ERCC_percent&quot;), batch=sce.416b$block) sce.416b &lt;- sce.416b[,!qc$discard] #--- normalization ---# library(scran) sce.416b &lt;- computeSumFactors(sce.416b) sce.416b &lt;- logNormCounts(sce.416b) #--- variance-modelling ---# dec.416b &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;, block=sce.416b$block) chosen.hvgs &lt;- getTopHVGs(dec.416b, prop=0.1) #--- batch-correction ---# library(limma) assay(sce.416b, &quot;corrected&quot;) &lt;- removeBatchEffect(logcounts(sce.416b), design=model.matrix(~sce.416b$phenotype), batch=sce.416b$block) #--- dimensionality-reduction ---# sce.416b &lt;- runPCA(sce.416b, ncomponents=10, subset_row=chosen.hvgs, exprs_values=&quot;corrected&quot;, BSPARAM=BiocSingular::ExactParam()) set.seed(1010) sce.416b &lt;- runTSNE(sce.416b, dimred=&quot;PCA&quot;, perplexity=10) #--- clustering ---# my.dist &lt;- dist(reducedDim(sce.416b, &quot;PCA&quot;)) my.tree &lt;- hclust(my.dist, method=&quot;ward.D2&quot;) library(dynamicTreeCut) my.clusters &lt;- unname(cutreeDynamic(my.tree, distM=as.matrix(my.dist), minClusterSize=10, verbose=0)) sce.416b$cluster &lt;- factor(my.clusters) m.out &lt;- findMarkers(sce.416b, sce.416b$cluster, block=sce.416b$block, direction=&quot;up&quot;) For each gene, each pairwise comparion between clusters is performed separately in each level of the blocking factor - in this case, the plate of origin. The function will then combine \\(p\\)-values from different plates using Stouffer’s Z method to obtain a single \\(p\\)-value per pairwise comparison. (These \\(p\\)-values are further combined across comparisons to obtain a single \\(p\\)-value per gene, using either Simes’ method or an intersection-union test depending on the value of pval.type=.) This approach favours genes that exhibit consistent DE in the same direction in each plate. demo &lt;- m.out[[&quot;1&quot;]] demo[demo$Top &lt;= 5,1:4] ## DataFrame with 13 rows and 4 columns ## Top p.value FDR summary.logFC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Foxs1 1 1.37387e-12 4.35563e-10 3.07058 ## Pirb 1 2.08277e-33 1.21332e-29 5.87820 ## Myh11 1 6.44327e-47 3.00282e-42 4.38182 ## Tmsb4x 2 3.22944e-44 7.52525e-40 1.47689 ## Ctsd 2 6.78109e-38 7.90065e-34 2.89152 ## ... ... ... ... ... ## Tob1 4 6.63870e-09 1.18088e-06 2.74161 ## Pi16 4 1.69247e-32 7.88758e-29 5.76914 ## Cd53 5 1.08574e-27 2.97646e-24 5.75200 ## Alox5ap 5 1.33791e-28 4.15679e-25 1.36676 ## CBFB-MYH11-mcherry 5 3.75556e-35 3.50049e-31 3.01677 The block= argument works with all tests shown above and is robust to difference in the log-fold changes or variance between batches. However, it assumes that each pair of clusters is present in at least one batch. In scenarios where cells from two clusters never co-occur in the same batch, the comparison will be impossible and NAs will be reported in the output. 11.4.2 Using the design= argument Another approach is to define a design matrix containing the batch of origin as the sole factor. findMarkers() will then fit a linear model to the log-expression values, similar to the use of limma for bulk RNA sequencing data (Ritchie et al. 2015). This handles situations where multiple batches contain unique clusters, as comparisons can be implicitly performed via shared cell types in each batch. There is also a slight increase in power when information is shared across clusters for variance estimation. # Setting up the design matrix (we remove intercept for full rank # in the final design matrix with the cluster-specific terms). design &lt;- model.matrix(~sce.416b$block) design &lt;- design[,-1,drop=FALSE] m.alt &lt;- findMarkers(sce.416b, sce.416b$cluster, design=design, direction=&quot;up&quot;) demo &lt;- m.alt[[&quot;1&quot;]] demo[demo$Top &lt;= 5,1:4] ## DataFrame with 12 rows and 4 columns ## Top p.value FDR summary.logFC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Gm6977 1 7.15187e-24 8.77120e-21 0.810553 ## Myh11 1 4.56882e-64 2.12925e-59 4.381806 ## Tmsb4x 2 9.48997e-46 2.21135e-41 1.478213 ## Cd63 2 1.80446e-15 7.85933e-13 0.813016 ## Cd200r3 2 2.40861e-45 3.74170e-41 6.684003 ## ... ... ... ... ... ## Actb 4 5.61751e-36 2.90887e-32 0.961762 ## Ctsd 4 2.08646e-42 2.43094e-38 2.893014 ## Fth1 4 1.83949e-23 2.14319e-20 0.797407 ## Ccl9 5 1.75378e-30 3.71514e-27 5.396347 ## CBFB-MYH11-mcherry 5 9.09026e-39 8.47285e-35 3.017758 The use of a linear model makes some strong assumptions, necessitating some caution when interpreting the results. If the batch effect is not consistent across clusters, the variance will be inflated and the log-fold change estimates will be distorted. Variances are also assumed to be equal across groups, which is not true in general. In particular, the presence of clusters in which a gene is silent will shrink the residual variance towards zero, preventing the model from penalizing genes with high variance in other clusters. Thus, we generally recommend the use of block= where possible. 11.5 Invalidity of \\(p\\)-values 11.5.1 From data snooping All of our DE strategies for detecting marker genes between clusters are statistically flawed to some extent. The DE analysis is performed on the same data used to obtain the clusters, which represents “data dredging” (also known as fishing or data snooping). The hypothesis of interest - are there differences between clusters? - is formulated from the data, so we are more likely to get a positive result when we re-use the data set to test that hypothesis. The practical effect of data dredging is best illustrated with a simple simulation. We simulate i.i.d. normal values, perform \\(k\\)-means clustering and test for DE between clusters of cells with findMarkers(). The resulting distribution of \\(p\\)-values is heavily skewed towards low values (Figure 11.7). Thus, we can detect “significant” differences between clusters even in the absence of any real substructure in the data. This effect arises from the fact that clustering, by definition, yields groups of cells that are separated in expression space. Testing for DE genes between clusters will inevitably yield some significant results as that is how the clusters were defined. library(scran) set.seed(0) y &lt;- matrix(rnorm(100000), ncol=200) clusters &lt;- kmeans(t(y), centers=2)$cluster out &lt;- findMarkers(y, clusters) hist(out[[1]]$p.value, col=&quot;grey80&quot;, xlab=&quot;p-value&quot;) Figure 11.7: Distribution of \\(p\\)-values from a DE analysis between two clusters in a simulation with no true subpopulation structure. For marker gene detection, this effect is largely harmless as the \\(p\\)-values are used only for ranking. However, it becomes an issue when the \\(p\\)-values are used to define “significant differences” between clusters with respect to an error rate threshold. Meaningful interpretation of error rates require consideration of the long-run behaviour, i.e., the rate of incorrect rejections if the experiment were repeated many times. The concept of statistical significance for differences between clusters is not applicable if clusters and their interpretations are not stably reproducible across (hypothetical) replicate experiments. 11.5.2 Nature of replication The naive application of DE analysis methods will treat counts from the same cluster of cells as replicate observations. This is not the most relevant level of replication when cells are derived from the same biological sample (i.e., cell culture, animal or patient). DE analyses that treat cells as replicates fail to properly model the sample-to-sample variability (A. T. L. Lun and Marioni 2017). The latter is arguably the more important level of replication as different samples will necessarily be generated if the experiment is to be replicated. Indeed, the use of cells as replicates only masks the fact that the sample size is actually one in an experiment involving a single biological sample. This reinforces the inappropriateness of using the marker gene \\(p\\)-values to perform statistical inference. We strongly recommend selecting some markers for use in validation studies with an independent replicate population of cells. A typical strategy is to identify a corresponding subset of cells that express the upregulated markers and do not express the downregulated markers. Ideally, a different technique for quantifying expression would also be used during validation, e.g., fluorescent in situ hybridisation or quantitative PCR. This confirms that the subpopulation genuinely exists and is not an artifact of the scRNA-seq protocol or the computational analysis. 11.6 Further comments One consequence of the DE analysis strategy is that markers are defined relative to subpopulations in the same dataset. Biologically meaningful genes will not be detected if they are expressed uniformly throughout the population, e.g., T cell markers will not be detected if only T cells are present in the dataset. In practice, this is usually only a problem when the experimental data are provided without any biological context - certainly, we would hope to have some a priori idea about what cells have been captured. For most applications, it is actually desirable to avoid detecting such genes as we are interested in characterizing heterogeneity within the context of a known cell population. Continuing from the example above, the failure to detect T cell markers is of little consequence if we already know we are working with T cells. Nonetheless, if “absolute” identification of cell types is necessary, we discuss some strategies for doing so in Chapter 12. Alternatively, marker detection can be performed by treating gene expression as a predictor variable for cluster assignment. For a pair of clusters, we can find genes that discriminate between them by performing inference with a logistic model where the outcome for each cell is whether it was assigned to the first cluster and the lone predictor is the expression of each gene. Treating the cluster assignment as the dependent variable is more philosophically pleasing in some sense, as the clusters are indeed defined from the expression data rather than being known in advance. (Note that this does not solve the data snooping problem.) In practice, this approach effectively does the same task as a Wilcoxon rank sum test in terms of quantifying separation between clusters. Logistic models have the advantage in that they can easily be extended to block on multiple nuisance variables, though this is not typically necessary in most use cases. Even more complex strategies use machine learning methods to determine which features contribute most to successful cluster classification, but this is probably unnecessary for routine analyses. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] limma_3.43.0 scater_1.15.12 ggplot2_3.2.1 [4] pheatmap_1.0.12 scran_1.15.14 SingleCellExperiment_1.9.1 [7] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [10] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [13] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [16] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [19] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] viridis_0.5.1 edgeR_3.29.0 BiocSingular_1.3.1 [4] viridisLite_0.3.0 DelayedMatrixStats_1.9.0 assertthat_0.2.1 [7] statmod_1.4.32 highr_0.8 BiocManager_1.30.10 [10] dqrng_0.2.1 GenomeInfoDbData_1.2.2 vipor_0.4.5 [13] yaml_2.2.0 pillar_1.4.3 lattice_0.20-38 [16] glue_1.3.1 digest_0.6.23 RColorBrewer_1.1-2 [19] XVector_0.27.0 colorspace_1.4-1 cowplot_1.0.0 [22] htmltools_0.4.0 Matrix_1.2-18 pkgconfig_2.0.3 [25] bookdown_0.16 zlibbioc_1.33.0 purrr_0.3.3 [28] scales_1.1.0 processx_3.4.1 tibble_2.1.3 [31] farver_2.0.1 withr_2.1.2 lazyeval_0.2.2 [34] magrittr_1.5 crayon_1.3.4 evaluate_0.14 [37] ps_1.3.0 beeswarm_0.2.3 tools_4.0.0 [40] lifecycle_0.1.0 stringr_1.4.0 munsell_0.5.0 [43] locfit_1.5-9.1 irlba_2.3.3 callr_3.4.0 [46] compiler_4.0.0 rsvd_1.0.2 rlang_0.4.2 [49] grid_4.0.0 RCurl_1.95-4.12 BiocNeighbors_1.5.1 [52] igraph_1.2.4.2 labeling_0.3 bitops_1.0-6 [55] rmarkdown_2.0 gtable_0.3.0 R6_2.4.1 [58] gridExtra_2.3 knitr_1.26 dplyr_0.8.3 [61] stringi_1.4.3 ggbeeswarm_0.6.0 Rcpp_1.0.3 [64] tidyselect_0.2.5 xfun_0.11 Bibliography "],
["cell-type-annotation.html", "Chapter 12 Cell type annotation 12.1 Motivation 12.2 Assigning cell labels from reference data 12.3 Assigning cell labels from gene sets 12.4 Assigning cluster labels from markers 12.5 Computing gene set activities Session Info", " Chapter 12 Cell type annotation .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 12.1 Motivation The most challenging task in scRNA-seq data analysis is arguably the interpretation of the results. Obtaining clusters of cells is fairly straightforward, but it is more difficult to determine what biological state is represented by each of those clusters. Doing so requires us to bridge the gap between the current dataset and prior biological knowledge, and the latter is not always available in a consistent and quantitative manner3. Indeed, even the concept of a “cell type” is not clearly defined, with most practitioners possessing a “I’ll know it when I see it” intuition that is not amenable to computational analysis. As such, intepretation of scRNA-seq data is often manual and a common bottleneck in the analysis workflow. To expedite this step, we can use various computational approaches that exploit prior information to assign meaning to an uncharacterized scRNA-seq dataset. The most obvious sources of prior information are the curated gene sets associated with particular biological processes, e.g., from the Gene Ontology (GO) or the Kyoto Encyclopedia of Genes and Genomes (KEGG) collections. Alternatively, we can directly compare our expression profiles to published reference datasets where each sample or cell has already been annotated with its putative biological state by domain experts. Here, we will demonstrate both approaches with several different scRNA-seq datasets. 12.2 Assigning cell labels from reference data 12.2.1 Overview A conceptually straightforward annotation approach is to compare the single-cell expression profiles with previously annotated reference datasets. Labels can then be assigned to each cell in our uncharacterized test dataset based on the most similar reference sample(s), for some definition of “similar”. This is a standard classification challenge that can be tackled by standard machine learning techniques such as random forests and support vector machines. Any published and labelled RNA-seq dataset (bulk or single-cell) can be used as a reference, though its reliability depends greatly on the expertise of the original authors who assigned the labels in the first place. In this section, we will demonstrate the use of the SingleR method (Aran et al. 2019) for cell type annotation. This method assigns labels to cells based on the reference samples with the highest Spearman rank correlations, and thus can be considered a rank-based variant of \\(k\\)-nearest-neighbor classification. To reduce noise, SingleR identifies marker genes between pairs of labels and computes the correlation using only those markers. It also performs a fine-tuning step for each cell where calculation of the correlations is repeated with just the marker genes for the top-scoring labels. This aims to resolve any ambiguity between those labels by removing noise from irrelevant markers for other labels. 12.2.2 Using the in-built references SingleR contains a number of built-in reference datasets, mostly assembled from bulk RNA-seq or microarray data of sorted cell types. These built-in references are often good enough for most applications, provided that they contain the cell types that are expected in the test population. We will demonstrate on the 10X PBMC dataset using a reference constructed from Blueprint and ENCODE data (Martens and Stunnenberg 2013; The ENCODE Project Consortium 2012). View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) #--- gene-annotation ---# library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) #--- cell-detection ---# set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) #--- variance-modelling ---# set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop=0.1) #--- dimensionality-reduction ---# set.seed(10000) sce.pbmc &lt;- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc) set.seed(100000) sce.pbmc &lt;- runTSNE(sce.pbmc, dimred=&quot;PCA&quot;) set.seed(1000000) sce.pbmc &lt;- runUMAP(sce.pbmc, dimred=&quot;PCA&quot;) #--- clustering ---# g &lt;- buildSNNGraph(sce.pbmc, k=10, use.dimred = &#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership sce.pbmc$cluster &lt;- factor(clust) sce.pbmc ## class: SingleCellExperiment ## dim: 33694 3922 ## metadata(1): Samples ## assays(2): counts logcounts ## rownames(33694): RP11-34P13.3 FAM138A ... AC213203.1 FAM231B ## rowData names(2): ID Symbol ## colnames(3922): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ... TTTGTCACAGGTCCAC-1 ## TTTGTCATCCCAAGAT-1 ## colData names(3): Sample Barcode cluster ## reducedDimNames(3): PCA TSNE UMAP ## spikeNames(0): ## altExpNames(0): We label our PBMCs using the SingleR() function with the main cell type labels in the reference. This returns a DataFrame where each row corresponds to a cell in the test dataset and contains its label assignments. Alternatively, we could use the labels in ref$label.fine, which provide more resolution at the cost of speed and increased ambiguity in the assignments. library(SingleR) ref &lt;- BlueprintEncodeData() pred &lt;- SingleR(test=sce.pbmc, ref=ref, labels=ref$label.main) table(pred$labels) ## ## B-cells CD4+ T-cells CD8+ T-cells DC Eosinophils Erythrocytes HSC ## 527 750 1257 1 1 4 15 ## Monocytes NK cells ## 1112 255 We inspect the results using a heatmap of the per-cell and label scores (Figure 12.1). Ideally, each cell should exhibit a high score in one label relative to all of the others, indicating that the assignment to that label was unambiguous. This is largely the case for monocytes and B cells, whereas we see more ambiguity between CD4+ and CD8+ T cells (and to a lesser extent, NK cells). plotScoreHeatmap(pred) Figure 12.1: Heatmap of the assignment score for each cell (column) and label (row). Scores are shown before any fine-tuning and are normalized to [0, 1] within each cell. SingleR() will attempt to prune out low-quality assignments by marking them as NA. This is done based on the difference \\(\\Delta_{med}\\) of the assigned label’s score from the median score within each cell. Small \\(\\Delta_{med}\\) values indicate that the cell assignment was so uncertain that the reported label is not much better than the bulk of other labels in the reference. We set a minimum threshold on the acceptable \\(\\Delta_{med}\\) using an outlier-based approach for each label, where labels with \\(\\Delta_{med}\\) that are substantially lower than the majority of values for a given label are marked as NA (Figure 12.2). If necessary, more control over the pruning can be achieved by supplying custom parameters to the pruneScores() function. sum(is.na(pred$pruned.labels)) ## [1] 81 plotScoreDistribution(pred) Figure 12.2: Distribution of the per-cell \\(\\Delta_{med}\\) for each label. Each panel corresponds to one label and stratifies the population into cells that were assigned to that label and not pruned; cells that were assigned to that label and pruned out; and cells that were not assigned to that label. We compare the assignments with the clustering results to determine the identity of each cluster. Ideally, clusters and labels would have a 1:1 relationship, though some nesting is likely depending on the resolution of the clustering algorithm. For example, several clusters are nested within the monocyte and B cell labels (Figure 12.3), suggesting the the former represent finer subdivisions within the latter. Interestingly, our clustering does not effectively distinguish between CD4+ and CD8+ T cell labels. We attribute this to the presence of other factors of heterogeneity within the T cell subpopulation that have a stronger influence on unsupervised methods than the a priori expected CD4/CD8 distinction. tab &lt;- table(Assigned=pred$pruned.labels, Cluster=sce.pbmc$cluster) # Adding a pseudo-count of 10 to avoid strong color jumps with just 1 cell. library(pheatmap) pheatmap(log2(tab+10), color=colorRampPalette(c(&quot;white&quot;, &quot;blue&quot;))(101)) Figure 12.3: Heatmap of the distribution of cells across labels and clusters in the 10X PBMC dataset. Color scale is reported in the log10-number of cells for each cluster-label combination. This episode highlights some of the differences between reference-based annotation and unsupervised clustering. The former explicitly focuses on aspects of the data that are known to be interesting, simplifying the process of biological interpretation. However, the cost is that the downstream analysis is restricted by the diversity and resolution of the available labels. We suggest applying both strategies and, if major disagreements are present between reference label and cluster assignments, using those discrepancies as the basis for further investigation to discover novel effects. 12.2.3 Using custom references It is also straightforward to apply SingleR to user-supplied reference datasets. This is most obviously useful when we have an existing dataset that was previously (manually) annotated, and we want to use that knowledge to annotate a new dataset in an automated manner. To illustrate, we will use the Muraro et al. (2016) human pancreas dataset as our reference. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.muraro &lt;- MuraroPancreasData() #--- gene-annotation ---# library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] gene.symb &lt;- sub(&quot;__chr.*$&quot;, &quot;&quot;, rownames(sce.muraro)) gene.ids &lt;- mapIds(edb, keys=gene.symb, keytype=&quot;SYMBOL&quot;, column=&quot;GENEID&quot;) # Removing duplicated genes or genes without Ensembl IDs. keep &lt;- !is.na(gene.ids) &amp; !duplicated(gene.ids) sce.muraro &lt;- sce.muraro[keep,] rownames(sce.muraro) &lt;- gene.ids[keep] #--- quality-control ---# library(scater) stats &lt;- perCellQCMetrics(sce.muraro) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.muraro$donor, subset=sce.muraro$donor!=&quot;D28&quot;) sce.muraro &lt;- sce.muraro[,!qc$discard] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.muraro) sce.muraro &lt;- computeSumFactors(sce.muraro, clusters=clusters) sce.muraro &lt;- logNormCounts(sce.muraro) sce.muraro ## class: SingleCellExperiment ## dim: 16940 2299 ## metadata(0): ## assays(2): counts logcounts ## rownames(16940): ENSG00000268895 ENSG00000121410 ... ENSG00000159840 ENSG00000074755 ## rowData names(2): symbol chr ## colnames(2299): D28-1_1 D28-1_2 ... D30-8_93 D30-8_94 ## colData names(3): label donor plate ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): ERCC sce.muraro &lt;- sce.muraro[,!is.na(sce.muraro$label) &amp; sce.muraro$label!=&quot;unclear&quot;] table(sce.muraro$label) ## ## acinar alpha beta delta duct endothelial epsilon mesenchymal ## 217 795 442 189 239 18 3 80 ## pp ## 96 Our aim is to assign labels to our test dataset from Segerstolpe et al. (2016). We use the same call to SingleR() but with de.method=&quot;wilcox&quot; to identify markers via pairwise Wilcoxon ranked sum tests between labels in the reference dataset. This re-uses the same machinery from Chapter 11, and indeed, further options to fine-tune the test procedure can be passed via the de.args argument. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.seger &lt;- SegerstolpePancreasData() #--- gene-annotation ---# library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] symbols &lt;- rowData(sce.seger)$symbol ens.id &lt;- mapIds(edb, keys=symbols, keytype=&quot;SYMBOL&quot;, column=&quot;GENEID&quot;) ens.id &lt;- ifelse(is.na(ens.id), symbols, ens.id) # Removing duplicated rows. keep &lt;- !duplicated(ens.id) sce.seger &lt;- sce.seger[keep,] rownames(sce.seger) &lt;- ens.id[keep] #--- sample-annotation ---# emtab.meta &lt;- colData(sce.seger)[,c(&quot;cell type&quot;, &quot;individual&quot;, &quot;single cell well quality&quot;)] colnames(emtab.meta) &lt;- c(&quot;CellType&quot;, &quot;Donor&quot;, &quot;Quality&quot;) colData(sce.seger) &lt;- emtab.meta sce.seger$CellType &lt;- gsub(&quot; cell&quot;, &quot;&quot;, sce.seger$CellType) sce.seger$CellType &lt;- paste0( toupper(substr(sce.seger$CellType, 1, 1)), substring(sce.seger$CellType, 2)) #--- quality-control ---# low.qual &lt;- sce.seger$Quality == &quot;low quality cell&quot; library(scater) stats &lt;- perCellQCMetrics(sce.seger) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.seger$Donor, subset=!sce.seger$Donor %in% c(&quot;HP1504901&quot;, &quot;HP1509101&quot;)) sce.seger &lt;- sce.seger[,!(qc$discard | low.qual)] #--- normalization ---# library(scran) clusters &lt;- quickCluster(sce.seger) sce.seger &lt;- computeSumFactors(sce.seger, clusters=clusters) sce.seger &lt;- logNormCounts(sce.seger) pred.seger &lt;- SingleR(test=sce.seger, ref=sce.muraro, labels=sce.muraro$label, de.method=&quot;wilcox&quot;) table(pred.seger$labels) ## ## acinar alpha beta delta duct endothelial epsilon mesenchymal ## 188 889 279 105 385 17 5 53 ## pp ## 169 As it so happens, we are in the fortunate position where our test dataset also contains independently defined labels. We see strong consistency between the two sets of labels (Figure 12.4), indicating that our automatic annotation is comparable to that generated manually by domain experts. tab &lt;- table(pred.seger$pruned.labels, sce.seger$CellType) library(pheatmap) pheatmap(log2(tab+10), color=colorRampPalette(c(&quot;white&quot;, &quot;blue&quot;))(101)) Figure 12.4: Heatmap of the confusion matrix between the predicted labels (rows) and the independently defined labels (columns) in the Segerstolpe dataset. The color is proportinal to the log-transformed number of cells with a given combination of labels from each set. An interesting question is - given a single-cell reference dataset, is it better to use it directly or convert it to pseudo-bulk values? A single-cell reference preserves the “shape” of the subpopulation in high-dimensional expression space, potentially yielding more accurate predictions when the differences between labels are subtle (or at least capturing ambiguity more accurately to avoid grossly incorrect predictions). However, it also requires more computational work to assign each cell in the test dataset. We tend to prefer using a single-cell reference directly when one is available, though it is unlikely to make much difference when the labels are well-separated. 12.3 Assigning cell labels from gene sets A related strategy is to explicitly identify sets of marker genes that are highly expressed in each individual cell. This does not require matching of individual cells to the expression values of the reference dataset, which is faster and more convenient when only the identities of the markers are available. We demonstrate this approach using neuronal cell type markers derived from the Zeisel et al. (2015) study. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.zeisel &lt;- ZeiselBrainData() sce.zeisel &lt;- sce.zeisel[rowData(sce.zeisel)$featureType!=&quot;repeat&quot;,] library(scater) sce.zeisel &lt;- aggregateAcrossFeatures(sce.zeisel, id=sub(&quot;_loc[0-9]+$&quot;, &quot;&quot;, rownames(sce.zeisel))) #--- gene-annotation ---# library(org.Mm.eg.db) ensembl &lt;- mapIds(org.Mm.eg.db, keys=rownames(sce.zeisel), keytype=&quot;SYMBOL&quot;, column=&quot;ENSEMBL&quot;) rowData(sce.zeisel)$ENSEMBL &lt;- ensembl #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.zeisel, subsets=list( Mt=rowData(sce.zeisel)$featureType==&quot;mito&quot;)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;altexps_ERCC_percent&quot;, &quot;subsets_Mt_percent&quot;)) sce.zeisel &lt;- sce.zeisel[,!qc$discard] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.zeisel) sce.zeisel &lt;- computeSumFactors(sce.zeisel, cluster=clusters) sce.zeisel &lt;- logNormCounts(sce.zeisel) library(scran) wilcox.z &lt;- pairwiseWilcox(logcounts(sce.zeisel), sce.zeisel$level1class, lfc=1, direction=&quot;up&quot;) markers.z &lt;- getTopMarkers(wilcox.z$statistics, wilcox.z$pairs, pairwise=FALSE, n=50) lengths(markers.z) ## astrocytes_ependymal endothelial-mural interneurons microglia ## 79 83 118 69 ## oligodendrocytes pyramidal CA1 pyramidal SS ## 81 125 149 Our test dataset will be another brain scRNA-seq experiment from Tasic et al. (2016). library(scRNAseq) sce.tasic &lt;- TasicBrainData() sce.tasic ## class: SingleCellExperiment ## dim: 24058 1809 ## metadata(0): ## assays(1): counts ## rownames(24058): 0610005C13Rik 0610007C21Rik ... mt_X57780 tdTomato ## rowData names(0): ## colnames(1809): Calb2_tdTpositive_cell_1 Calb2_tdTpositive_cell_2 ... Rbp4_CTX_250ng_2 ## Trib2_CTX_250ng_1 ## colData names(13): sample_title mouse_line ... secondary_type aibs_vignette_id ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): ERCC We use the AUCell package to identify marker sets that are highly expressed in each cell. This method ranks genes by their expression values within each cell and constructs a response curve of the number of genes from each marker set that are present with increasing rank. It then computes the area under the curve (AUC) for each marker set, quantifying the enrichment of those markers among the most highly expressed genes in that cell. This is roughly similar to performing a Wilcoxon rank sum test between genes in and outside of the set, but involving only the top ranking genes by expression in each cell. library(GSEABase) all.sets &lt;- lapply(names(markers.z), function(x) { GeneSet(markers.z[[x]], setName=x) }) all.sets &lt;- GeneSetCollection(all.sets) library(AUCell) rankings &lt;- AUCell_buildRankings(counts(sce.tasic), plotStats=FALSE, verbose=FALSE) cell.aucs &lt;- AUCell_calcAUC(all.sets, rankings) results &lt;- t(assay(cell.aucs)) head(results) ## gene sets ## cells astrocytes_ependymal endothelial-mural interneurons microglia ## Calb2_tdTpositive_cell_1 0.1387 0.04264 0.5306 0.04845 ## Calb2_tdTpositive_cell_2 0.1366 0.04885 0.4538 0.02683 ## Calb2_tdTpositive_cell_3 0.1087 0.07270 0.3459 0.03583 ## Calb2_tdTpositive_cell_4 0.1322 0.04993 0.5113 0.05388 ## Calb2_tdTpositive_cell_5 0.1513 0.07161 0.4930 0.06656 ## Calb2_tdTpositive_cell_6 0.1342 0.09161 0.3378 0.03201 ## gene sets ## cells oligodendrocytes pyramidal CA1 pyramidal SS ## Calb2_tdTpositive_cell_1 0.1318 0.2318 0.3477 ## Calb2_tdTpositive_cell_2 0.1211 0.2063 0.2762 ## Calb2_tdTpositive_cell_3 0.1567 0.3219 0.5244 ## Calb2_tdTpositive_cell_4 0.1481 0.2547 0.3506 ## Calb2_tdTpositive_cell_5 0.1386 0.2088 0.3010 ## Calb2_tdTpositive_cell_6 0.1553 0.4011 0.5393 We assign cell type identity to each cell in the test dataset by taking the marker set with the top AUC as the label for that cell. Our new labels mostly agree with the original annotation from Tasic et al. (2016), which is encouraging. The only exception involves misassignment of oligodendrocyte precursors to astrocytes, which may be understandable given that they are derived from a common lineage. In the absence of prior annotation, a more general diagnostic check is to compare the assigned labels to cluster identities, under the expectation that most cells of a single cluster would have the same label (or, if multiple labels are present, they should at least represent closely related cell states). new.labels &lt;- colnames(results)[max.col(results)] tab &lt;- table(new.labels, sce.tasic$broad_type) tab ## ## new.labels Astrocyte Endothelial Cell GABA-ergic Neuron Glutamatergic Neuron Microglia ## astrocytes_ependymal 43 2 0 0 0 ## endothelial-mural 0 27 0 0 0 ## interneurons 0 0 759 2 0 ## microglia 0 0 0 0 22 ## oligodendrocytes 0 0 1 0 0 ## pyramidal SS 0 0 1 810 0 ## ## new.labels Oligodendrocyte Oligodendrocyte Precursor Cell Unclassified ## astrocytes_ependymal 0 20 4 ## endothelial-mural 0 0 2 ## interneurons 0 0 15 ## microglia 0 0 1 ## oligodendrocytes 38 2 0 ## pyramidal SS 0 0 60 Another simple diagnostic metric is the difference \\(\\Delta_{AUC}\\) between the maximum and median AUCs for each cell. An umambiguous assignment should manifest as a large \\(\\Delta_{AUC}\\) for that cell (Figure 12.5), while small differences indicate that the assignment is uncertain. If necessary, we can remove uncertain assignments by applying a minimum threshold on the \\(\\Delta_{AUC}\\), e.g., to achieve greater agreement with the clustering results or prior annotation. The example below identifies small outlier \\(\\Delta_{AUC}\\) values under the assumption that most cells are correctly assigned and that there is only modest heterogeneity within each label. library(scater) library(DelayedMatrixStats) deltas &lt;- rowMaxs(results) - rowMedians(results) discard &lt;- isOutlier(deltas, type=&quot;lower&quot;, batch=new.labels) table(new.labels[discard]) ## ## astrocytes_ependymal endothelial-mural interneurons oligodendrocytes ## 24 1 7 10 ## pyramidal SS ## 16 par(mar=c(10,4,1,1)) boxplot(split(deltas, new.labels), las=2) points(attr(discard, &quot;thresholds&quot;)[1,], col=&quot;red&quot;, pch=4, cex=2) Figure 12.5: Distribution of differences between the maximum and median AUCs for each cell, stratified by the assigned label. The red cross indicates the threshold below which outliers are pruned. Interpretation of the AUCell results is most straightforward when the marker sets are mutually exclusive, as shown above for the cell type markers. In other applications, one might consider computing AUCs for gene sets associated with signalling or metabolic pathways. It is likely that multiple pathways will be active in any given cell, and it is tempting to use the AUCs to quantify this activity for comparison across cells. However, such comparisons must be interpreted with much caution as the AUCs are competitive values - any increase in one pathway’s activity will naturally reduce the AUCs for all other pathways, potentially resulting in spurious differences across the population. As we mentioned previously, the advantage of the AUCell approach is that it does not require reference expression values. This is particularly useful when dealing with gene sets derived from the literature or other qualitative forms of biological knowledge. For example, we might instead use single-cell signatures defined from MSigDB, obtained as shown below. # Downloading the signatures and caching them locally. library(BiocFileCache) bfc &lt;- BiocFileCache(ask=FALSE) scsig.path &lt;- bfcrpath(bfc, file.path(&quot;http://software.broadinstitute.org&quot;, &quot;gsea/msigdb/supplemental/scsig.all.v1.0.symbols.gmt&quot;)) scsigs &lt;- getGmt(scsig.path) The flipside is that information on relative expression is lost when only the marker identities are used. The net effect of ignoring expression values is difficult to predict; for example, it may reduce performance for resolving more subtle cell types, but may also improve performance if the per-cell expression was too noisy to be useful. Performance is also highly dependent on the gene sets themselves, which may not be defined in the same context in which they are used. For example, applying all of the MSigDB signatures on the Muraro dataset is rather disappointing (Figure 12.6), while restricting to the subset of pancreas signatures is more promising. muraro.mat &lt;- counts(sce.muraro) rownames(muraro.mat) &lt;- rowData(sce.muraro)$symbol muraro.rankings &lt;- AUCell_buildRankings(muraro.mat, plotStats=FALSE, verbose=FALSE) # Applying MsigDB to the Muraro dataset, because it&#39;s human: scsig.aucs &lt;- AUCell_calcAUC(scsigs, muraro.rankings) scsig.results &lt;- t(assay(scsig.aucs)) full.labels &lt;- colnames(scsig.results)[max.col(scsig.results)] tab &lt;- table(full.labels, sce.muraro$label) fullheat &lt;- pheatmap(log10(tab+10), color=viridis::viridis(100), silent=TRUE) # Restricting to the subset of Muraro-derived gene sets: scsigs.sub &lt;- scsigs[grep(&quot;Pancreas&quot;, names(scsigs))] sub.aucs &lt;- AUCell_calcAUC(scsigs.sub, muraro.rankings) sub.results &lt;- t(assay(sub.aucs)) sub.labels &lt;- colnames(sub.results)[max.col(sub.results)] tab &lt;- table(sub.labels, sce.muraro$label) subheat &lt;- pheatmap(log10(tab+10), color=viridis::viridis(100), silent=TRUE) gridExtra::grid.arrange(fullheat[[4]], subheat[[4]]) Figure 12.6: Heatmaps of the log-number of cells with each combination of known labels (columns) and assigned MSigDB signatures (rows) in the Muraro data set. The signature assigned to each cell was defined as that with the highest AUC across all (top) or all pancreas-related signatures (bottom). 12.4 Assigning cluster labels from markers Yet another strategy for annotation is to perform a gene set enrichment analysis on the marker genes defining each cluster. This identifies the pathways and processes that are (relatively) active in each cluster based on upregulation of the associated genes compared to other clusters. We demonstrate on the mouse mammary dataset from Bach et al. (2017), using markers that are identified by findMarkers() as being upregulated at a log-fold change threshold of 1. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.mam &lt;- BachMammaryData(samples=&quot;G_1&quot;) #--- gene-annotation ---# library(scater) rownames(sce.mam) &lt;- uniquifyFeatureNames( rowData(sce.mam)$Ensembl, rowData(sce.mam)$Symbol) library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.mam)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rowData(sce.mam)$Ensembl, keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) #--- quality-control ---# is.mito &lt;- rowData(sce.mam)$SEQNAME == &quot;MT&quot; stats &lt;- perCellQCMetrics(sce.mam, subsets=list(Mito=which(is.mito))) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;subsets_Mito_percent&quot;) sce.mam &lt;- sce.mam[,!qc$discard] #--- normalization ---# library(scran) set.seed(101000110) clusters &lt;- quickCluster(sce.mam) sce.mam &lt;- computeSumFactors(sce.mam, clusters=clusters) sce.mam &lt;- logNormCounts(sce.mam) #--- variance-modelling ---# set.seed(00010101) dec.mam &lt;- modelGeneVarByPoisson(sce.mam) top.mam &lt;- getTopHVGs(dec.mam, prop=0.1) #--- dimensionality-reduction ---# library(BiocSingular) set.seed(101010011) sce.mam &lt;- denoisePCA(sce.mam, technical=dec.mam, subset.row=top.mam) sce.mam &lt;- runTSNE(sce.mam, dimred=&quot;PCA&quot;) #--- clustering ---# snn.gr &lt;- buildSNNGraph(sce.mam, use.dimred=&quot;PCA&quot;, k=25) sce.mam$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) markers.mam &lt;- findMarkers(sce.mam, sce.mam$cluster, direction=&quot;up&quot;, lfc=1) As an example, we obtain annotations for the marker genes that define cluster 2. We will use gene sets defined by the Gene Ontology (GO) project, which describe a comprehensive range of biological processes and functions. We define our subset of relevant marker genes at a FDR of 5% and apply the goana() function from the limma package. This performs a hypergeometric test to identify GO terms that are overrepresented in our marker subset. (The log-fold change threshold mentioned above is useful here, as it avoids including an excessive number of genes from the overpowered nature of per-cell DE comparisons.) chosen &lt;- &quot;2&quot; cur.markers &lt;- markers.mam[[chosen]] is.de &lt;- cur.markers$FDR &lt;= 0.05 summary(is.de) ## Mode FALSE TRUE ## logical 27819 179 # goana() requires Entrez IDs, some of which map to multiple # symbols - hence the unique() in the call below. library(org.Mm.eg.db) entrez.ids &lt;- mapIds(org.Mm.eg.db, keys=rownames(cur.markers), column=&quot;ENTREZID&quot;, keytype=&quot;SYMBOL&quot;) library(limma) go.out &lt;- goana(unique(entrez.ids[is.de]), species=&quot;Mm&quot;, universe=unique(entrez.ids)) # Only keeping biological process terms that are not overly general. go.out &lt;- go.out[order(go.out$P.DE),] go.useful &lt;- go.out[go.out$Ont==&quot;BP&quot; &amp; go.out$N &lt;= 200,] head(go.useful, 20) ## Term Ont N DE P.DE ## GO:0006641 triglyceride metabolic process BP 96 10 1.954e-09 ## GO:0006119 oxidative phosphorylation BP 86 9 1.233e-08 ## GO:0006639 acylglycerol metabolic process BP 119 10 1.598e-08 ## GO:0006638 neutral lipid metabolic process BP 121 10 1.877e-08 ## GO:0042775 mitochondrial ATP synthesis coupled electron transport BP 51 7 8.011e-08 ## GO:0042773 ATP synthesis coupled electron transport BP 52 7 9.202e-08 ## GO:0022408 negative regulation of cell-cell adhesion BP 184 11 1.037e-07 ## GO:0035148 tube formation BP 173 10 5.460e-07 ## GO:0050729 positive regulation of inflammatory response BP 134 9 5.819e-07 ## GO:0022904 respiratory electron transport chain BP 71 7 8.152e-07 ## GO:0022900 electron transport chain BP 75 7 1.188e-06 ## GO:0045333 cellular respiration BP 151 9 1.585e-06 ## GO:0071404 cellular response to low-density lipoprotein particle stimulus BP 15 4 3.364e-06 ## GO:0019432 triglyceride biosynthetic process BP 34 5 4.344e-06 ## GO:0046460 neutral lipid biosynthetic process BP 37 5 6.687e-06 ## GO:0046463 acylglycerol biosynthetic process BP 37 5 6.687e-06 ## GO:1903707 negative regulation of hemopoiesis BP 145 8 1.078e-05 ## GO:0019915 lipid storage BP 70 6 1.160e-05 ## GO:2001198 regulation of dendritic cell differentiation BP 7 3 1.267e-05 ## GO:0042098 T cell proliferation BP 197 9 1.385e-05 We see an enrichment for genes involved in lipid synthesis, cell adhesion and tube formation. Given that this is a mammary gland experiment, we might guess that cluster 2 contains luminal epithelial cells responsible for milk production and secretion. Indeed, a closer examination of the marker list indicates that this cluster upregulates milk proteins Csn2 and Csn3 (Figure ??). plotExpression(sce.mam, features=c(&quot;Csn2&quot;, &quot;Csn3&quot;), x=&quot;cluster&quot;, colour_by=&quot;cluster&quot;) Further inspection of interesting GO terms is achieved by extracting the relevant genes. This is usually desirable to confirm that the interpretation of the annotated biological process is appropriate. Many terms have overlapping gene sets, so a term may only be highly ranked because it shares genes with a more relevant term that represents the active pathway. # Extract symbols for each GO term; done once. tab &lt;- select(org.Mm.eg.db, keytype=&quot;SYMBOL&quot;, keys=rownames(sce.mam), columns=&quot;GOALL&quot;) by.go &lt;- split(tab[,1], tab[,2]) # Identify genes associated with an interesting term. adhesion &lt;- unique(by.go[[&quot;GO:0022408&quot;]]) head(cur.markers[rownames(cur.markers) %in% adhesion,1:4], 10) ## DataFrame with 10 rows and 4 columns ## Top p.value FDR summary.logFC ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Spint2 11 3.28234e-34 1.37163e-31 2.39280 ## Epcam 17 8.86978e-94 7.09531e-91 2.32968 ## Cebpb 21 6.76957e-16 2.03800e-13 1.80192 ## Cd24a 21 3.24195e-33 1.29669e-30 1.72318 ## Btn1a1 24 2.16574e-13 6.12488e-11 1.26343 ## Cd9 51 1.41373e-11 3.56592e-09 2.73785 ## Ceacam1 52 1.66948e-38 7.79034e-36 1.56912 ## Sdc4 59 9.15001e-07 1.75467e-04 1.84014 ## Anxa1 68 2.58840e-06 4.76777e-04 1.29724 ## Cdh1 69 1.73658e-07 3.54897e-05 1.31265 Gene set testing of marker lists is a reliable approach for determining if pathways are up- or down-regulated between clusters. As the top marker genes are simply DEGs, we can directly apply well-established procedures for testing gene enrichment in DEG lists (see here for relevant packages). This contrasts with the AUCell approach where scores are not easily comparable across cells. The downside is that all conclusions are made relative to the other clusters, making it more difficult to determine cell identity if an “outgroup” is not present in the same study. 12.5 Computing gene set activities For the sake of completeness, we should mention that we can also quantify gene set activity on a per-cell level and test for differences in activity. This inverts the standard gene set testing procedure by combining information across genes first and then testing for differences afterwards. To avoid the pitfalls mentioned previously for the AUCs, we simply compute the average of the log-expression values across all genes in the set for each cell. This is less sensitive to the behavior of other genes in that cell (aside from composition biases, as discussed in Chapter 7). aggregated &lt;- sumCountsAcrossFeatures(sce.mam, by.go, exprs_values=&quot;logcounts&quot;, average=TRUE) dim(aggregated) # rows are gene sets, columns are cells ## [1] 22547 2772 aggregated[1:10,1:5] ## [,1] [,2] [,3] [,4] [,5] ## GO:0000002 0.39077 0.2717 0.09952 0.2353 0.2875 ## GO:0000003 0.26368 0.2700 0.21232 0.1856 0.2140 ## GO:0000009 0.00000 0.0000 0.00000 0.0000 0.0000 ## GO:0000010 0.00000 0.0000 0.00000 0.0000 0.0000 ## GO:0000012 0.36291 0.4778 0.18489 0.0000 0.3582 ## GO:0000014 0.07068 0.3256 0.11094 0.3550 0.3539 ## GO:0000015 0.53680 0.3006 0.33281 0.3550 0.5630 ## GO:0000016 0.00000 0.0000 0.00000 0.0000 0.0000 ## GO:0000018 0.26146 0.2756 0.06163 0.1353 0.1520 ## GO:0000019 0.00000 0.2220 0.00000 0.1613 0.2413 We can then identify “differential gene set activity” between clusters by looking for significant differences in the per-set averages of the relevant cells. For example, we observe that cluster 2 has the highest average expression for the triacylglycerol biosynthesis GO term (Figure 12.7), consistent with the proposed identity of those cells. plotColData(sce.mam, y=I(aggregated[&quot;GO:0019432&quot;,]), x=&quot;cluster&quot;) Figure 12.7: Distribution of average log-normalized expression for genes involved in triacylglycerol biosynthesis, for all cells in each cluster of the mammary gland dataset. The obvious disadvantage of this approach is that not all genes in the set may exhibit the same pattern of differences. Non-DE genes will add noise to the per-set average, “diluting” the strength of any differences compared to an analysis that focuses directly on the DE genes (Figure ??). At worst, a gene set may contain subsets of DE genes that change in opposite directions, cancelling out any differences in the per-set average. This is not uncommon for gene sets that contain both positive and negative regulators of a particular biological process or pathway. # Choose the top-ranking gene in GO:0019432. plotExpression(sce.mam, &quot;Thrsp&quot;, x=&quot;cluster&quot;) Figure 12.8: Distribution of log-normalized expression values for Thrsp across all cells in each cluster of the mammary gland dataset. We could attempt to use the per-set averages to identify gene sets of interest via differential testing across all possible sets, e.g., with findMarkers(). However, the highest ranking gene sets in this approach tend to be very small and uninteresting because - by definition - the pitfalls mentioned above are avoided when there is only one gene in the set. This is compounded by the fact that the log-fold changes in the per-set averages are difficult to interpret. For these reasons, we generally reserve the use of this gene set summary statistic for visualization rather than any real statistical analysis. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] limma_3.43.0 org.Mm.eg.db_3.10.0 BiocFileCache_1.11.4 [4] dbplyr_1.4.2 DelayedMatrixStats_1.9.0 scater_1.15.12 [7] ggplot2_3.2.1 AUCell_1.9.0 GSEABase_1.49.0 [10] graph_1.65.0 annotate_1.65.0 XML_3.98-1.20 [13] AnnotationDbi_1.49.0 scRNAseq_2.1.5 scran_1.15.14 [16] fossil_0.3.7 shapefiles_0.7 foreign_0.8-74 [19] maps_3.3.0 sp_1.3-2 pheatmap_1.0.12 [22] SingleR_1.1.6 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [25] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [28] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [31] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [34] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_1.4-1 XVector_0.27.0 [4] BiocNeighbors_1.5.1 farver_2.0.1 bit64_0.9-7 [7] interactiveDisplayBase_1.25.0 R.methodsS3_1.7.1 knitr_1.26 [10] zeallot_0.1.0 GO.db_3.10.0 R.oo_1.23.0 [13] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [16] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [19] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [22] lazyeval_0.2.2 later_1.0.0 BiocSingular_1.3.1 [25] htmltools_0.4.0 tools_4.0.0 rsvd_1.0.2 [28] igraph_1.2.4.2 gtable_0.3.0 glue_1.3.1 [31] GenomeInfoDbData_1.2.2 dplyr_0.8.3 rappdirs_0.3.1 [34] Rcpp_1.0.3 vctrs_0.2.1 ExperimentHub_1.13.5 [37] xfun_0.11 stringr_1.4.0 ps_1.3.0 [40] mime_0.8 lifecycle_0.1.0 irlba_2.3.3 [43] statmod_1.4.32 AnnotationHub_2.19.3 edgeR_3.29.0 [46] zlibbioc_1.33.0 scales_1.1.0 promises_1.1.0 [49] RColorBrewer_1.1-2 yaml_2.2.0 curl_4.3 [52] memoise_1.1.0 gridExtra_2.3 stringi_1.4.3 [55] RSQLite_2.2.0 BiocVersion_3.11.1 highr_0.8 [58] rlang_0.4.2 pkgconfig_2.0.3 bitops_1.0-6 [61] evaluate_0.14 lattice_0.20-38 purrr_0.3.3 [64] labeling_0.3 cowplot_1.0.0 bit_1.1-14 [67] processx_3.4.1 tidyselect_0.2.5 magrittr_1.5 [70] bookdown_0.16 R6_2.4.1 DBI_1.1.0 [73] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [76] tibble_2.1.3 crayon_1.3.4 rmarkdown_2.0 [79] viridis_0.5.1 locfit_1.5-9.1 grid_4.0.0 [82] data.table_1.12.8 blob_1.2.0 callr_3.4.0 [85] digest_0.6.23 xtable_1.8-4 httpuv_1.5.2 [88] R.utils_2.9.2 munsell_0.5.0 beeswarm_0.2.3 [91] viridisLite_0.3.0 vipor_0.4.5 Bibliography "],
["integrating-datasets.html", "Chapter 13 Integrating Datasets 13.1 Motivation 13.2 Setting up the data 13.3 Diagnosing batch effects 13.4 Linear regression 13.5 Performing MNN correction 13.6 Preserving biological heterogeneity 13.7 Using the corrected values Session Info", " Chapter 13 Integrating Datasets .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 13.1 Motivation Large single-cell RNA sequencing (scRNA-seq) projects usually need to generate data across multiple batches due to logistical constraints. However, the processing of different batches is often subject to uncontrollable differences, e.g., changes in operator, differences in reagent quality. This results in systematic differences in the observed expression in cells from different batches, which we refer to as “batch effects”. Batch effects are problematic as they can be major drivers of heterogeneity in the data, masking the relevant biological differences and complicating interpretation of the results. Computational correction of these effects is critical for eliminating batch-to-batch variation, allowing data across multiple batches to be combined for common downstream analysis. However, existing methods based on linear models (Ritchie et al. 2015; Leek et al. 2012) assume that the composition of cell populations are either known or the same across batches. To overcome these limitations, bespoke methods have been developed for batch correction of single-cell data (Haghverdi et al. 2018; Butler et al. 2018; Lin et al. 2019) that do not require a priori knowledge about the composition of the population. This allows them to be used in workflows for exploratory analyses of scRNA-seq data where such knowledge is usually unavailable. 13.2 Setting up the data To demonstrate, we will use two separate 10X Genomics PBMC datasets generated in two different batches. Each dataset was obtained from the TENxPBMCData package and separately subjected to basic processing steps. Separate processing prior to the batch correction step is more convenient, scalable and (on occasion) more reliable. For example, outlier-based QC on the cells is more effective when performed within a batch (Section 6.3.2.3). The same can also be said for trend fitting when modelling the mean-variance relationship (Section 8.2.4.1). View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(TENxPBMCData) all.sce &lt;- list( pbmc3k=TENxPBMCData(&#39;pbmc3k&#39;), pbmc4k=TENxPBMCData(&#39;pbmc4k&#39;), pbmc8k=TENxPBMCData(&#39;pbmc8k&#39;) ) #--- quality-control ---# library(scater) stats &lt;- high.mito &lt;- list() for (n in names(all.sce)) { current &lt;- all.sce[[n]] is.mito &lt;- grep(&quot;MT&quot;, rowData(current)$Symbol_TENx) stats[[n]] &lt;- perCellQCMetrics(current, subsets=list(Mito=is.mito)) high.mito[[n]] &lt;- isOutlier(stats[[n]]$subsets_Mito_percent, type=&quot;higher&quot;) all.sce[[n]] &lt;- current[,!high.mito[[n]]] } #--- normalization ---# all.sce &lt;- lapply(all.sce, logNormCounts) #--- variance-modelling ---# library(scran) all.dec &lt;- lapply(all.sce, modelGeneVar) all.hvgs &lt;- lapply(all.dec, getTopHVGs, prop=0.1) #--- dimensionality-reduction ---# library(BiocSingular) set.seed(10000) all.sce &lt;- mapply(FUN=runPCA, x=all.sce, subset_row=all.hvgs, MoreArgs=list(ncomponents=25, BSPARAM=RandomParam()), SIMPLIFY=FALSE) set.seed(100000) all.sce &lt;- lapply(all.sce, runTSNE, dimred=&quot;PCA&quot;) set.seed(1000000) all.sce &lt;- lapply(all.sce, runUMAP, dimred=&quot;PCA&quot;) #--- clustering ---# for (n in names(all.sce)) { g &lt;- buildSNNGraph(all.sce[[n]], k=10, use.dimred=&#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership all.sce[[n]]$cluster &lt;- factor(clust) } pbmc3k &lt;- all.sce$pbmc3k dec3k &lt;- all.dec$pbmc3k pbmc3k ## class: SingleCellExperiment ## dim: 32738 2609 ## metadata(0): ## assays(2): counts logcounts ## rownames(32738): ENSG00000243485 ENSG00000237613 ... ENSG00000215616 ENSG00000215611 ## rowData names(3): ENSEMBL_ID Symbol_TENx Symbol ## colnames: NULL ## colData names(12): Sample Barcode ... Date_published cluster ## reducedDimNames(3): PCA TSNE UMAP ## spikeNames(0): ## altExpNames(0): pbmc4k &lt;- all.sce$pbmc4k dec4k &lt;- all.dec$pbmc4k pbmc4k ## class: SingleCellExperiment ## dim: 33694 4182 ## metadata(0): ## assays(2): counts logcounts ## rownames(33694): ENSG00000243485 ENSG00000237613 ... ENSG00000277475 ENSG00000268674 ## rowData names(3): ENSEMBL_ID Symbol_TENx Symbol ## colnames: NULL ## colData names(12): Sample Barcode ... Date_published cluster ## reducedDimNames(3): PCA TSNE UMAP ## spikeNames(0): ## altExpNames(0): To prepare for the batch correction: We subset all batches to the common “universe” of features. In this case, it is straightforward as both batches use Ensembl gene annotation. universe &lt;- intersect(rownames(pbmc3k), rownames(pbmc4k)) length(universe) ## [1] 31232 # Subsetting the SingleCellExperiment object. pbmc3k &lt;- pbmc3k[universe,] pbmc4k &lt;- pbmc4k[universe,] # Also subsetting the variance modelling results, for convenience. dec3k &lt;- dec3k[universe,] dec4k &lt;- dec4k[universe,] We rescale each batch to adjust for differences in sequencing depth between batches. The multiBatchNorm() function recomputes log-normalized expression values after adjusting the size factors for systematic differences in coverage between SingleCellExperiment objects. (Size factors only remove biases between cells within a single batch.) This improves the quality of the correction by removing one aspect of the technical differences between batches. library(batchelor) rescaled &lt;- multiBatchNorm(pbmc3k, pbmc4k) pbmc3k &lt;- rescaled[[1]] pbmc4k &lt;- rescaled[[2]] We perform feature selection by averaging the variance components across all batches with the combineVar() function. We compute the average as it is responsive to batch-specific HVGs while still preserving the within-batch ranking of genes. This allows us to use the same strategies described in Section 8.3 to select genes of interest. In contrast, approaches based on taking the intersection or union of HVGs across batches become increasingly conservative or liberal, respectively, with an increasing number of batches. library(scran) combined.dec &lt;- combineVar(dec3k, dec4k) chosen.hvgs &lt;- combined.dec$bio &gt; 0 sum(chosen.hvgs) ## [1] 13431 When integrating datasets of variable composition, it is generally safer to err on the side of including more genes than are used in a single dataset analysis, to ensure that markers are retained for any dataset-specific subpopulations that might be present. For a top \\(X\\) selection, this means using a larger \\(X\\) (say, ~5000), or in this case, we simply take all genes above the trend. That said, many of the signal-to-noise considerations described in Section 8.3 still apply here, so some experimentation may be necessary for best results. Alternatively, a more forceful approach to feature selection can be used based on marker genes from within-batch comparisons; this is discussed in more detail in Section 13.6.2. 13.3 Diagnosing batch effects Before we actually perform any correction, it is worth examining whether there is any batch effect in this dataset. We combine the two SingleCellExperiments and perform a PCA on the log-expression values for all genes with positive (average) biological components. # Synchronizing the metadata for cbind()ing. rowData(pbmc3k) &lt;- rowData(pbmc4k) pbmc3k$batch &lt;- &quot;3k&quot; pbmc4k$batch &lt;- &quot;4k&quot; uncorrected &lt;- cbind(pbmc3k, pbmc4k) # Using RandomParam() as it is more efficient for file-backed matrices. library(scater) set.seed(0010101010) uncorrected &lt;- runPCA(uncorrected, subset_row=chosen.hvgs, BSPARAM=BiocSingular::RandomParam()) We use graph-based clustering on the components to obtain a summary of the population structure. As our two PBMC populations should be replicates, each cluster should ideally consist of cells from both batches. However, we instead see clusters that are comprised of cells from a single batch. This indicates that cells of the same type are artificially separated due to technical differences between batches. library(scran) snn.gr &lt;- buildSNNGraph(uncorrected, use.dimred=&quot;PCA&quot;) clusters &lt;- igraph::cluster_walktrap(snn.gr)$membership tab &lt;- table(Cluster=clusters, Batch=uncorrected$batch) tab ## Batch ## Cluster 3k 4k ## 1 1 781 ## 2 0 1309 ## 3 0 535 ## 4 14 51 ## 5 0 605 ## 6 489 0 ## 7 0 184 ## 8 1272 0 ## 9 0 414 ## 10 151 0 ## 11 0 50 ## 12 155 0 ## 13 0 65 ## 14 0 61 ## 15 0 88 ## 16 30 0 ## 17 339 0 ## 18 145 0 ## 19 11 3 ## 20 2 36 We can also visualize the corrected coordinates using a \\(t\\)-SNE plot (Figure 13.1). The strong separation between cells from different batches is consistent with the clustering results. set.seed(1111001) uncorrected &lt;- runTSNE(uncorrected, dimred=&quot;PCA&quot;) plotTSNE(uncorrected, colour_by=&quot;batch&quot;) Figure 13.1: \\(t\\)-SNE plot of the PBMC datasets without any batch correction. Each point is a cell that is colored according to its batch of origin. Of course, the other explanation for batch-specific clusters is that there are cell types that are unique to each batch. The degree of intermingling of cells from different batches is not an effective diagnostic when the batches involved might actually contain unique cell subpopulations (which is not a consideration in the PBMC dataset, but the same cannot be said in general). If a cluster only contains cells from a single batch, one can always debate whether that is caused by a failure of the correction method or if there is truly a batch-specific subpopulation. For example, do batch-specific metabolic or differentiation states represent distinct subpopulations? Or should they be merged together? We will not attempt to answer this here, only noting that each batch correction algorithm will make different (and possibly inappropriate) decisions on what constitutes “shared” and “unique” populations. 13.4 Linear regression Batch effects in bulk RNA sequencing studies are commonly removed with linear regression. This involves fitting a linear model to each gene’s expression profile, setting the undesirable batch term to zero and recomputing the observations sans the batch effect, yielding a set of corrected expression values for downstream analyses. Linear modelling is the basis of the removeBatchEffect() function from the limma package (Ritchie et al. 2015) as well the comBat() function from the sva package (Leek et al. 2012). To use this approach in a scRNA-seq context, we assume that the composition of cell subpopulations is the same across batches. We also assume that the batch effect is additive, i.e., any batch-induced fold-change in expression is the same across different cell subpopulations for any given gene. These are strong assumptions as batches derived from different individuals will naturally exhibit variation in cell type abundances and expression. Nonetheless, they may be acceptable when dealing with batches that are technical replicates generated from the same population of cells. (In fact, when its assumptions hold, linear regression is the most statistically efficient as it uses information from all cells to compute the common batch vector.) Linear modelling can also accommodate situations where the composition is known a priori by including the cell type as a factor in the linear model, but this situation is even less common. We use the rescaleBatches() function from the batchelor package to remove the batch effect. This is roughly equivalent to applying a linear regression to the log-expression values per gene, with some adjustments to improve performance and efficiency. For each gene, the mean expression in each batch is scaled down until it is equal to the lowest mean across all batches. We deliberately choose to scale all expression values down as this mitigates differences in variance when batches lie at different positions on the mean-variance trend. (Specifically, the shrinkage effect of the pseudo-count is greater for smaller counts, suppressing any differences in variance across batches.) An additional feature of rescaleBatches() is that it will preserve sparsity in the input matrix for greater efficiency, whereas other methods like removeBatchEffect() will always return a dense matrix. library(batchelor) rescaled &lt;- rescaleBatches(pbmc3k, pbmc4k) rescaled ## class: SingleCellExperiment ## dim: 31232 6791 ## metadata(0): ## assays(1): corrected ## rownames(31232): ENSG00000243485 ENSG00000237613 ... ENSG00000198695 ENSG00000198727 ## rowData names(0): ## colnames: NULL ## colData names(1): batch ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): After clustering, we observe that most clusters consist of mixtures of cells from the two replicate batches, consistent with the removal of the batch effect. This conclusion is supported by the apparent mixing of cells from different batches in Figure 13.2. However, at least one batch-specific cluster is still present, indicating that the correction is not entirely complete. This is attributable to violation of one of the aforementioned assumptions, even in this simple case involving replicated batches. set.seed(1010101010) # To ensure reproducibility of IRLBA. rescaled &lt;- runPCA(rescaled, subset_row=chosen.hvgs, exprs_values=&quot;corrected&quot;) snn.gr &lt;- buildSNNGraph(rescaled, use.dimred=&quot;PCA&quot;) clusters.resc &lt;- igraph::cluster_walktrap(snn.gr)$membership tab.resc &lt;- table(Cluster=clusters.resc, Batch=rescaled$batch) tab.resc ## Batch ## Cluster 1 2 ## 1 278 525 ## 2 16 23 ## 3 337 606 ## 4 43 748 ## 5 604 529 ## 6 22 71 ## 7 188 48 ## 8 25 49 ## 9 263 0 ## 10 123 135 ## 11 16 85 ## 12 11 57 ## 13 116 6 ## 14 455 1035 ## 15 6 31 ## 16 89 187 ## 17 3 36 ## 18 3 8 ## 19 11 3 rescaled &lt;- runTSNE(rescaled, dimred=&quot;PCA&quot;) rescaled$batch &lt;- factor(rescaled$batch) plotTSNE(rescaled, colour_by=&quot;batch&quot;) Figure 13.2: \\(t\\)-SNE plot of the PBMC datasets after correction with rescaleBatches(). Each point represents a cell and is colored according to the batch of origin. Alternatively, we could use the regressBatches() function to perform a more conventional linear regression for batch correction. This is subject to the same assumptions as described above for rescaleBatches(), though it has the additional disadvantage of discarding sparsity in the matrix of residuals. (We do put in some effort to mitigate the loss of efficiency by avoiding explicit calculation of the residuals, see ?ResidualMatrix for details.) 13.5 Performing MNN correction 13.5.1 Algorithm overview Consider a cell \\(a\\) in batch \\(A\\), and identify the cells in batch \\(B\\) that are nearest neighbours to \\(a\\) in the expression space defined by the selected features. Repeat this for a cell \\(b\\) in batch \\(B\\), identifying its nearest neighbours in \\(A\\). Mutual nearest neighbours are pairs of cells from different batches that belong in each other’s set of nearest neighbours. The reasoning is that MNN pairs represent cells from the same biological state prior to the application of a batch effect - see Haghverdi et al. (2018) for full theoretical details. Thus, the difference between cells in MNN pairs can be used as an estimate of the batch effect, the subtraction of which yields batch-corrected values. Compared to linear regression, MNN correction does not assume that the population composition is the same or known beforehand. This is because it learns the shared population structure via identification of MNN pairs and uses this information to obtain an appropriate estimate of the batch effect. Instead, the key assumption of MNN-based approaches is that the batch effect is orthogonal to the biology in high-dimensional expression space. Violations reduce the effectiveness and accuracy of the correction, with the most common case arising from variations in the direction of the batch effect between clusters. Nonetheless, the assumption is usually reasonable as a random vector is very likely to be orthogonal in high-dimensional space. 13.5.2 Application to the PBMC data The batchelor package provides an implementation of the MNN approach via the fastMNN() function. (Unlike the MNN method originally described by Haghverdi et al. (2018), the fastMNN() function performs PCA to reduce the dimensions beforehand and speed up the downstream neighbor detection steps.) We apply it to our two PBMC batches to remove the batch effect across the highly variable genes in chosen.hvgs. To reduce computational work and technical noise, all cells in all batches are projected into the low-dimensional space defined by the top d principal components. Identification of MNNs and calculation of correction vectors are then performed in this low-dimensional space. # Using randomized SVD here, as this is faster than # irlba for file-backed matrices. set.seed(1000101001) mnn.out &lt;- fastMNN(pbmc3k, pbmc4k, d=50, k=20, subset.row=chosen.hvgs, BSPARAM=BiocSingular::RandomParam(deferred=TRUE)) mnn.out ## class: SingleCellExperiment ## dim: 13431 6791 ## metadata(1): merge.info ## assays(1): reconstructed ## rownames(13431): ENSG00000239945 ENSG00000228463 ... ENSG00000198695 ENSG00000198727 ## rowData names(1): rotation ## colnames: NULL ## colData names(1): batch ## reducedDimNames(1): corrected ## spikeNames(0): ## altExpNames(0): The function returns a SingleCellExperiment object containing corrected values for downstream analyses like clustering or visualization. Each column of mnn.out corresponds to a cell in one of the batches, while each row corresponds to an input gene in chosen.hvgs. The batch field in the column metadata contains a vector specifying the batch of origin of each cell. head(mnn.out$batch) ## [1] 1 1 1 1 1 1 The corrected matrix in the reducedDims() contains the low-dimensional corrected coordinates for all cells, which we will use in place of the PCs in our downstream analyses. dim(reducedDim(mnn.out, &quot;corrected&quot;)) ## [1] 6791 50 A reconstructed matrix in the assays() contains the corrected expression values for each gene in each cell, obtained by projecting the low-dimensional coordinates in corrected back into gene expression space. We do not recommend using this for anything other than visualization (Section 13.7). assay(mnn.out, &quot;reconstructed&quot;) ## &lt;13431 x 6791&gt; matrix of class LowRankMatrix and type &quot;double&quot;: ## [,1] [,2] [,3] ... [,6790] [,6791] ## ENSG00000239945 -2.522e-06 -1.851e-06 -1.199e-05 . 1.832e-06 -3.641e-06 ## ENSG00000228463 -6.627e-04 -6.724e-04 -4.820e-04 . -8.531e-04 -3.999e-04 ## ENSG00000237094 -8.077e-05 -8.038e-05 -9.631e-05 . 7.261e-06 -4.094e-05 ## ENSG00000229905 3.838e-06 6.180e-06 5.432e-06 . 8.534e-06 3.485e-06 ## ENSG00000237491 -4.527e-04 -3.178e-04 -1.510e-04 . -3.491e-04 -2.082e-04 ## ... . . . . . . ## ENSG00000198840 -0.0296508 -0.0340101 -0.0502385 . -0.0362884 -0.0183084 ## ENSG00000212907 -0.0041681 -0.0056570 -0.0106420 . -0.0083837 0.0005996 ## ENSG00000198886 0.0145358 0.0200517 -0.0307131 . -0.0109254 -0.0070064 ## ENSG00000198695 0.0014427 0.0013490 0.0001493 . -0.0009826 -0.0022712 ## ENSG00000198727 0.0152570 0.0106167 -0.0256450 . -0.0227962 -0.0022898 The most relevant parameter for tuning fastMNN() is k, which specifies the number of nearest neighbours to consider when defining MNN pairs. This can be interpreted as the minimum anticipated frequency of any shared cell type or state in each batch. Increasing k will generally result in more aggressive merging as the algorithm is more generous in matching subpopulations across batches. It can occasionally be desirable to increase k if one clearly sees that the same cell types are not being adequately merged across batches. See Chapter 32 for an example of a more complex fastMNN() merge involving several human pancreas datasets generated by different authors on different patients with different technologies. 13.5.3 Correction diagnostics We cluster on the low-dimensional corrected coordinates to obtain a partitioning of the cells that serves as a proxy for the population structure. If the batch effect is successfully corrected, clusters corresponding to shared cell types or states should contain cells from multiple batches. We see that all clusters contain contributions from each batch after correction, consistent with our expectation that the two batches are replicates of each other. library(scran) snn.gr &lt;- buildSNNGraph(mnn.out, use.dimred=&quot;corrected&quot;) clusters.mnn &lt;- igraph::cluster_walktrap(snn.gr)$membership tab.mnn &lt;- table(Cluster=clusters.mnn, Batch=mnn.out$batch) tab.mnn ## Batch ## Cluster 1 2 ## 1 337 606 ## 2 289 542 ## 3 152 181 ## 4 12 4 ## 5 517 467 ## 6 17 19 ## 7 313 661 ## 8 162 118 ## 9 11 56 ## 10 547 1083 ## 11 17 59 ## 12 16 58 ## 13 144 93 ## 14 67 191 ## 15 4 36 ## 16 4 8 We can also visualize the corrected coordinates using a \\(t\\)-SNE plot (Figure 13.3). The presence of visual clusters containing cells from both batches provides a comforting illusion that the correction was successful. library(scater) set.seed(0010101010) mnn.out &lt;- runTSNE(mnn.out, dimred=&quot;corrected&quot;) mnn.out$batch &lt;- factor(mnn.out$batch) plotTSNE(mnn.out, colour_by=&quot;batch&quot;) Figure 13.3: \\(t\\)-SNE plot of the PBMC datasets after MNN correction. Each point is a cell that is colored according to its batch of origin. For fastMNN(), one useful diagnostic is the proportion of variance within each batch that is lost during MNN correction. Specifically, this refers to the within-batch variance that is removed during orthogonalization with respect to the average correction vector at each merge step. This is returned via the lost.var field in the metadata of mnn.out, which contains a matrix of the variance lost in each batch (column) at each merge step (row). metadata(mnn.out)$merge.info$lost.var ## [,1] [,2] ## [1,] 0.006617 0.003315 Large proportions of lost variance (&gt;10%) suggest that correction is removing genuine biological heterogeneity. This would occur due to violations of the assumption of orthogonality between the batch effect and the biological subspace (Haghverdi et al. 2018). In this case, the proportion of lost variance is small, indicating that non-orthogonality is not a major concern. 13.6 Preserving biological heterogeneity 13.6.1 Comparison to within-batch clusters Another useful diagnostic check is to compare the clustering within each batch to the clustering of the merged data. Accurate data integration should preserve variance within each batch as there should be nothing to remove between cells in the same batch. This check complements the previously mentioned diagnostics that only focus on the removal of differences between batches. Specifically, it protects us against cases where the correction method simply aggregates all cells together, which would achieve perfect mixing but also discard the biological heterogeneity of interest. Ideally, we should see a many-to-1 mapping where the across-batch clustering is nested inside the within-batch clusterings. This indicates that any within-batch structure was preserved after correction while acknowledging that greater resolution is possible with more cells. In practice, more discrepancies can be expected even when the correction is perfect, due to the existence of closely related clusters that were arbitrarily separated in the within-batch clustering. As a general rule, we can be satisfied with the correction if the vast majority of entries in Figure 13.4 are zero, though this may depend on whether specific clusters of interest are gained or lost. library(pheatmap) # For the first batch (adding +10 for a smoother color transition # from zero to non-zero counts for any given matrix entry). tab &lt;- table(paste(&quot;after&quot;, clusters.mnn[rescaled$batch==1]), paste(&quot;before&quot;, pbmc3k$cluster)) heat3k &lt;- pheatmap(log10(tab+10), cluster_row=FALSE, cluster_col=FALSE, main=&quot;PBMC 3K comparison&quot;, silent=TRUE) # For the second batch. tab &lt;- table(paste(&quot;after&quot;, clusters.mnn[rescaled$batch==2]), paste(&quot;before&quot;, pbmc4k$cluster)) heat4k &lt;- pheatmap(log10(tab+10), cluster_row=FALSE, cluster_col=FALSE, main=&quot;PBMC 4K comparison&quot;, silent=TRUE) gridExtra::grid.arrange(heat3k[[4]], heat4k[[4]]) Figure 13.4: Comparison between the within-batch clusters and the across-batch clusters obtained after MNN correction. One heatmap is generated for each of the PBMC 3K and 4K datasets, where each entry is colored according to the number of cells with each pair of labels (before and after correction). Another evaluation approach is to compute the coassignment probabilities (Section 10.6), i.e., the probability that cells from two within-batch clusters are clustered together in the across-batch clustering. High probabilities off the diagonal in Figure 13.5 indicate that within-batch clusters are merged in the across-batch analysis. We would generally expect low off-diagonal probabilities for most pairs of clusters, though this may not be reasonably possible if the within-batch clusters were poorly separated in the first place. # For the first batch. tab &lt;- coassignProb(pbmc3k$cluster, clusters.mnn[rescaled$batch==1]) heat3k &lt;- pheatmap(tab, cluster_row=FALSE, cluster_col=FALSE, col=rev(viridis::magma(100)), main=&quot;PBMC 3K probabilities&quot;, silent=TRUE) # For the second batch. tab &lt;- coassignProb(pbmc4k$cluster, clusters.mnn[rescaled$batch==2]) heat4k &lt;- pheatmap(tab, cluster_row=FALSE, cluster_col=FALSE, col=rev(viridis::magma(100)), main=&quot;PBMC 4K probabilities&quot;, silent=TRUE) gridExtra::grid.arrange(heat3k[[4]], heat4k[[4]]) Figure 13.5: Coassignment probabilites for the within-batch clusters, based on coassignment of cells in the across-batch clusters obtained after MNN correction. One heatmap is generated for each of the PBMC 3K and 4K datasets, where each entry is colored according to the coassignment probability between each pair of within-batch clusters. Finally, we can summarize the agreement between clusterings by computing the Rand index. This provides a simple metric that we can use to assess the preservation of variation by different correction methods. Larger rand indices (i.e., closer to 1) are more desirable, though this must be balanced against the ability of each method to actually remove the batch effect. library(fossil) ri3k &lt;- rand.index(as.integer(clusters.mnn[rescaled$batch==1]), as.integer(pbmc3k$cluster)) ri3k ## [1] 0.9335 ri4k &lt;- rand.index(as.integer(clusters.mnn[rescaled$batch==2]), as.integer(pbmc4k$cluster)) ri4k ## [1] 0.9576 13.6.2 Encouraging consistency with marker genes In some situations, we will already have performed within-batch analyses to characterize salient aspects of population heterogeneity. This is not uncommon when merging datasets from different sources where each dataset has already been analyzed, annotated and interpreted separately. It is subsequently desirable for the integration procedure to retain these “known interesting” aspects of each dataset in the merged dataset. We can encourage this outcome by using the marker genes within each dataset as our selected feature set for fastMNN() and related methods. This focuses on the relevant heterogeneity and represents a semi-supervised approach that is a natural extension of the strategy described in Section 8.4. To illustrate, we apply this strategy to our PBMC datasets. We identify the top marker genes from pairwise Wilcoxon ranked sum tests between every pair of clusters within each batch, analogous to the method used by SingleR (Chapter 12). In this case, we use the top 10 marker genes but any value can be used depending on the acceptable trade-off between signal and noise (and speed). We then take the union across all comparisons in all batches and use that in place of our HVG set in fastMNN(). stats3 &lt;- pairwiseWilcox(logcounts(pbmc3k), pbmc3k$cluster, direction=&quot;up&quot;) markers3 &lt;- getTopMarkers(stats3[[1]], stats3[[2]], n=10) stats4 &lt;- pairwiseWilcox(logcounts(pbmc4k), pbmc4k$cluster, direction=&quot;up&quot;) markers4 &lt;- getTopMarkers(stats4[[1]], stats4[[2]], n=10) marker.set &lt;- unique(unlist(c(unlist(markers3), unlist(markers4)))) length(marker.set) # getting the number of genes selected in this manner. ## [1] 314 set.seed(1000110) mnn.out2 &lt;- fastMNN(pbmc3k, pbmc4k, subset.row=marker.set, BSPARAM=BiocSingular::RandomParam(deferred=TRUE)) A quick inspection of Figure 13.6 indicates that the original within-batch structure is indeed preserved in the corrected data. This highlights the utility of a marker-based feature set for integrating datasets that have already been characterized separately in a manner that preserves existing interpretations of each dataset. We note that some within-batch clusters have merged, most likely due to the lack of robust separation in the first place, though this may also be treated as a diagnostic on the appropriateness of the integration depending on the context. mnn.out2 &lt;- runTSNE(mnn.out2, dimred=&quot;corrected&quot;) gridExtra::grid.arrange( plotTSNE(mnn.out2[,mnn.out2$batch==1], colour_by=I(pbmc3k$cluster)), plotTSNE(mnn.out2[,mnn.out2$batch==2], colour_by=I(pbmc4k$cluster)), ncol=2 ) Figure 13.6: \\(t\\)-SNE plots of the merged PBMC datasets, where the merge was performed using only marker genes identified within each batch. Each point represents a cell that is colored by the assigned cluster from the within-batch analysis for the 3K (left) and 4K dataset (right). 13.7 Using the corrected values The greatest value of batch correction lies in facilitating cell-based analysis of population heterogeneity in a consistent manner across batches. Cluster 1 in batch A is the same as cluster 1 in batch B when the clustering is performed on the merged data. There is no need to identify mappings between separate clusterings, which might not even be possible when the clusters are not well-separated. The burden of interpretation is consolidated by generating a single set of clusters for all batches, rather than requiring separate examination of each batch’s clusters. Another benefit is that the available number of cells is increased when all batches are combined, which allows for greater resolution of population structure in downstream analyses. We previously demonstrated the application of clustering methods to the batch-corrected data, but the same principles apply for other analyses like trajectory reconstruction. At this point, it is also tempting to use the corrected expression values for gene-based analyses like DE-based marker gene detection. This is not generally recommended as an arbitrary correction algorithm is not obliged to preserve the magnitude (or even direction) of differences in per-gene expression when attempting to align multiple batches. For example, cosine normalization in fastMNN() shrinks the magnitude of the expression values so that the computed log-fold changes have no obvious interpretation. Of greater concern is the possibility that the correction introduces artificial agreement across batches. To illustrate: Consider a dataset (first batch) with two cell types, \\(A\\) and \\(B\\). Consider a second batch with the same cell types, denoted as \\(A&#39;\\) and \\(B&#39;\\). Assume that, for some reason, gene \\(X\\) is expressed in \\(A\\) but not in \\(A&#39;\\), \\(B\\) or \\(B&#39;\\) - possibly due to some difference in how the cells were treated, or maybe due to a donor effect. We then merge the batches together based on the shared cell types. This yields a result where \\(A\\) and \\(A&#39;\\) cells are intermingled and the difference due to \\(X\\) is eliminated. One can debate whether this should be the case, but in general, it is necessary for batch correction methods to smooth over small biological differences (as discussed in Section 13.3). Now, if we corrected the second batch to the first, we must have coerced the expression values of \\(X\\) in \\(A&#39;\\) to non-zero values to align with those of \\(A\\), while leaving the expression of \\(X\\) in \\(B&#39;\\) and \\(B\\) at zero. Thus, we have artificially introduced DE between \\(A&#39;\\) and \\(B&#39;\\) for \\(X\\) in the second batch to align with the DE between \\(A\\) and \\(B\\) in the first batch. (The converse is also possible where DE in the first batch is artificially removed to align with the second batch, depending on the order of merges.) The artificial DE has implications for the identification of the cell types and interpretation of the results. We would be misled into believing that both \\(A\\) and \\(A&#39;\\) are \\(X\\)-positive, when in fact this is only true for \\(A\\). At best, this is only a minor error - after all, we do actually have \\(X\\)-positive cells of that overall type, we simply do not see that \\(A&#39;\\) is \\(X\\)-negative. At worst, this can compromise the conclusions, e.g., if the first batch was drug treated and the second batch was a control, we might mistakenly think that a \\(X\\)-positive population exists in the latter and conclude that our drug has no effect. Rather, it is preferable to perform DE analyses using the uncorrected expression values with blocking on the batch, as discussed in Section 11.4. This strategy is based on the expectation that any genuine DE between clusters should still be present in a within-batch comparison where batch effects are absent. It penalizes genes that exhibit inconsistent DE across batches, thus protecting against misleading conclusions when a population in one batch is aligned to a similar-but-not-identical population in another batch. We demonstrate this approach below using a blocked \\(t\\)-test to detect markers in the PBMC dataset, where the presence of the same pattern across clusters within each batch (Figure 13.7) is reassuring. If integration is performed across multiple conditions, it is even more important to use the uncorrected expression values for downstream analyses - see Section 14.5.2 for a discussion. m.out &lt;- findMarkers(uncorrected, clusters.mnn, block=uncorrected$batch, direction=&quot;up&quot;, lfc=1, row.data=rowData(uncorrected)[,3,drop=FALSE]) # A (probably activated?) T cell subtype of some sort: demo &lt;- m.out[[&quot;10&quot;]] as.data.frame(demo[1:20,c(&quot;Symbol&quot;, &quot;Top&quot;, &quot;p.value&quot;, &quot;FDR&quot;)]) ## Symbol Top p.value FDR ## ENSG00000177954 RPS27 1 3.399e-168 1.061e-163 ## ENSG00000227507 LTB 1 1.238e-157 1.934e-153 ## ENSG00000167286 CD3D 1 9.136e-89 4.076e-85 ## ENSG00000111716 LDHB 1 8.699e-44 1.811e-40 ## ENSG00000008517 IL32 1 4.880e-31 6.928e-28 ## ENSG00000172809 RPL38 1 8.727e-143 6.814e-139 ## ENSG00000171223 JUNB 1 8.762e-72 2.737e-68 ## ENSG00000071082 RPL31 2 8.612e-78 2.989e-74 ## ENSG00000121966 CXCR4 2 2.370e-07 1.322e-04 ## ENSG00000251562 MALAT1 2 3.618e-33 5.650e-30 ## ENSG00000133639 BTG1 2 6.847e-12 4.550e-09 ## ENSG00000170345 FOS 2 2.738e-46 6.108e-43 ## ENSG00000129824 RPS4Y1 2 1.075e-108 6.713e-105 ## ENSG00000177606 JUN 3 1.039e-37 1.910e-34 ## ENSG00000112306 RPS12 3 1.656e-33 2.722e-30 ## ENSG00000110700 RPS13 3 7.600e-18 7.657e-15 ## ENSG00000198851 CD3E 3 1.058e-36 1.836e-33 ## ENSG00000213741 RPS29 3 1.494e-148 1.555e-144 ## ENSG00000116251 RPL22 4 3.992e-25 4.796e-22 ## ENSG00000144713 RPL32 4 1.224e-32 1.820e-29 plotExpression(uncorrected, x=I(factor(clusters.mnn)), features=&quot;ENSG00000177954&quot;, colour_by=&quot;batch&quot;) + facet_wrap(~colour_by) Figure 13.7: Distributions of RPSA uncorrected log-expression values within each cluster in each batch of the merged PBMC dataset. We suggest limiting the use of per-gene corrected values to visualization, e.g., when coloring points on a \\(t\\)-SNE plot by per-cell expression. This can be more aesthetically pleasing than uncorrected expression values that may contain large shifts on the colour scale between cells in different batches. Use of the corrected values in any quantitative procedure should be treated with caution, and should be backed up by similar results from an analysis on the uncorrected values. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] fossil_0.3.7 shapefiles_0.7 foreign_0.8-74 [4] maps_3.3.0 sp_1.3-2 pheatmap_1.0.12 [7] scater_1.15.12 ggplot2_3.2.1 scran_1.15.14 [10] batchelor_1.3.8 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [13] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [16] HDF5Array_1.15.2 rhdf5_2.31.1 DelayedArray_0.13.2 [19] BiocParallel_1.21.2 IRanges_2.21.2 S4Vectors_0.25.8 [22] BiocGenerics_0.33.0 matrixStats_0.55.0 Cairo_1.5-10 [25] BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 RColorBrewer_1.1-2 tools_4.0.0 [4] R6_2.4.1 irlba_2.3.3 vipor_0.4.5 [7] lazyeval_0.2.2 colorspace_1.4-1 withr_2.1.2 [10] tidyselect_0.2.5 gridExtra_2.3 processx_3.4.1 [13] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [16] bookdown_0.16 scales_1.1.0 callr_3.4.0 [19] stringr_1.4.0 digest_0.6.23 rmarkdown_2.0 [22] XVector_0.27.0 pkgconfig_2.0.3 htmltools_0.4.0 [25] limma_3.43.0 highr_0.8 rlang_0.4.2 [28] DelayedMatrixStats_1.9.0 farver_2.0.1 dplyr_0.8.3 [31] RCurl_1.95-4.12 magrittr_1.5 BiocSingular_1.3.1 [34] GenomeInfoDbData_1.2.2 Matrix_1.2-18 Rcpp_1.0.3 [37] ggbeeswarm_0.6.0 munsell_0.5.0 Rhdf5lib_1.9.0 [40] viridis_0.5.1 lifecycle_0.1.0 stringi_1.4.3 [43] yaml_2.2.0 edgeR_3.29.0 zlibbioc_1.33.0 [46] Rtsne_0.15 grid_4.0.0 dqrng_0.2.1 [49] crayon_1.3.4 lattice_0.20-38 beachmat_2.3.1 [52] cowplot_1.0.0 locfit_1.5-9.1 knitr_1.26 [55] ps_1.3.0 pillar_1.4.3 igraph_1.2.4.2 [58] glue_1.3.1 evaluate_0.14 BiocManager_1.30.10 [61] gtable_0.3.0 purrr_0.3.3 assertthat_0.2.1 [64] xfun_0.11 rsvd_1.0.2 viridisLite_0.3.0 [67] tibble_2.1.3 beeswarm_0.2.3 statmod_1.4.32 Bibliography "],
["multi-sample-comparisons.html", "Chapter 14 Multi-sample comparisons 14.1 Motivation 14.2 Setting up the data 14.3 Differential expression between conditions 14.4 Differential abundance between conditions 14.5 Comments on interpretation 14.6 Avoiding problems with ambient RNA Session Info", " Chapter 14 Multi-sample comparisons .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 14.1 Motivation A powerful use of scRNA-seq technology lies in the design of replicated multi-condition experiments to detect changes in composition or expression between conditions. For example, a researcher could use this strategy to detect changes in cell type abundance after drug treatment (Richard et al. 2018) or genetic modifications (Scialdone et al. 2016). This provides more biological insight than conventional scRNA-seq experiments involving only one biological condition, especially if we can relate population changes to specific experimental perturbations. Differential analyses of multi-condition scRNA-seq experiments can be broadly split into two categories - differential expression (DE) and differential abundance (DA) analyses. The former tests for changes in expression between conditions for cells of the same type that are present in both conditions, while the latter tests for changes in the composition of cell types (or states, etc.) between conditions. In this chapter, we will demonstrate both analyses using data from a study of the early mouse embryo (Pijuan-Sala et al. 2019). 14.2 Setting up the data Our demonstration scRNA-seq dataset was generated from chimeric mouse embryos at the E8.5 developmental stage. Each chimeric embryo was generated by injecting td-Tomato-positive embryonic stem cells (ESCs) into a wild-type (WT) blastocyst. Unlike in previous experiments (Scialdone et al. 2016), there is no genetic difference between the injected and background cells other than the expression of td-Tomato in the former. Instead, the aim of this “wild-type chimera” study is to determine whether the injection procedure itself introduces differences in lineage commitment compared to the background cells. The experiment used a paired design with three replicate batches of two samples each. Specifically, each batch contains one sample consisting of td-Tomato positive cells and another consisting of negative cells, obtained by fluorescence-activated cell sorting from a single pool of dissociated cells from 6-7 chimeric embryos. For each sample, scRNA-seq data was generated using the 10X Genomics protocol (Zheng et al. 2017) to obtain 2000-7000 cells. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(MouseGastrulationData) sce.chimera &lt;- WTChimeraData(samples=5:10) sce.chimera #--- feature-annotation ---# library(scater) rownames(sce.chimera) &lt;- uniquifyFeatureNames( rowData(sce.chimera)$ENSEMBL, rowData(sce.chimera)$SYMBOL) #--- quality-control ---# drop &lt;- sce.chimera$celltype.mapped %in% c(&quot;stripped&quot;, &quot;Doublet&quot;) sce.chimera &lt;- sce.chimera[,!drop] #--- normalization ---# sce.chimera &lt;- logNormCounts(sce.chimera) #--- variance-modelling ---# library(scran) dec.chimera &lt;- modelGeneVar(sce.chimera, block=sce.chimera$sample) chosen.hvgs &lt;- dec.chimera$bio &gt; 0 #--- merging ---# library(batchelor) set.seed(01001001) merged &lt;- correctExperiments(sce.chimera, batch=sce.chimera$sample, subset.row=chosen.hvgs, PARAM=FastMnnParam( merge.order=list( list(1,3,5), # WT (3 replicates) list(2,4,6) # td-Tomato (3 replicates) ) ) ) #--- clustering ---# g &lt;- buildSNNGraph(merged, use.dimred=&quot;corrected&quot;) clusters &lt;- igraph::cluster_louvain(g) merged$cluster &lt;- factor(clusters$membership) #--- dimensionality-reduction ---# merged &lt;- runTSNE(merged, dimred=&quot;corrected&quot;, external_neighbors=TRUE) merged &lt;- runUMAP(merged, dimred=&quot;corrected&quot;, external_neighbors=TRUE) merged ## class: SingleCellExperiment ## dim: 14699 19426 ## metadata(1): merge.info ## assays(3): reconstructed counts logcounts ## rownames(14699): Xkr4 Rp1 ... Vmn2r122 CAAA01147332.1 ## rowData names(3): ENSEMBL SYMBOL rotation ## colnames(19426): cell_9769 cell_9770 ... cell_30701 cell_30702 ## colData names(12): batch cell ... doub.density cluster ## reducedDimNames(3): corrected TSNE UMAP ## spikeNames(0): ## altExpNames(0): The differential analyses in this chapter will be predicated on many of the pre-processing steps covered previously. For brevity, we will not explicitly repeat them here, only noting that we have already merged cells from all samples into the same coordinate system (Chapter 26.8) and clustered the merged dataset to obtain a common partitioning across all samples (Chapter 10). A brief inspection of the results indicates that clusters contain similar contributions from all batches with only modest differences associated with td-Tomato expression (Figure ??). library(scater) table(merged$cluster, merged$tomato) ## ## FALSE TRUE ## 1 546 401 ## 2 60 52 ## 3 470 398 ## 4 469 211 ## 5 335 271 ## 6 258 249 ## 7 1241 967 ## 8 203 221 ## 9 630 629 ## 10 71 181 ## 11 47 57 ## 12 417 310 ## 13 58 0 ## 14 209 214 ## 15 414 630 ## 16 363 509 ## 17 234 198 ## 18 657 607 ## 19 151 303 ## 20 579 443 ## 21 137 74 ## 22 82 78 ## 23 155 1 ## 24 762 878 ## 25 363 497 ## 26 1420 716 table(merged$cluster, merged$pool) ## ## 3 4 5 ## 1 224 173 550 ## 2 26 30 56 ## 3 226 172 470 ## 4 78 162 440 ## 5 99 227 280 ## 6 187 116 204 ## 7 300 909 999 ## 8 69 134 221 ## 9 229 423 607 ## 10 114 54 84 ## 11 16 31 57 ## 12 179 169 379 ## 13 2 51 5 ## 14 77 97 249 ## 15 114 289 641 ## 16 183 242 447 ## 17 157 81 194 ## 18 123 308 833 ## 19 106 118 230 ## 20 236 238 548 ## 21 3 10 198 ## 22 27 29 104 ## 23 6 84 66 ## 24 217 455 968 ## 25 132 172 556 ## 26 194 870 1072 gridExtra::grid.arrange( plotTSNE(merged, colour_by=&quot;tomato&quot;, text_by=&quot;cluster&quot;), plotTSNE(merged, colour_by=data.frame(pool=factor(merged$pool))), ncol=2 ) Ordinarily, we would be obliged to perform marker detection to assign biological meaning to these clusters. For simplicity, we will skip this step by directly using the cell type labels provided by Pijuan-Sala et al. (2019). These were obtained by mapping the cells in this dataset to a larger, pre-annotated “atlas” of mouse early embryonic development. While broadly consistent, many of our clusters map to multiple labels (Figure @ref(fig:heat-cluster-label}), which reflects the difficulties in unambiguously resolving cell types undergoing differentiation. by.label &lt;- table(merged$cluster, merged$celltype.mapped) pheatmap::pheatmap(log2(by.label+1), cluster_cols=FALSE, cluster_rows=FALSE, color=viridis::viridis(101)) Figure 14.1: Heatmap showing the abundance of cells with each combination of cluster (row) and cell type label (column). The color scale represents the log2-count for each combination. 14.3 Differential expression between conditions 14.3.1 Creating pseudo-bulk samples The most obvious differential analysis is to look for changes in expression between conditions. We perform the DE analysis separately for each label to identify cell type-specific transcriptional effects of injection. The actual DE testing is performed on “pseudo-bulk” expression profiles (Tung et al. 2017), generated by summing counts together for all cells with the same combination of label and sample. This leverages the resolution offered by single-cell technologies to define the labels, and combines it with the statistical rigor of existing methods for DE analyses involving a small number of samples. # Using &#39;label&#39; and &#39;sample&#39; as our two factors; each column of the output # corresponds to one unique combination of these two factors. summed &lt;- aggregateAcrossCells(merged, id=DataFrame( label=merged$celltype.mapped, sample=merged$sample) ) summed ## class: SingleCellExperiment ## dim: 14699 186 ## metadata(1): merge.info ## assays(1): counts ## rownames(14699): Xkr4 Rp1 ... Vmn2r122 CAAA01147332.1 ## rowData names(3): ENSEMBL SYMBOL rotation ## colnames: NULL ## colData names(14): batch cell ... label sample ## reducedDimNames(3): corrected TSNE UMAP ## spikeNames(0): ## altExpNames(0): At this point, it is worth reflecting on the motivations behind the use of pseudo-bulking: Larger counts are more amenable to standard DE analysis pipelines designed for bulk RNA-seq data. Normalization is more straightforward and certain statistical approximations are more accurate for large counts. Collapsing cells into samples reflects the fact that our biological replication occurs at the sample level (A. T. L. Lun and Marioni 2017). Each sample is represented no more than once for each condition, avoiding problems from unmodelled correlations between samples. Supplying the per-cell counts directly to a DE analysis pipeline would imply that each cell is an independent biological replicate, which is not true from an experimental perspective. (Yes, use of a mixed effects model can overcome this, but it adds an extra layer of statistical and computational complexity to little benefit.) Variance between cells within each sample is masked, provided it does not affect variance across (replicate) samples. This avoids penalizing DEGs that are not uniformly up- or down-regulated for all cells in all samples of one condition. Masking is generally desirable as DEGs - unlike marker genes - do not need to have low within-sample variance to be interesting, e.g., if the treatment effect is consistent across replicate populations but heterogeneous on a per-cell basis. (Of course, high per-cell variability will still result in weaker DE if it affects the variability across populations, while homogeneous per-cell responses will result in stronger DE due to a larger population-level log-fold change. These effects are also largely desirable.) 14.3.2 Performing the DE analysis 14.3.2.1 Introduction The DE analysis will be performed using quasi-likelihood (QL) methods from the edgeR package (Robinson, McCarthy, and Smyth 2010; Chen, Lun, and Smyth 2016). This uses a negative binomial generalized linear model (NB GLM) to handle overdispersed count data in experiments with limited replication. In our case, we have biological variation with three paired replicates per condition, so edgeR (or its contemporaries) is a natural choice for the analysis. We do not use all labels for GLM fitting as the strong DE between labels makes it difficult to compute a sensible average abundance to model the mean-dispersion trend. Moreover, label-specific batch effects would not be easily handled with a single additive term in the design matrix for the batch. Instead, we arbitrarily pick one of the labels to use for this demonstration. label &lt;- &quot;Mesenchyme&quot; current &lt;- summed[,label==summed$celltype.mapped] # Creating up a DGEList object for use in edgeR: library(edgeR) y &lt;- DGEList(counts(current), samples=colData(current)) y ## An object of class &quot;DGEList&quot; ## $counts ## Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 ## Xkr4 2 0 0 0 3 0 ## Rp1 0 0 1 0 0 0 ## Sox17 7 0 3 0 14 9 ## Mrpl15 1420 271 1009 379 1578 749 ## Rgs20 3 0 1 1 0 0 ## 14694 more rows ... ## ## $samples ## group lib.size norm.factors batch cell barcode sample stage tomato pool ## Sample1 1 4607053 1 5 cell_9769 AAACCTGAGACTGTAA 5 E8.5 TRUE 3 ## Sample2 1 1064970 1 6 cell_12212 AAGGCAGAGATGCGAC 6 E8.5 FALSE 3 ## Sample3 1 2494010 1 7 cell_13244 AAAGATGGTCATACTG 7 E8.5 TRUE 4 ## Sample4 1 1028668 1 8 cell_16261 AAAGTAGAGCGATCCC 8 E8.5 FALSE 4 ## Sample5 1 4290221 1 9 cell_19345 AAACGGGTCGTCTGAA 9 E8.5 TRUE 5 ## Sample6 1 1950840 1 10 cell_23936 AAAGTAGTCTTGCCGT 10 E8.5 FALSE 5 ## stage.mapped celltype.mapped closest.cell doub.density cluster label sample.1 ## Sample1 E8.25 Mesenchyme cell_24159 0.029850 19 Mesenchyme 5 ## Sample2 E8.25 Mesenchyme cell_66561 0.001651 10 Mesenchyme 6 ## Sample3 E8.25 Mesenchyme cell_137494 0.079208 24 Mesenchyme 7 ## Sample4 E8.5 Mesenchyme cell_132462 0.014702 25 Mesenchyme 8 ## Sample5 E7.25 Mesenchyme cell_17255 0.111286 9 Mesenchyme 9 ## Sample6 E8.5 Mesenchyme cell_41003 0.000000 19 Mesenchyme 10 14.3.2.2 Pre-processing A typical step in bulk RNA-seq data analyses is to remove samples with very low library sizes corresponding to failed library preparation or sequencing. In our situation, this is equivalent to removing label-sample combinations that have very few or lowly-sequenced cells. The corresponding summed count vectors are likely to be highly variable and thus reduce power for DE detection. The exact definition of “very low” will vary, but in this case, we define it to be log-library sizes that are more than 3 median absolute deviations from the median. discarded &lt;- isOutlier(y$samples$lib.size, log=TRUE, type=&quot;lower&quot;) y &lt;- y[,!discarded] summary(discarded) ## Mode FALSE ## logical 6 Another typical step in bulk RNA-seq analyses is to remove genes that are lowly expressed. This reduces computational work, improves the accuracy of mean-variance trend modelling and decreases the severity of the multiple testing correction. Genes are discarded if they are not expressed above a log-CPM threshold in a minimum number of samples (determined from the size of the smallest treatment group in the experimental design). keep &lt;- filterByExpr(y, group=current$tomato) y &lt;- y[keep,] summary(keep) ## Mode FALSE TRUE ## logical 9011 5688 Finally, we correct for composition biases by computing normalization factors with the trimmed mean of M-values method (Robinson and Oshlack 2010). We do not need the bespoke single-cell methods described in Chapter 7, as the counts for our pseudo-bulk samples are large enough to apply bulk normalization methods. (Readers should be aware that edgeR normalization factors are closely related but not the same as the size factors described elsewhere in this book.) y &lt;- calcNormFactors(y) y$samples ## group lib.size norm.factors batch cell barcode sample stage tomato pool ## Sample1 1 4607053 1.0683 5 cell_9769 AAACCTGAGACTGTAA 5 E8.5 TRUE 3 ## Sample2 1 1064970 1.0487 6 cell_12212 AAGGCAGAGATGCGAC 6 E8.5 FALSE 3 ## Sample3 1 2494010 0.9582 7 cell_13244 AAAGATGGTCATACTG 7 E8.5 TRUE 4 ## Sample4 1 1028668 0.9774 8 cell_16261 AAAGTAGAGCGATCCC 8 E8.5 FALSE 4 ## Sample5 1 4290221 0.9707 9 cell_19345 AAACGGGTCGTCTGAA 9 E8.5 TRUE 5 ## Sample6 1 1950840 0.9817 10 cell_23936 AAAGTAGTCTTGCCGT 10 E8.5 FALSE 5 ## stage.mapped celltype.mapped closest.cell doub.density cluster label sample.1 ## Sample1 E8.25 Mesenchyme cell_24159 0.029850 19 Mesenchyme 5 ## Sample2 E8.25 Mesenchyme cell_66561 0.001651 10 Mesenchyme 6 ## Sample3 E8.25 Mesenchyme cell_137494 0.079208 24 Mesenchyme 7 ## Sample4 E8.5 Mesenchyme cell_132462 0.014702 25 Mesenchyme 8 ## Sample5 E7.25 Mesenchyme cell_17255 0.111286 9 Mesenchyme 9 ## Sample6 E8.5 Mesenchyme cell_41003 0.000000 19 Mesenchyme 10 14.3.2.3 Statistical modelling We set up the design matrix to block on the batch-to-batch differences across different embryo pools, while retaining an additive term that represents the effect of injection. The latter is represented in our model as the log-fold change in gene expression in td-Tomato-positive cells over their negative counterparts within the same label. Our aim is to test whether this log-fold change is significantly different from zero. design &lt;- model.matrix(~factor(pool) + factor(tomato), y$samples) design ## (Intercept) factor(pool)4 factor(pool)5 factor(tomato)TRUE ## Sample1 1 0 0 1 ## Sample2 1 0 0 0 ## Sample3 1 1 0 1 ## Sample4 1 1 0 0 ## Sample5 1 0 1 1 ## Sample6 1 0 1 0 ## attr(,&quot;assign&quot;) ## [1] 0 1 1 2 ## attr(,&quot;contrasts&quot;) ## attr(,&quot;contrasts&quot;)$`factor(pool)` ## [1] &quot;contr.treatment&quot; ## ## attr(,&quot;contrasts&quot;)$`factor(tomato)` ## [1] &quot;contr.treatment&quot; We estimate the negative binomial (NB) dispersions with estimateDisp(). The role of the NB dispersion is to model the mean-variance trend (Figure 14.2), which is not easily accommodated by QL dispersions alone due to the quadratic nature of the NB mean-variance trend. y &lt;- estimateDisp(y, design) summary(y$trended.dispersion) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0103 0.0167 0.0213 0.0202 0.0235 0.0266 plotBCV(y) Figure 14.2: Biological coefficient of variation (BCV) for each gene as a function of the average abundance. The BCV is computed as the square root of the NB dispersion after empirical Bayes shrinkage towards the trend. Trended and common BCV estimates are shown in blue and red, respectively. We also estimate the quasi-likelihood dispersions with glmQLFit() (Chen, Lun, and Smyth 2016). This fits a GLM to the counts for each gene and estimates the QL dispersion from the GLM deviance. We set robust=TRUE to avoid distortions from highly variable clusters (Phipson et al. 2016). The QL dispersion models the uncertainty and variability of the per-gene variance (Figure 14.3) - which is not well handled by the NB dispersions, so the two dispersion types complement each other in the final analysis. fit &lt;- glmQLFit(y, design, robust=TRUE) summary(fit$var.prior) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.318 0.714 0.854 0.804 0.913 1.067 summary(fit$df.prior) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.227 12.675 12.675 12.339 12.675 12.675 plotQLDisp(fit) Figure 14.3: QL dispersion estimates for each gene as a function of abundance. Raw estimates (black) are shrunk towards the trend (blue) to yield squeezed estimates (red). We test for differences in expression due to injection using glmQLFTest(). DEGs are defined as those with non-zero log-fold changes at a false discovery rate of 5%. Very few genes are significantly DE, indicating that injection has little effect on the transcriptome of mesenchyme cells. (Note that this logic is somewhat circular, as a large transcriptional effect may have caused cells of this type to be re-assigned to a different label. We discuss this in more detail in Section 14.5.1 below.) res &lt;- glmQLFTest(fit, coef=ncol(design)) summary(decideTests(res)) ## factor(tomato)TRUE ## Down 8 ## NotSig 5672 ## Up 8 topTags(res) ## Coefficient: factor(tomato)TRUE ## logFC logCPM F PValue FDR ## Phlda2 -4.3874 9.934 1638.59 1.812e-16 1.031e-12 ## Erdr1 2.0691 8.833 356.37 1.061e-11 3.017e-08 ## Mid1 1.5191 6.931 120.15 1.844e-08 3.497e-05 ## H13 -1.0596 7.540 80.80 2.373e-07 2.527e-04 ## Kcnq1ot1 1.3763 7.242 83.31 2.392e-07 2.527e-04 ## Akr1e1 -1.7206 5.128 79.31 2.665e-07 2.527e-04 ## Zdbf2 1.8008 6.797 83.66 6.809e-07 5.533e-04 ## Asb4 -0.9235 7.341 53.45 2.918e-06 2.075e-03 ## Impact 0.8516 7.353 50.31 4.145e-06 2.620e-03 ## Lum -0.6031 9.275 41.67 1.205e-05 6.851e-03 14.3.3 Putting it all together We repeat this process for each of the labels to identify injection-induced DE in each cell type. This is mostly straightforward as we can write a loop that simply performs the DE analysis for each subset of columns in summed. However, some additional care is required to automatically deal with labels that are not represented in both injected and background cells, for which a DE analysis between conditions is meaningless; or are not represented in a sufficient number of replicate samples to enable modelling of biological variability. This is represented by the extra checks related to design in the code chunk below. de.results &lt;- list() for (i in unique(summed$celltype.mapped)) { current &lt;- summed[,i==summed$celltype.mapped] y &lt;- DGEList(counts(current), samples=colData(current)) discarded &lt;- isOutlier(colSums(counts(current)), log=TRUE, type=&quot;lower&quot;) y &lt;- y[,!discarded] y &lt;- y[filterByExpr(y, group=current$tomato),] y &lt;- calcNormFactors(y) design &lt;- try( model.matrix(~factor(pool) + factor(tomato), y$samples), silent=TRUE ) if (is(design, &quot;try-error&quot;) || qr(design)$rank==nrow(design) || qr(design)$rank &lt; ncol(design)) { # Skipping labels without contrasts or without # enough residual d.f. to estimate the dispersion. next } y &lt;- estimateDisp(y, design) fit &lt;- glmQLFit(y, design) res &lt;- glmQLFTest(fit, coef=ncol(design)) de.results[[i]] &lt;- res } We examine the numbers of DEGs at a FDR of 5% for each label. In general, there seems to be very little differential expression that is introduced by injection. summaries &lt;- lapply(de.results, FUN=function(x) summary(decideTests(x))[,1]) sum.tab &lt;- do.call(rbind, summaries) sum.tab ## Down NotSig Up ## Mesenchyme 8 5672 8 ## Endothelium 3 3224 4 ## Allantois 64 4779 65 ## Erythroid3 10 5056 11 ## Erythroid1 8 2784 12 ## Pharyngeal mesoderm 5 5080 8 ## Forebrain/Midbrain/Hindbrain 8 6225 12 ## Spinal cord 14 4552 36 ## Cardiomyocytes 6 4361 5 ## Somitic mesoderm 10 2940 18 ## NMP 6 4105 12 ## Paraxial mesoderm 4 4756 5 ## Erythroid2 4 3389 9 ## Haematoendothelial progenitors 4 4106 7 ## Neural crest 6 3314 5 ## Rostral neurectoderm 3 2691 3 ## Intermediate mesoderm 5 3070 5 ## ExE mesoderm 5 5045 11 ## Surface ectoderm 7 5557 9 ## Gut 7 4479 7 ## Caudal Mesoderm 3 1417 4 ## Blood progenitors 2 1 2124 3 ## Stripped 7 393 0 ## Def. endoderm 3 1280 1 ## Blood progenitors 1 1 1248 2 ## PGC 1 527 0 ## Caudal epiblast 0 1405 1 ## Visceral endoderm 4 245 1 ## ExE endoderm 2 502 2 A survey of the DEGs from all labels identifies Xist as being consistently downregulated in the injected cells. This is consistent with the fact that the injected cells are male while the background cells are derived from pools of male and female embryos (due to experimental difficulties with resolving sex at this stage). The consistent downregulation of Phlda2 and Cdkn1c in the injected cells is also interesting, given that both are imprinted genes. # TODO: easier consolidation. degs &lt;- lapply(de.results, FUN=function(x) rownames(topTags(x, p.value=0.05))) common.degs &lt;- sort(table(unlist(degs)), decreasing=TRUE) head(common.degs, 20) ## ## Erdr1 Xist Mid1 Cdkn1c Phlda2 Kcnq1ot1 Akr1e1 Nnat Slc38a4 Hopx H13 ## 25 24 22 20 20 18 12 8 8 7 6 ## Mcts2 Zdbf2 Hbb-y Asb4 Baiap2l1 Hist1h1b Hist1h1e Impact Peg3 ## 4 4 3 2 2 2 2 2 2 We also list the labels that were skipped due to the absence of replicates or contrasts. If it is necessary to extract statistics in the absence of replicates, several strategies can be applied such as reducing the complexity of the model or using a predefined value for the NB dispersion. We refer readers to the edgeR user’s guide for more details. setdiff(unique(summed$celltype.mapped), names(summaries)) ## [1] &quot;ExE ectoderm&quot; &quot;Caudal neurectoderm&quot; &quot;Parietal endoderm&quot; &quot;Notochord&quot; ## [5] &quot;Mixed mesoderm&quot; 14.4 Differential abundance between conditions 14.4.1 Overview In a DA analysis, we test for significant changes in per-label cell abundance across conditions. This will reveal which cell types are depleted or enriched upon treatment, which is arguably just as interesting as changes in expression within each cell type. The DA analysis has a long history in flow cytometry (Finak et al. 2014; A. T. L. Lun, Richard, and Marioni 2017) where it is routinely used to examine the effects of different conditions on the composition of complex cell populations. By performing it here, we effectively treat scRNA-seq as a “super-FACS” technology for defining relevant subpopulations using the entire transcriptome. We prepare for the DA analysis by quantifying the number of cells assigned to each label (or cluster). In this case, we are aiming to identify labels that change in abundance among the compartment of injected cells compared to the background. abundances &lt;- table(merged$celltype.mapped, merged$sample) abundances &lt;- unclass(abundances) head(abundances) ## ## 5 6 7 8 9 10 ## Allantois 97 15 139 127 318 259 ## Blood progenitors 1 6 3 16 6 8 17 ## Blood progenitors 2 31 8 28 21 43 114 ## Cardiomyocytes 85 21 79 31 174 211 ## Caudal Mesoderm 10 10 9 3 10 29 ## Caudal epiblast 2 2 0 0 22 45 14.4.2 Performing the DA analysis Our DA analysis will again be performed with the edgeR package. This allows us to take advantage of the NB GLM methods to model overdispersed count data in the presence of limited replication - except that the counts are not of reads per gene, but of cells per label (A. T. L. Lun, Richard, and Marioni 2017). The aim is to share information across labels to improve our estimates of the biological variability in cell abundance between replicates. # Attaching some column metadata. extra.info &lt;- colData(merged)[match(colnames(abundances), merged$sample),] y.ab &lt;- DGEList(abundances, samples=extra.info) y.ab ## An object of class &quot;DGEList&quot; ## $counts ## ## 5 6 7 8 9 10 ## Allantois 97 15 139 127 318 259 ## Blood progenitors 1 6 3 16 6 8 17 ## Blood progenitors 2 31 8 28 21 43 114 ## Cardiomyocytes 85 21 79 31 174 211 ## Caudal Mesoderm 10 10 9 3 10 29 ## 29 more rows ... ## ## $samples ## group lib.size norm.factors batch cell barcode sample stage tomato pool ## 5 1 2298 1 5 cell_9769 AAACCTGAGACTGTAA 5 E8.5 TRUE 3 ## 6 1 1026 1 6 cell_12180 AAACCTGCAGATGGCA 6 E8.5 FALSE 3 ## 7 1 2740 1 7 cell_13227 AAACCTGAGACAAGCC 7 E8.5 TRUE 4 ## 8 1 2904 1 8 cell_16234 AAACCTGCAAACCCAT 8 E8.5 FALSE 4 ## 9 1 4057 1 9 cell_19332 AAACCTGCAACGATCT 9 E8.5 TRUE 5 ## 10 1 6401 1 10 cell_23875 AAACCTGAGGCATGTG 10 E8.5 FALSE 5 ## stage.mapped celltype.mapped closest.cell doub.density cluster ## 5 E8.25 Mesenchyme cell_24159 0.029850 19 ## 6 E8.25 Somitic mesoderm cell_63247 0.291916 6 ## 7 E8.5 Somitic mesoderm cell_25454 0.601740 17 ## 8 E8.25 ExE mesoderm cell_139075 0.004733 9 ## 9 E8.0 ExE mesoderm cell_116116 0.079415 15 ## 10 E8.5 Forebrain/Midbrain/Hindbrain cell_39343 0.040747 1 We filter out low-abundance labels as previously described. This avoids cluttering the result table with very rare subpopulations that contain only a handful of cells. For a DA analysis of cluster abundances, filtering is generally not required as most clusters will not be of low-abundance (otherwise there would not have been enough evidence to define the cluster in the first place). keep &lt;- filterByExpr(y.ab, group=y.ab$samples$tomato) y.ab &lt;- y.ab[keep,] summary(keep) ## Mode FALSE TRUE ## logical 10 24 Unlike DE analyses, we do not perform an additional normalization step with calcNormFactors(). This means that we are only normalizing based on the “library size”, i.e., the total number of cells in each sample. Any changes we detect between conditions will subsequently represent differences in the proportion of cells in each cluster. The motivation behind this decision is discussed in more detail in Section 14.4.3. We formulate the design matrix with a blocking factor for the batch of origin for each sample and an additive term for the td-Tomato status (i.e., injection effect). Here, the log-fold change in our model refers to the change in cell abundance after injection, rather than the change in gene expression. design &lt;- model.matrix(~factor(pool) + factor(tomato), y.ab$samples) We use the estimateDisp() function to estimate the NB dipersion for each cluster (Figure 14.4). We turn off the trend as we do not have enough points for its stable estimation. y.ab &lt;- estimateDisp(y.ab, design, trend=&quot;none&quot;) summary(y.ab$common.dispersion) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0614 0.0614 0.0614 0.0614 0.0614 0.0614 plotBCV(y.ab, cex=1) Figure 14.4: Biological coefficient of variation (BCV) for each label with respect to its average abundance. BCVs are defined as the square root of the NB dispersion. Common dispersion estimates are shown in red. We repeat this process with the QL dispersion, again disabling the trend (Figure 14.5). fit.ab &lt;- glmQLFit(y.ab, design, robust=TRUE, abundance.trend=FALSE) summary(fit.ab$var.prior) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.25 1.25 1.25 1.25 1.25 1.25 summary(fit.ab$df.prior) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## Inf Inf Inf Inf Inf Inf plotQLDisp(fit.ab, cex=1) Figure 14.5: QL dispersion estimates for each label with respect to its average abundance. Quarter-root values of the raw estimates are shown in black while the shrunken estimates are shown in red. Shrinkage is performed towards the common dispersion in blue. We test for differences in abundance between td-Tomato-positive and negative samples using glmQLFTest(). We see that extra-embryonic ectoderm is strongly depleted in the injected cells. This is consistent with the expectation that cells injected into the blastocyst should not contribute to extra-embryonic tissue. The injected cells also contribute more to the mesenchyme, which may also be of interest. res &lt;- glmQLFTest(fit.ab, coef=ncol(design)) summary(decideTests(res)) ## factor(tomato)TRUE ## Down 1 ## NotSig 22 ## Up 1 topTags(res) ## Coefficient: factor(tomato)TRUE ## logFC logCPM F PValue FDR ## ExE ectoderm -6.5663 13.02 66.267 1.352e-10 3.245e-09 ## Mesenchyme 1.1652 16.29 11.291 1.535e-03 1.841e-02 ## Allantois 0.8345 15.51 5.312 2.555e-02 1.621e-01 ## Cardiomyocytes 0.8484 14.86 5.204 2.701e-02 1.621e-01 ## Neural crest -0.7706 14.76 4.106 4.830e-02 2.149e-01 ## Endothelium 0.7519 14.29 3.912 5.371e-02 2.149e-01 ## Erythroid3 -0.6431 17.28 3.604 6.367e-02 2.183e-01 ## Haematoendothelial progenitors 0.6581 14.72 3.124 8.351e-02 2.505e-01 ## ExE mesoderm 0.3805 15.68 1.181 2.827e-01 6.258e-01 ## Pharyngeal mesoderm 0.3793 15.72 1.169 2.850e-01 6.258e-01 14.4.3 Handling composition effects 14.4.3.1 Background As mentioned above, we do not use calcNormFactors() in our default DA analysis. This normalization step assumes that most of the input features are not different between conditions. While this assumption is reasonable for most types of gene expression data, it is generally too strong for cell type abundance - most experiments consist of only a few cell types that may all change in abundance upon perturbation. Thus, our default approach is to only normalize based on the total number of cells in each sample, which means that we are effectively testing for differential proportions between conditions. Unfortunately, the use of the total number of cells leaves us susceptible to composition effects. For example, a large increase in abundance for one cell subpopulation will introduce decreases in proportion for all other subpopulations - which is technically correct, but may be misleading if one concludes that those other subpopulations are decreasing in abundance of their own volition. If composition biases are proving problematic for interpretation of DA results, we have several avenues for removing them or mitigating their impact by leveraging a priori biological knowledge. 14.4.3.2 Assuming most labels do not change If it is possible to assume that most labels (i.e., cell types) do not change in abundance, we can use calcNormFactors() to compute normalization factors. This seems to be a fairly reasonable assumption for the WT chimeras where the injection is expected to have only a modest effect at most. y.ab2 &lt;- calcNormFactors(y.ab) y.ab2$samples$norm.factors ## [1] 1.0055 1.0833 1.1658 0.7614 1.0616 0.9743 We then proceed with the remainder of the edgeR analysis, shown below in condensed format. Many of the positive log-fold changes are shifted towards zero, consistent with the removal of composition biases from the presence of extra-embryonic ectoderm in only background cells. In particular, the mesenchyme is no longer significantly DA after injection. y.ab2 &lt;- estimateDisp(y.ab2, design, trend=&quot;none&quot;) fit.ab2 &lt;- glmQLFit(y.ab2, design, robust=TRUE, abundance.trend=FALSE) res2 &lt;- glmQLFTest(fit.ab2, coef=ncol(design)) topTags(res2, n=10) ## Coefficient: factor(tomato)TRUE ## logFC logCPM F PValue FDR ## ExE ectoderm -6.9215 13.17 70.364 5.738e-11 1.377e-09 ## Mesenchyme 0.9513 16.27 6.787 1.219e-02 1.143e-01 ## Neural crest -1.0032 14.78 6.464 1.429e-02 1.143e-01 ## Erythroid3 -0.8504 17.35 5.517 2.299e-02 1.380e-01 ## Cardiomyocytes 0.6400 14.84 2.735 1.047e-01 4.809e-01 ## Allantois 0.6054 15.51 2.503 1.202e-01 4.809e-01 ## Forebrain/Midbrain/Hindbrain -0.4943 16.55 1.928 1.713e-01 5.178e-01 ## Endothelium 0.5482 14.27 1.917 1.726e-01 5.178e-01 ## Erythroid2 -0.4818 16.00 1.677 2.015e-01 5.373e-01 ## Haematoendothelial progenitors 0.4262 14.73 1.185 2.818e-01 6.240e-01 14.4.3.3 Removing the offending labels Another approach is to repeat the analysis after removing DA clusters containing many cells. This provides a clearer picture of the changes in abundance among the remaining clusters. Here, we remove the extra-embryonic ectoderm and reset the total number of cells for all samples with keep.lib.sizes=FALSE. offenders &lt;- &quot;ExE ectoderm&quot; y.ab3 &lt;- y.ab[setdiff(rownames(y.ab), offenders),, keep.lib.sizes=FALSE] y.ab3$samples ## group lib.size norm.factors batch cell barcode sample stage tomato pool ## 5 1 2268 1 5 cell_9769 AAACCTGAGACTGTAA 5 E8.5 TRUE 3 ## 6 1 993 1 6 cell_12180 AAACCTGCAGATGGCA 6 E8.5 FALSE 3 ## 7 1 2708 1 7 cell_13227 AAACCTGAGACAAGCC 7 E8.5 TRUE 4 ## 8 1 2749 1 8 cell_16234 AAACCTGCAAACCCAT 8 E8.5 FALSE 4 ## 9 1 4009 1 9 cell_19332 AAACCTGCAACGATCT 9 E8.5 TRUE 5 ## 10 1 6224 1 10 cell_23875 AAACCTGAGGCATGTG 10 E8.5 FALSE 5 ## stage.mapped celltype.mapped closest.cell doub.density cluster ## 5 E8.25 Mesenchyme cell_24159 0.029850 19 ## 6 E8.25 Somitic mesoderm cell_63247 0.291916 6 ## 7 E8.5 Somitic mesoderm cell_25454 0.601740 17 ## 8 E8.25 ExE mesoderm cell_139075 0.004733 9 ## 9 E8.0 ExE mesoderm cell_116116 0.079415 15 ## 10 E8.5 Forebrain/Midbrain/Hindbrain cell_39343 0.040747 1 y.ab3 &lt;- estimateDisp(y.ab3, design, trend=&quot;none&quot;) fit.ab3 &lt;- glmQLFit(y.ab3, design, robust=TRUE, abundance.trend=FALSE) res3 &lt;- glmQLFTest(fit.ab3, coef=ncol(design)) topTags(res3, n=10) ## Coefficient: factor(tomato)TRUE ## logFC logCPM F PValue FDR ## Mesenchyme 1.1274 16.32 11.501 0.001438 0.03308 ## Allantois 0.7950 15.54 5.231 0.026836 0.18284 ## Cardiomyocytes 0.8104 14.90 5.152 0.027956 0.18284 ## Neural crest -0.8085 14.80 4.903 0.031798 0.18284 ## Erythroid3 -0.6808 17.32 4.387 0.041743 0.19202 ## Endothelium 0.7151 14.32 3.830 0.056443 0.21636 ## Haematoendothelial progenitors 0.6189 14.76 2.993 0.090338 0.29683 ## Def. endoderm 0.4911 12.43 1.084 0.303347 0.67818 ## ExE mesoderm 0.3419 15.71 1.036 0.314058 0.67818 ## Pharyngeal mesoderm 0.3407 15.76 1.025 0.316623 0.67818 A similar strategy can be used to focus on proportional changes within a single subpopulation of a very heterogeneous data set. For example, if we collected a whole blood data set, we could subset to T cells and test for changes in T cell subtypes (memory, killer, regulatory, etc.) using the total number of T cells in each sample as the library size. This avoids detecting changes in T cell subsets that are driven by compositional effects from changes in abundance of, say, B cells in the same sample. 14.4.3.4 Testing against a log-fold change threshold Here, we assume that composition bias introduces a spurious log2-fold change of no more than \\(\\tau\\) for a non-DA label. This can be roughly interpreted as the maximum log-fold change in the total number of cells caused by DA in other labels. (By comparison, fold-differences in the totals due to differences in capture efficiency or the size of the original cell population are not attributable to composition bias and should not be considered when choosing \\(\\tau\\).) We then mitigate the effect of composition biases by testing each label for changes in abundance beyond \\(\\tau\\) (McCarthy and Smyth 2009; A. T. L. Lun, Richard, and Marioni 2017). res.lfc &lt;- glmTreat(fit.ab, coef=ncol(design), lfc=1) summary(decideTests(res.lfc)) ## factor(tomato)TRUE ## Down 1 ## NotSig 23 ## Up 0 topTags(res.lfc) ## Coefficient: factor(tomato)TRUE ## logFC unshrunk.logFC logCPM PValue FDR ## ExE ectoderm -6.5663 -7.0015 13.02 2.626e-09 6.303e-08 ## Mesenchyme 1.1652 1.1658 16.29 1.323e-01 9.950e-01 ## Cardiomyocytes 0.8484 0.8498 14.86 3.796e-01 9.950e-01 ## Allantois 0.8345 0.8354 15.51 3.975e-01 9.950e-01 ## Neural crest -0.7706 -0.7719 14.76 4.501e-01 9.950e-01 ## Endothelium 0.7519 0.7536 14.29 4.665e-01 9.950e-01 ## Haematoendothelial progenitors 0.6581 0.6591 14.72 5.622e-01 9.950e-01 ## Def. endoderm 0.5262 0.5311 12.40 5.934e-01 9.950e-01 ## Erythroid3 -0.6431 -0.6432 17.28 6.118e-01 9.950e-01 ## Caudal Mesoderm -0.3996 -0.4036 12.09 6.827e-01 9.950e-01 The choice of \\(\\tau\\) can be loosely motivated by external experimental data. For example, if we observe a doubling of cell numbers in an in vitro system after treatment, we might be inclined to set \\(\\tau=1\\). This ensures that any non-DA subpopulation is not reported as being depleted after treatment. Some caution is still required, though - even if the external numbers are accurate, we need to assume that cell capture efficiency is (on average) equal between conditions to justify their use as \\(\\tau\\). And obviously, the use of a non-zero \\(\\tau\\) will reduce power to detect real changes when the composition bias is not present. 14.5 Comments on interpretation 14.5.1 DE or DA? Two sides of the same coin While useful, the distinction between DA and DE analyses is inherently artificial for scRNA-seq data. This is because the labels used in the former are defined based on the genes to be tested in the latter. To illustrate, consider a scRNA-seq experiment involving two biological conditions with several shared cell types. We focus on a cell type \\(X\\) that is present in both conditions but contains some DEGs between conditions. This leads to two possible outcomes: The DE between conditions causes \\(X\\) to form two separate clusters (say, \\(X_1\\) and \\(X_2\\)) in expression space. This manifests as DA where \\(X_1\\) is enriched in one condition and \\(X_2\\) is enriched in the other condition. The DE between conditions is not sufficient to split \\(X\\) into two separate clusters, e.g., because the data integration procedure identifies them as corresponding cell types and merges them together. This means that the differences between conditions manifest as DE within the single cluster corresponding to \\(X\\). We have described the example above in terms of clustering, but the same arguments apply for any labelling strategy based on the expression profiles, e.g., automated cell type assignment (Chapter 12). Moreover, the choice between outcomes 1 and 2 is made implicitly by the combined effect of the data merging, clustering and label assignment procedures. For example, differences between conditions are more likely to manifest as DE for coarser clusters and as DA for finer clusters, but this is difficult to predict reliably. The moral of the story is that DA and DE analyses are simply two different perspectives on the same phenomena. For any comprehensive characterization of differences between populations, it is usually necessary to consider both analyses. Indeed, they complement each other almost by definition, e.g., clustering parameters that reduce DE will increase DA and vice versa. 14.5.2 Sacrificing biology by integration Earlier in this chapter, we defined clusters from corrected values after applying fastMNN() to cells from all samples in the chimera dataset. Alert readers may realize that this would result in the removal of biological differences between our conditions. Any systematic difference in expression caused by injection would be treated as a batch effect and lost when cells from different samples are aligned to the same coordinate space. Now, one may not consider injection to be an interesting biological effect, but the same reasoning applies for other conditions, e.g., integration of wild-type and knock-out samples (Section 14.6) would result in the loss of any knock-out effect in the corrected values. This loss is both expected and desirable. As we mentioned in Section 13.7, the main motivation for performing batch correction is to enable us to characterize population heterogeneity in a consistent manner across samples. This remains true in situations with multiple conditions where we would like one set of clusters and annotations that can be used as common labels for the DE or DA analyses described above. The alternative would be to cluster each condition separately and to attempt to identify matching clusters across conditions - not straightforward for poorly separated clusters in contexts like differentiation. It may seem distressing to some that a (potentially very interesting) biological difference between conditions is lost during correction. However, this concern is largely misplaced as the correction is only ever used for defining common clusters and annotations. The DE analysis itself is performed on pseudo-bulk samples created from the uncorrected counts, preserving the biological difference and ensuring that it manifests in the list of DE genes for affected cell types. Of course, if the DE is strong enough, it may result in a new condition-specific cluster that would be captured by a DA analysis as discussed in Section 14.5.1. One final consideration is the interaction of condition-specific expression with the assumptions of each batch correction method. For example, MNN correction assumes that the differences between samples are orthogonal to the variation within samples. Arguably, this assumption is becomes more questionable if the between-sample differences are biological in nature, e.g., a treatment effect that makes one cell type seem more transcriptionally similar to another may cause the wrong clusters to be aligned across conditions. As usual, users will benefit from the diagnostics described in Chapter 13 and a healthy dose of skepticism. 14.6 Avoiding problems with ambient RNA 14.6.1 Motivation Ambient contamination is a phenomenon that is generally most pronounced in massively multiplexed scRNA-seq protocols. Briefly, extracellular RNA (most commonly released upon cell lysis) is captured along with each cell in its reaction chamber, contributing counts to genes that are not otherwise expressed in that cell (see Section 6.5). Differences in the ambient profile across samples are not uncommon when dealing with strong experimental perturbations where strong expression of a gene in a condition-specific cell type can “bleed over” into all other cell types in the same sample. This is problematic for DE analyses between conditions, as DEGs detected for a particular cell type may be driven by differences in the ambient profiles rather than any intrinsic change in gene regulation. To illustrate, we consider the Tal1-knockout (KO) chimera data from Pijuan-Sala et al. (2019). This is very similar to the WT chimera dataset we previously examined, only differing in that the Tal1 gene was knocked out in the injected cells. Tal1 is a transcription factor that has known roles in erythroid differentiation; the aim of the experiment was to determine if blocking of the erythroid lineage diverted cells to other developmental fates. (To cut a long story short: yes, it did.) library(MouseGastrulationData) sce.tal1 &lt;- Tal1ChimeraData() rownames(sce.tal1) &lt;- uniquifyFeatureNames( rowData(sce.tal1)$ENSEMBL, rowData(sce.tal1)$SYMBOL) sce.tal1 ## class: SingleCellExperiment ## dim: 29453 56122 ## metadata(0): ## assays(1): counts ## rownames(29453): Xkr4 Gm1992 ... CAAA01147332.1 tomato-td ## rowData names(2): ENSEMBL SYMBOL ## colnames(56122): cell_1 cell_2 ... cell_56121 cell_56122 ## colData names(8): cell barcode ... celltype.mapped pool ## reducedDimNames(1): pca.corrected ## spikeNames(0): ## altExpNames(0): We will perform a DE analysis between WT and KO cells labelled as “neural crest”. We observe that the strongest DEGs are the hemoglobins, which are downregulated in the injected cells. This is rather surprising as cells undergoing neuronal development should not express hemoglobins in the first place. The most sober explanation is that the background samples contain more hemoglobin transcripts in the ambient solution due to leakage from erythrocytes (or their precursors) during sorting and dissociation. summed.tal1 &lt;- aggregateAcrossCells(sce.tal1, ids=DataFrame(sample=sce.tal1$sample, label=sce.tal1$celltype.mapped) ) summed.neural &lt;- summed.tal1[,summed.tal1$label==&quot;Neural crest&quot;] summed.neural ## class: SingleCellExperiment ## dim: 29453 4 ## metadata(0): ## assays(1): counts ## rownames(29453): Xkr4 Gm1992 ... CAAA01147332.1 tomato-td ## rowData names(2): ENSEMBL SYMBOL ## colnames: NULL ## colData names(10): cell barcode ... sample label ## reducedDimNames(1): pca.corrected ## spikeNames(0): ## altExpNames(0): # Standard edgeR analysis, as described above. y.neural &lt;- DGEList(counts(summed.neural), samples=colData(summed.neural)) keep.neural &lt;- filterByExpr(y.neural, group=y.neural$samples$tomato) y.neural &lt;- y.neural[keep.neural,] y.neural &lt;- calcNormFactors(y.neural) block &lt;- y.neural$samples$sample %% 2 == 0 design &lt;- model.matrix(~factor(block) + factor(tomato), y.neural$samples) y.neural &lt;- estimateDisp(y.neural, design) fit.neural &lt;- glmQLFit(y.neural, design, robust=TRUE) res.neural &lt;- glmQLFTest(fit.neural, coef=ncol(design)) summary(decideTests(res.neural)) ## factor(tomato)TRUE ## Down 351 ## NotSig 9818 ## Up 481 topTags(res.neural, n=10) ## Coefficient: factor(tomato)TRUE ## logFC logCPM F PValue FDR ## Hba-a1 -8.5967 6.744 2756.6 0.000e+00 0.000e+00 ## Hbb-y -8.4156 8.357 7364.3 0.000e+00 0.000e+00 ## Hbb-bh1 -8.0910 9.160 10758.3 0.000e+00 0.000e+00 ## Hba-x -7.7248 8.533 7896.5 0.000e+00 0.000e+00 ## Xist -7.5557 8.212 6657.3 0.000e+00 0.000e+00 ## Hba-a2 -8.8662 5.813 1517.7 1.724e-310 3.060e-307 ## Erdr1 1.8895 7.616 1407.1 2.347e-289 3.570e-286 ## Cdkn1c -8.8645 4.961 814.9 8.800e-173 1.171e-169 ## Uba52 -0.8797 8.386 424.2 1.866e-92 2.208e-89 ## Grb10 -1.4034 6.583 401.4 1.139e-87 1.213e-84 14.6.2 Discarding ambient DEGs The presence of ambient contamination makes it difficult to interpret multi-condition DE analyses. To mitigate its effects, we need to obtain an estimate of the ambient “expression” profile from the raw count matrix for each sample. We follow the approach used in emptyDrops() (Lun et al. 2019) and consider all barcodes with total counts below 100 to represent empty droplets. This allows us to construct a matrix containing UMI counts attributable to contaminating ambient transcripts in each sample. raw.tal1 &lt;- Tal1ChimeraData(type=&quot;raw&quot;) library(Matrix) ambient &lt;- vector(&quot;list&quot;, length(raw.tal1)) for (i in seq_along(raw.tal1)) { curmat &lt;- counts(raw.tal1[[i]]) is.empty &lt;- colSums(curmat) &lt; 100 ambient[[i]] &lt;- rowSums(curmat[,is.empty]) } ambient &lt;- do.call(cbind, ambient) colnames(ambient) &lt;- names(raw.tal1) rownames(ambient) &lt;- uniquifyFeatureNames( rowData(raw.tal1[[1]])$ENSEMBL, rowData(raw.tal1[[1]])$SYMBOL) head(ambient) ## 1 2 3 4 ## Xkr4 1 0 0 0 ## Gm1992 0 0 0 0 ## Gm37381 1 0 1 0 ## Rp1 0 1 0 1 ## Sox17 75 76 31 53 ## Gm37323 0 0 0 0 Given prior knowledge of mutually exclusive gene expression profiles, we estimate the contribution of ambient RNA to each sample (Young and Behjati 2018). In this case, we assume (reasonably) that hemoglobins should not be expressed in neural crest cells and use this to estimate the contamination in each sample. Specifically, we scale ambient.hb so that the hemoglobin coverage is the same as the corresponding sample of neural.hb; this represents an estimate of the contaminating counts in each pseudo-bulk sample. is.hbb &lt;- grep(&quot;^Hb[ab]-&quot;, rownames(summed.neural)) neural.hb &lt;- colSums(counts(summed.neural)[is.hbb,]) ambient.hb &lt;- colSums(ambient[is.hbb,]) scaled.ambient &lt;- t(t(ambient) * neural.hb/ambient.hb) head(scaled.ambient) ## 1 2 3 4 ## Xkr4 0.003573 0.000000 0.00000 0.00000 ## Gm1992 0.000000 0.000000 0.00000 0.00000 ## Gm37381 0.003573 0.000000 0.07972 0.00000 ## Rp1 0.000000 0.004639 0.00000 0.07096 ## Sox17 0.268000 0.352586 2.47134 3.76063 ## Gm37323 0.000000 0.000000 0.00000 0.00000 For each gene, we compute the proportion of the average count attributable to ambient contamination. Genes in which over 10% of the counts are ambient-derived are subsequently discarded from our analysis. Roughly speaking, this threshold prevents ambient contribution from biasing the true fold-change by more than 10%, which is a tolerable margin of error for most applications. (In more extreme situations with large condition-specific differences between the total counts of the pseudo-bulk samples, one might consider applying this threshold to the proportions computed within each condition instead.) This approach yields a slightly smaller list of DEGs without the hemoglobins - by definition, but encouraging nonetheless as it suggests that any other (less obvious) effects of ambient contamination have also been removed. ratio &lt;- rowMeans(scaled.ambient) / rowMeans(counts(summed.neural)) non.ambient &lt;- ratio &lt; 0.1 summary(non.ambient) ## Mode FALSE TRUE NA&#39;s ## logical 4290 14869 10294 okay.genes &lt;- names(non.ambient)[which(non.ambient)] res.neural2 &lt;- res.neural[rownames(res.neural) %in% okay.genes,] summary(decideTests(res.neural2)) ## factor(tomato)TRUE ## Down 315 ## NotSig 9574 ## Up 452 topTags(res.neural2) ## Coefficient: factor(tomato)TRUE ## logFC logCPM F PValue FDR ## Xist -7.5557 8.212 6657.3 0.000e+00 0.000e+00 ## Erdr1 1.8895 7.616 1407.1 2.347e-289 1.213e-285 ## Uba52 -0.8797 8.386 424.2 1.866e-92 6.432e-89 ## Grb10 -1.4034 6.583 401.4 1.139e-87 2.945e-84 ## Gt(ROSA)26Sor 1.4813 5.716 351.9 2.801e-77 5.792e-74 ## Fdps 0.9814 7.218 337.2 3.677e-74 6.337e-71 ## Mest 0.5493 10.983 319.7 1.798e-70 2.657e-67 ## Impact 1.3967 5.718 314.7 2.051e-69 2.651e-66 ## H13 -1.4817 5.909 301.7 1.174e-66 1.349e-63 ## Msmo1 1.4938 5.439 301.1 1.580e-66 1.634e-63 14.6.3 Subtracting ambient counts It is worth commenting on the seductive idea of subtracting the ambient counts from the pseudo-bulk samples. This may seem like the most obvious approach for removing ambient contamination, but unfortunately, subtracted counts have unpredictable statistical properties due the distortion of the mean-variance relationship. Minor relative fluctuations at very large counts become large fold-changes after subtraction, manifesting as spurious DE in genes where a substantial proportion of counts is derived from the ambient solution. For example, several hemoglobin genes retain strong DE even after subtraction of the scaled ambient profile. subtracted &lt;- counts(summed.neural) - scaled.ambient subtracted &lt;- round(subtracted) subtracted[subtracted &lt; 0] &lt;- 0 subtracted[is.hbb,] ## [,1] [,2] [,3] [,4] ## Hbb-bt 0 0 7 18 ## Hbb-bs 1 2 31 42 ## Hbb-bh2 0 0 1 0 ## Hbb-bh1 2 0 0 0 ## Hbb-y 0 0 32 106 ## Hba-x 1 1 0 0 ## Hba-a1 0 0 365 451 ## Hba-a2 0 0 313 330 Another tempting approach is to use interaction models to implicitly subtract the ambient effect during GLM fitting. The assumption would be that, for genuine DEGs, the log-fold change within cells is larger in magnitude than those in the ambient solution (where the effect would be diluted by contributions from cell types where the gene is not DE). However, this is not always the case; a DE analysis of the ambient counts indicates that the hemoglobin log-fold change is actually stronger in the neural crest cells compared to the ambient solution, which leads to the rather awkward conclusion that the WT neural crest cells are expressing hemoglobin beyond that explained by ambient contamination. In addition, per-gene subtraction will fail to consistently detect DEGs that occur in all cell types as there is no longer a dilution effect being applied to the log-fold change in the ambient solution. # Re-using keep.neural to simplify comparison. y.ambient &lt;- DGEList(ambient) y.ambient &lt;- y.ambient[keep.neural,] y.ambient &lt;- calcNormFactors(y.ambient) y.ambient &lt;- estimateDisp(y.ambient, design) fit.ambient &lt;- glmQLFit(y.ambient, design, robust=TRUE) res.ambient &lt;- glmQLFTest(fit.ambient, coef=ncol(design)) summary(decideTests(res.ambient)) ## factor(tomato)TRUE ## Down 1581 ## NotSig 7742 ## Up 1327 topTags(res.ambient, n=10) ## Coefficient: factor(tomato)TRUE ## logFC logCPM F PValue FDR ## Hbb-y -5.244 12.797 16646 2.281e-28 2.430e-24 ## Hba-x -4.805 13.117 13773 1.272e-27 6.744e-24 ## Hbb-bh1 -5.049 13.716 13178 1.900e-27 6.744e-24 ## Hba-a1 -4.640 10.728 11847 4.992e-27 1.329e-23 ## Hba-a2 -4.498 9.473 8862 6.938e-26 1.478e-22 ## Blvrb -4.301 7.645 4073 7.931e-23 1.408e-19 ## Xist -4.361 7.489 4004 9.255e-23 1.408e-19 ## Gypa -5.113 7.208 3846 1.331e-22 1.695e-19 ## Car2 -3.492 8.532 3815 1.433e-22 1.695e-19 ## Hbb-bs -4.915 7.203 3418 3.869e-22 4.120e-19 Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] Matrix_1.2-18 MouseGastrulationData_1.1.0 edgeR_3.29.0 [4] limma_3.43.0 scater_1.15.12 ggplot2_3.2.1 [7] BiocSingular_1.3.1 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [10] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [13] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [16] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [19] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 bit64_0.9-7 httr_1.4.1 [4] RColorBrewer_1.1-2 backports_1.1.5 tools_4.0.0 [7] R6_2.4.1 irlba_2.3.3 vipor_0.4.5 [10] DBI_1.1.0 lazyeval_0.2.2 colorspace_1.4-1 [13] withr_2.1.2 tidyselect_0.2.5 gridExtra_2.3 [16] processx_3.4.1 curl_4.3 bit_1.1-14 [19] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [22] bookdown_0.16 scales_1.1.0 callr_3.4.0 [25] rappdirs_0.3.1 stringr_1.4.0 digest_0.6.23 [28] rmarkdown_2.0 XVector_0.27.0 pkgconfig_2.0.3 [31] htmltools_0.4.0 fastmap_1.0.1 dbplyr_1.4.2 [34] highr_0.8 rlang_0.4.2 RSQLite_2.2.0 [37] shiny_1.4.0 DelayedMatrixStats_1.9.0 farver_2.0.1 [40] dplyr_0.8.3 RCurl_1.95-4.12 magrittr_1.5 [43] GenomeInfoDbData_1.2.2 Rcpp_1.0.3 ggbeeswarm_0.6.0 [46] munsell_0.5.0 viridis_0.5.1 lifecycle_0.1.0 [49] stringi_1.4.3 yaml_2.2.0 zlibbioc_1.33.0 [52] BiocFileCache_1.11.4 AnnotationHub_2.19.3 grid_4.0.0 [55] blob_1.2.0 promises_1.1.0 ExperimentHub_1.13.5 [58] crayon_1.3.4 lattice_0.20-38 cowplot_1.0.0 [61] splines_4.0.0 locfit_1.5-9.1 zeallot_0.1.0 [64] knitr_1.26 ps_1.3.0 pillar_1.4.3 [67] BiocVersion_3.11.1 glue_1.3.1 evaluate_0.14 [70] BiocManager_1.30.10 httpuv_1.5.2 vctrs_0.2.1 [73] gtable_0.3.0 purrr_0.3.3 assertthat_0.2.1 [76] xfun_0.11 mime_0.8 rsvd_1.0.2 [79] xtable_1.8-4 later_1.0.0 viridisLite_0.3.0 [82] tibble_2.1.3 pheatmap_1.0.12 AnnotationDbi_1.49.0 [85] memoise_1.1.0 beeswarm_0.2.3 statmod_1.4.32 [88] interactiveDisplayBase_1.25.0 Bibliography "],
["doublet-detection.html", "Chapter 15 Doublet detection 15.1 Overview 15.2 Doublet detection with clusters 15.3 Doublet detection by simulation 15.4 Further comments Session Info", " Chapter 15 Doublet detection .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 15.1 Overview In single-cell RNA sequencing (scRNA-seq) experiments, doublets are artifactual libraries generated from two cells. They typically arise due to errors in cell sorting or capture, especially in droplet-based protocols (Zheng et al. 2017) involving thousands of cells. Doublets are obviously undesirable when the aim is to characterize populations at the single-cell level. In particular, doublets can be mistaken for intermediate populations or transitory states that do not actually exist. Thus, it is desirable to identify and remove doublet libraries so that they do not compromise interpretation of the results. Several experimental strategies are available for doublet removal. One approach exploits natural genetic variation when pooling cells from multiple donor individuals (Kang et al. 2018). Doublets can be identified as libraries with allele combinations that do not exist in any single donor. Another approach is to mark a subset of cells (e.g., all cells from one sample) with an antibody conjugated to a different oligonucleotide (Stoeckius, Zheng, et al. 2017). Upon pooling, libraries that are observed to have different oligonucleotides are considered to be doublets and removed. These approaches can be highly effective but rely on experimental information that may not be available. A more general approach is to infer doublets from the expression profiles alone (Dahlin et al. 2018). In this workflow, we will describe two purely computational approaches for detecting doublets from scRNA-seq data. The main difference between these two methods is whether or not they need cluster information beforehand. We will demonstrate the use of these methods on 10X Genomics data from a droplet-based scRNA-seq study of the mouse mammary gland (Bach et al. 2017). View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.mam &lt;- BachMammaryData(samples=&quot;G_1&quot;) #--- gene-annotation ---# library(scater) rownames(sce.mam) &lt;- uniquifyFeatureNames( rowData(sce.mam)$Ensembl, rowData(sce.mam)$Symbol) library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.mam)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rowData(sce.mam)$Ensembl, keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) #--- quality-control ---# is.mito &lt;- rowData(sce.mam)$SEQNAME == &quot;MT&quot; stats &lt;- perCellQCMetrics(sce.mam, subsets=list(Mito=which(is.mito))) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;subsets_Mito_percent&quot;) sce.mam &lt;- sce.mam[,!qc$discard] #--- normalization ---# library(scran) set.seed(101000110) clusters &lt;- quickCluster(sce.mam) sce.mam &lt;- computeSumFactors(sce.mam, clusters=clusters) sce.mam &lt;- logNormCounts(sce.mam) #--- variance-modelling ---# set.seed(00010101) dec.mam &lt;- modelGeneVarByPoisson(sce.mam) top.mam &lt;- getTopHVGs(dec.mam, prop=0.1) #--- dimensionality-reduction ---# library(BiocSingular) set.seed(101010011) sce.mam &lt;- denoisePCA(sce.mam, technical=dec.mam, subset.row=top.mam) sce.mam &lt;- runTSNE(sce.mam, dimred=&quot;PCA&quot;) #--- clustering ---# snn.gr &lt;- buildSNNGraph(sce.mam, use.dimred=&quot;PCA&quot;, k=25) sce.mam$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) sce.mam ## class: SingleCellExperiment ## dim: 27998 2772 ## metadata(0): ## assays(2): counts logcounts ## rownames(27998): Xkr4 Gm1992 ... Vmn2r122 CAAA01147332.1 ## rowData names(3): Ensembl Symbol SEQNAME ## colnames: NULL ## colData names(4): Barcode Sample Condition cluster ## reducedDimNames(2): PCA TSNE ## spikeNames(0): ## altExpNames(0): 15.2 Doublet detection with clusters The doubletCluster() function identifes clusters with expression profiles lying between two other clusters (Bach et al. 2017). We consider every possible triplet of clusters consisting of a query cluster and two putative “source” clusters. Under the null hypothesis that the query consists of doublets from the two sources, we then compute a number of statistics: The number of genes (N) that are differentially expressed in the same direction in the query cluster compared to both of the source clusters. Such genes would be unique markers for the query cluster and provide evidence against the null hypothesis. Clusters with few unique genes are more likely to be composed of doublets. The ratio of the median library size in each source to the median library size in the query (lib.size fields). Doublet libraries are generated from a larger initial pool of RNA compared to libraries for single cells, and thus the former should have larger library sizes. Library size ratios much greater than unity are inconsistent with a doublet identity for the query. The proportion of cells in the query cluster should also be reasonable - typically less than 5% of all cells, depending on how many cells were loaded onto the 10X Genomics device. For each query cluster, the best pair of sources is identified based solely on the lowest N. (This means that any lib.size* above unity is not definitive evidence against a doublet identity for a query cluster, as there may be a pair of sources with slightly higher N but both lib.size* values below unity.) If more detail is necessary, the all.pairs field contains statistics on all possible source pairs for a given query cluster. library(scran) dbl.out &lt;- doubletCluster(sce.mam, sce.mam$cluster) dbl.out ## DataFrame with 10 rows and 9 columns ## source1 source2 N best p.value lib.size1 lib.size2 prop ## &lt;character&gt; &lt;character&gt; &lt;integer&gt; &lt;character&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## 6 2 1 13 Pcbp2 1.28336e-03 0.811531 0.516399 0.03030303 ## 2 10 3 109 Pigr 4.34790e-21 0.619865 1.411579 0.28823954 ## 4 6 5 111 Cotl1 1.09709e-08 1.540751 0.688651 0.16305916 ## 5 10 7 139 Gde1 9.30195e-12 1.125474 1.167854 0.00865801 ## 10 8 5 191 Krt18 5.54539e-20 0.888432 0.888514 0.00865801 ## 7 8 5 270 AF251705 3.29661e-24 0.856192 0.856271 0.01875902 ## 9 8 5 295 Fabp4 2.21523e-32 0.655624 0.655685 0.01154401 ## 8 10 9 388 Col1a1 6.82664e-32 1.125578 1.525264 0.01406926 ## 1 8 6 513 Acta2 1.07294e-24 0.865449 1.936489 0.19841270 ## 3 6 5 530 Sapcd2 6.08574e-16 0.872951 0.390173 0.25829726 ## all.pairs ## &lt;DataFrameList&gt; ## 6 2:1:13:...,4:1:14:...,3:1:28:...,... ## 2 10:3:109:...,5:3:194:...,8:3:205:...,... ## 4 6:5:111:...,10:6:146:...,6:2:209:...,... ## 5 10:7:139:...,9:7:153:...,10:9:168:...,... ## 10 8:5:191:...,9:5:224:...,6:5:229:...,... ## 7 8:5:270:...,9:5:337:...,10:5:362:...,... ## 9 8:5:295:...,10:8:323:...,5:1:338:...,... ## 8 10:9:388:...,9:7:400:...,10:7:436:...,... ## 1 8:6:513:...,9:6:609:...,6:5:854:...,... ## 3 6:5:530:...,5:2:593:...,5:4:700:...,... Clusters are then ranked by N in the output of doubletClusters(), allowing us to prioritize high-risk clusters that require careful investigation. If a more concrete threshold is necessary, we can identify clusters that have unusually low N using an outlier-based approach. library(scater) chosen.doublet &lt;- rownames(dbl.out)[isOutlier(dbl.out$N, type=&quot;lower&quot;, log=TRUE)] chosen.doublet ## [1] &quot;6&quot; Examination of the output of doubletCluster() indicates that cluster 6 has the fewest unique genes and library sizes that are comparable to or greater than its sources. We see that every gene detected in this cluster is also expressed in either of the two proposed source clusters (Figure 15.1). markers &lt;- findMarkers(sce.mam, sce.mam$cluster, direction=&quot;up&quot;) dbl.markers &lt;- markers[[chosen.doublet]] library(scater) chosen &lt;- rownames(dbl.markers)[dbl.markers$Top &lt;= 10] plotHeatmap(sce.mam, order_columns_by=&quot;cluster&quot;, features=chosen, center=TRUE, symmetric=TRUE, zlim=c(-5, 5)) Figure 15.1: Heatmap of mean-centred and normalized log-expression values for the top set of markers for cluster 6 in the mammary gland dataset. Column colours represent the cluster to which each cell is assigned, as indicated by the legend. Closer examination of some known markers suggests that the offending cluster consists of doublets of basal cells (Acta2) and alveolar cells (Csn2) (Figure 15.2). Indeed, no cell type is known to strongly express both of these genes at the same time, which supports the hypothesis that this cluster consists solely of doublets rather than being an entirely novel cell type. plotExpression(sce.mam, features=c(&quot;Acta2&quot;, &quot;Csn2&quot;), x=&quot;cluster&quot;, colour_by=&quot;cluster&quot;) Figure 15.2: Distribution of log-normalized expression values for Acta2 and Csn2 in each cluster. Each point represents a cell. The strength of doubletCluster() lies in its simplicity and ease of interpretation. Suspect clusters can be quickly flagged based on the metrics returned by the function. However, it is obviously dependent on the quality of the clustering. Clusters that are too coarse will fail to separate doublets from other cells, while clusters that are too fine will complicate interpretation. The method is also somewhat biased towards clusters with fewer cells, where the reduction in power is more likely to result in a low N. (Fortunately, this is a desirable effect as doublets should be rare in a properly performed scRNA-seq experiment.) 15.3 Doublet detection by simulation The other doublet detection strategy involves in silico simulation of doublets from the single-cell expression profiles (Dahlin et al. 2018). This is performed using the doubletCells() function from scran, which will: Simulate thousands of doublets by adding together two randomly chosen single-cell profiles. For each original cell, compute the density of simulated doublets in the surrounding neighbourhood. For each original cell, compute the density of other observed cells in the neighbourhood. Return the ratio between the two densities as a “doublet score” for each cell. This approach assumes that the simulated doublets are good approximations for real doublets. The use of random selection accounts for the relative abundances of different subpopulations, which affect the likelihood of their involvement in doublets; and the calculation of a ratio avoids high scores for non-doublet cells in highly abundant subpopulations. We see the function in action below. To speed up the density calculations, doubletCells() will perform a PCA on the log-expression matrix, and we perform some (optional) parametrization to ensure that the computed PCs are consistent with that from our previous analysis on this dataset. library(BiocSingular) set.seed(100) # Setting up the parameters for consistency with denoisePCA(); # this can be changed depending on your feature selection scheme. dbl.dens &lt;- doubletCells(sce.mam, subset.row=top.mam, d=ncol(reducedDim(sce.mam))) summary(dbl.dens) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0 8 21 395 49 39573 The highest doublet scores are concentrated in a single cluster of cells in the centre of Figure 15.3. sce.mam$DoubletScore &lt;- log10(dbl.dens+1) plotTSNE(sce.mam, colour_by=&quot;DoubletScore&quot;) Figure 15.3: t-SNE plot of the mammary gland data set. Each point is a cell coloured according to its doublet density. From the clustering information, we see that the affected cells belong to the same cluster that was identified using doubletCluster() (Figure 15.4), which is reassuring. plotColData(sce.mam, x=&quot;cluster&quot;, y=&quot;DoubletScore&quot;, colour_by=&quot;cluster&quot;) Figure 15.4: Distribution of doublet scores for each cluster in the mammary gland data set. Each point is a cell. The advantage of doubletCells() is that it does not depend on clusters, reducing the sensitivity of the results to clustering quality. The downside is that it requires some strong assumptions about how doublets form, such as the combining proportions and the sampling from pure subpopulations. In particular, doubletCells() treats the library size of each cell as an accurate proxy for its total RNA content. If this is not true, the simulation will not combine expression profiles from different cells in the correct proportions. This means that the simulated doublets will be systematically shifted away from the real doublets, resulting in doublet scores that are too low. Simply removing cells with high doublet scores will not be sufficient to eliminate real doublets from the data set. In some cases, only a subset of the cells in the putative doublet cluster actually have high scores, and removing these would still leave enough cells in that cluster to mislead downstream analyses. In fact, even defining a threshold on the doublet score is difficult as the interpretation of the score is relative. There is no general definition for a fixed threshold above which libraries are to be considered doublets. We recommend interpreting the doubletCells() scores in the context of cluster annotation. All cells from a cluster with a large average doublet score should be considered suspect, and close neighbours of problematic clusters should also be treated with caution. In contrast, a cluster containing a small proportion of high-scoring cells is probably safe provided that any interesting results are not being driven by those cells (e.g., checking that DE in an interesting gene is not driven solely by cells with high doublet scores). While clustering is still required, this approach is more robust than doubletClusters() to the quality of the clustering as the scores are computed on a per-cell basis. (As an aside, the issue of unknown combining proportions can be solved completely if spike-in information is available, e.g., in plate-based protocols. This will provide an accurate estimate of the total RNA content of each cell. To this end, spike-in-based size factors from Section 7.4 can be supplied to the doubletCells() function via the size.factors.content= argument. This will use the spike-in size factors to scale the contribution of each cell to a doublet library.) 15.4 Further comments Doublet detection procedures should only be applied to libraries generated in the same experimental batch. It is obviously impossible for doublets to form between two cells that were captured separately. Thus, some understanding of the experimental design is required prior to the use of the above functions. This avoids unnecessary concerns about the validity of batch-specific clusters that cannot possibly consist of doublets. It is also difficult to interpret doublet predictions in data containing cellular trajectories. By definition, cells in the middle of a trajectory are always intermediate between other cells and are liable to be incorrectly detected as doublets. Some protection is provided by the non-linear nature of many real trajectories, which reduces the risk of simulated doublets coinciding with real cells in doubletCells(). One can also put more weight on the relative library sizes in doubletCluster() instead of relying solely on N, under the assumption that sudden spikes in RNA content are unlikely in a continuous biological process. The best solution to the doublet problem is experimental - that is, to avoid generating them in the first place. This should be a consideration when designing scRNA-seq experiments, where the desire to obtain large numbers of cells at minimum cost should be weighed against the general deterioration in data quality and reliability when doublets become more frequent. If cell labelling information is available (Kang et al. 2018; Stoeckius et al. 2018), we recommend using it to mark doublet cells for use in identification of problematic clusters or cellular states in downstream analyses. Direct removal fails to account for unlabelled intra-sample doublets that can still be present in sufficient numbers to drive misleading conclusions, while the marking approach uses “guilt by association” to identify neighboring unlabelled doublets. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] BiocSingular_1.3.1 scater_1.15.12 ggplot2_3.2.1 [4] scran_1.15.14 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [7] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [10] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [13] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [16] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] viridis_0.5.1 edgeR_3.29.0 viridisLite_0.3.0 [4] DelayedMatrixStats_1.9.0 assertthat_0.2.1 statmod_1.4.32 [7] highr_0.8 BiocManager_1.30.10 dqrng_0.2.1 [10] GenomeInfoDbData_1.2.2 vipor_0.4.5 yaml_2.2.0 [13] pillar_1.4.3 lattice_0.20-38 glue_1.3.1 [16] limma_3.43.0 digest_0.6.23 RColorBrewer_1.1-2 [19] XVector_0.27.0 colorspace_1.4-1 cowplot_1.0.0 [22] htmltools_0.4.0 Matrix_1.2-18 pkgconfig_2.0.3 [25] pheatmap_1.0.12 bookdown_0.16 zlibbioc_1.33.0 [28] purrr_0.3.3 scales_1.1.0 processx_3.4.1 [31] tibble_2.1.3 farver_2.0.1 withr_2.1.2 [34] lazyeval_0.2.2 magrittr_1.5 crayon_1.3.4 [37] evaluate_0.14 ps_1.3.0 beeswarm_0.2.3 [40] tools_4.0.0 lifecycle_0.1.0 stringr_1.4.0 [43] munsell_0.5.0 locfit_1.5-9.1 irlba_2.3.3 [46] callr_3.4.0 compiler_4.0.0 rsvd_1.0.2 [49] rlang_0.4.2 grid_4.0.0 RCurl_1.95-4.12 [52] BiocNeighbors_1.5.1 igraph_1.2.4.2 labeling_0.3 [55] bitops_1.0-6 rmarkdown_2.0 gtable_0.3.0 [58] R6_2.4.1 gridExtra_2.3 knitr_1.26 [61] dplyr_0.8.3 stringi_1.4.3 ggbeeswarm_0.6.0 [64] Rcpp_1.0.3 tidyselect_0.2.5 xfun_0.11 Bibliography "],
["cell-cycle-assignment.html", "Chapter 16 Cell cycle assignment 16.1 Motivation 16.2 Using the cyclins 16.3 Using reference profiles 16.4 Using the cyclone() classifier 16.5 Regressing out cell cycle phase Session Info", " Chapter 16 Cell cycle assignment .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 16.1 Motivation On occasion, it can be desirable to determine cell cycle activity from scRNA-seq data. In and of itself, the distribution of cells across phases of the cell cycle is not usually informative, but we can use this to determine if there are differences in proliferation between subpopulations or across treatment conditions. Many of the key events in the cell cycle (e.g., passage through checkpoints) are post-translational and thus not directly visible in transcriptomic data; nonetheless, there are enough changes in expression that can be exploited to determine cell cycle phase. We demonstrate using the 416B dataset, which is known to contain actively cycling cells after oncogene induction. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.416b &lt;- LunSpikeInData(which=&quot;416b&quot;) sce.416b$block &lt;- factor(sce.416b$block) #--- gene-annotation ---# library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.416b)$ENSEMBL &lt;- rownames(sce.416b) rowData(sce.416b)$SYMBOL &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SYMBOL&quot;) rowData(sce.416b)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) library(scater) rownames(sce.416b) &lt;- uniquifyFeatureNames(rowData(sce.416b)$ENSEMBL, rowData(sce.416b)$SYMBOL) #--- quality-control ---# mito &lt;- which(rowData(sce.416b)$SEQNAME==&quot;MT&quot;) stats &lt;- perCellQCMetrics(sce.416b, subsets=list(Mt=mito)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;subsets_Mt_percent&quot;, &quot;altexps_ERCC_percent&quot;), batch=sce.416b$block) sce.416b &lt;- sce.416b[,!qc$discard] #--- normalization ---# library(scran) sce.416b &lt;- computeSumFactors(sce.416b) sce.416b &lt;- logNormCounts(sce.416b) #--- variance-modelling ---# dec.416b &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;, block=sce.416b$block) chosen.hvgs &lt;- getTopHVGs(dec.416b, prop=0.1) #--- batch-correction ---# library(limma) assay(sce.416b, &quot;corrected&quot;) &lt;- removeBatchEffect(logcounts(sce.416b), design=model.matrix(~sce.416b$phenotype), batch=sce.416b$block) #--- dimensionality-reduction ---# sce.416b &lt;- runPCA(sce.416b, ncomponents=10, subset_row=chosen.hvgs, exprs_values=&quot;corrected&quot;, BSPARAM=BiocSingular::ExactParam()) set.seed(1010) sce.416b &lt;- runTSNE(sce.416b, dimred=&quot;PCA&quot;, perplexity=10) #--- clustering ---# my.dist &lt;- dist(reducedDim(sce.416b, &quot;PCA&quot;)) my.tree &lt;- hclust(my.dist, method=&quot;ward.D2&quot;) library(dynamicTreeCut) my.clusters &lt;- unname(cutreeDynamic(my.tree, distM=as.matrix(my.dist), minClusterSize=10, verbose=0)) sce.416b$cluster &lt;- factor(my.clusters) sce.416b ## class: SingleCellExperiment ## dim: 46604 185 ## metadata(0): ## assays(3): counts logcounts corrected ## rownames(46604): 4933401J01Rik Gm26206 ... CAAA01147332.1 CBFB-MYH11-mcherry ## rowData names(4): Length ENSEMBL SYMBOL SEQNAME ## colnames(185): SLX-9555.N701_S502.C89V9ANXX.s_1.r_1 SLX-9555.N701_S503.C89V9ANXX.s_1.r_1 ## ... SLX-11312.N712_S507.H5H5YBBXX.s_8.r_1 SLX-11312.N712_S517.H5H5YBBXX.s_8.r_1 ## colData names(10): Source Name cell line ... block cluster ## reducedDimNames(2): PCA TSNE ## spikeNames(0): ## altExpNames(2): ERCC SIRV 16.2 Using the cyclins The cyclins control progression through the cell cycle and have well-characterized patterns of expression across cell cycle phases. Cyclin D is expressed throughout but peaks at G1; cyclin E is expressed highest in the G1/S transition; cyclin A is expressed across S and G2; and cyclin B is expressed highest in late G2 and mitosis. Inspection of the relative expression of cyclins across the population can often be sufficient to determine the relative cell cycle activity in each cluster (Figure 16.1). For example, cluster 1 is likely to be in G1 while the other clusters are scattered across the later phases. cyclin.genes &lt;- grep(&quot;^Ccn[abde][0-9]$&quot;, rowData(sce.416b)$SYMBOL) cyclin.genes &lt;- rownames(sce.416b)[cyclin.genes] cyclin.genes ## [1] &quot;Ccnb3&quot; &quot;Ccna2&quot; &quot;Ccna1&quot; &quot;Ccne2&quot; &quot;Ccnd2&quot; &quot;Ccne1&quot; &quot;Ccnd1&quot; &quot;Ccnb2&quot; &quot;Ccnb1&quot; &quot;Ccnd3&quot; library(scater) plotHeatmap(sce.416b, order_columns_by=&quot;cluster&quot;, cluster_rows=FALSE, features=sort(cyclin.genes)) Figure 16.1: Heatmap of the log-normalized expression values of the cyclin genes in the 416B dataset. The 416B dataset is somewhat unusual as each cluster maps cleanly onto a distinct phase of the cell cycle. This separation is not typically seen in more heterogeneous datasets where the cell cycle is only a secondary factor of variation. Fortunately, it is not strictly necessary to know the exact phase of each cell or cluster to answer most cycle-related questions. For example, we can use standard DE methods (Chapter 11) to look for upregulation of each cyclin, which would imply that a subpopulation contains more cells in the corresponding cell cycle phase. The same logic applies to comparisons between treatment conditions, as described in Chapter 14. library(scran) markers &lt;- findMarkers(sce.416b, subset.row=cyclin.genes, group=sce.416b$cluster, test.type=&quot;wilcox&quot;, direction=&quot;up&quot;) # We can infer that cluster 4 has more cells in G2/M than the other clusters, # based on higher expression of the cyclin B&#39;s. markers[[4]] ## DataFrame with 10 rows and 7 columns ## Top p.value FDR summary.AUC AUC.1 AUC.2 AUC.3 ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Ccna2 1 4.47082e-09 4.47082e-08 0.996337 0.996337 0.641822 0.925595 ## Ccnd1 1 2.27713e-04 5.69283e-04 0.822981 0.368132 0.822981 0.776786 ## Ccnb1 1 1.19027e-07 5.95137e-07 0.949634 0.949634 0.519669 0.934524 ## Ccnb2 2 3.87799e-07 1.29266e-06 0.934066 0.934066 0.781573 0.898810 ## Ccna1 4 2.96992e-02 5.93985e-02 0.535714 0.535714 0.495342 0.535714 ## Ccne2 5 6.56983e-02 1.09497e-01 0.641941 0.641941 0.447205 0.455357 ## Ccne1 6 5.85979e-01 8.37113e-01 0.564103 0.564103 0.366460 0.473214 ## Ccnd3 7 9.94578e-01 1.00000e+00 0.402930 0.402930 0.283644 0.273810 ## Ccnd2 8 9.99993e-01 1.00000e+00 0.306548 0.134615 0.327122 0.306548 ## Ccnb3 10 1.00000e+00 1.00000e+00 0.500000 0.500000 0.500000 0.500000 Direct examination of cyclin expression is easily to understand, interprete and experimentally validate. However, it is best suited for statements about relative cell cycle activity; for example, we would find it difficult to assign cell cycle phase in Figure 16.1 without the presence of clusters spanning all phases to provide benchmarks for “high” and “low” expression of each cyclin. We also assume that cyclin expression is not affected by biological processes other than the cell cycle, which may be a strong assumption in some cases, e.g., malignant cells. This strategy is strongly dependent on having good sequencing coverage of the cyclins, which is less of an issue for the whole-of-transcriptome methods described below that use information from more genes. 16.3 Using reference profiles Cell cycle assignment can be considered a specialized case of cell annotation, which suggests that the strategies described in Chapter 12 can be applied here. For example, given a reference dataset containing mouse ESCs with known cell cycle phases (Buettner et al. 2015), we could use SingleR to determine the phase of each cell in a test dataset. library(scRNAseq) sce.ref &lt;- BuettnerESCData() sce.ref ## class: SingleCellExperiment ## dim: 38293 288 ## metadata(0): ## assays(1): counts ## rownames(38293): ENSMUSG00000000001 ENSMUSG00000000003 ... ENSMUSG00000097934 ## ENSMUSG00000097935 ## rowData names(3): EnsemblTranscriptID AssociatedGeneName GeneLength ## colnames(288): G1_cell1_count G1_cell2_count ... G2M_cell95_count G2M_cell96_count ## colData names(1): phase ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): ERCC We use the reference dataset to identify phase-specific markers from genes with annotated roles in cell cycle. The use of prior annotation aims to avoid detecting markers for other biological processes that happen to be correlated with the cell cycle in the reference dataset, which would reduce classification performance if those processes are absent or uncorrelated in the test dataset. # Find genes that are present in both datasets and are cell cycle-related. library(org.Mm.eg.db) cycle.anno &lt;- select(org.Mm.eg.db, keytype=&quot;GOALL&quot;, keys=&quot;GO:0007049&quot;, columns=&quot;ENSEMBL&quot;)[,&quot;ENSEMBL&quot;] candidates &lt;- Reduce(intersect, list(rownames(sce.ref), rowData(sce.416b)$ENSEMBL, cycle.anno)) str(candidates) ## chr [1:1606] &quot;ENSMUSG00000000001&quot; &quot;ENSMUSG00000000028&quot; &quot;ENSMUSG00000000103&quot; ... # Identifying markers between cell cycle phases. sce.ref &lt;- logNormCounts(sce.ref) phase.stats &lt;- pairwiseWilcox(logcounts(sce.ref), sce.ref$phase, direction=&quot;up&quot;, subset.row=candidates) cycle.markers &lt;- getTopMarkers(phase.stats[[1]], phase.stats[[2]]) We use the identified markers to assign labels to the 416B data with the SingleR() function. Cluster 1 mostly consists of G1 cells while the other clusters have more cells in the other phases, which is broadly consistent with our conclusions from the cyclin-based analysis. Unlike the cyclin-based analysis, this approach yields “absolute” assignments of cell cycle phase that do not need to be interpreted relative to other cells in the same dataset. # Switching row names back to Ensembl to match the reference. test.data &lt;- logcounts(sce.416b) rownames(test.data) &lt;- rowData(sce.416b)$ENSEMBL library(SingleR) assignments &lt;- SingleR(test.data, ref=sce.ref, label=sce.ref$phase, genes=cycle.markers) tab &lt;- table(assignments$labels, sce.416b$cluster) tab ## ## 1 2 3 4 ## G1 71 7 19 1 ## G2M 2 60 1 13 ## S 5 2 4 0 The key assumption here is that the cell cycle is orthogonal to cell type and other aspects of cell behavior. This justifies the use of a reference involving cell types that are quite different from the cells in the test dataset, provided that the cell cycle transcriptional program is conserved across datasets (Bertoli, Skotheim, and Bruin 2013; Conboy et al. 2007). However, it is not difficult to find routine violations of this assumption - for example, Lef1 is detected as one of the top markers to distinguish between G1 from G2/M in the reference but has no detectable expression in the 416B dataset (Figure 16.2). gridExtra::grid.arrange( plotExpression(sce.ref, features=&quot;ENSMUSG00000027985&quot;, x=&quot;phase&quot;), plotExpression(sce.416b, features=&quot;Lef1&quot;, x=&quot;cluster&quot;), ncol=2) Figure 16.2: Distribution of log-normalized expression values for Lef1 in the reference dataset (left) and in the 416B dataset (right). Thus, a healthy dose of skepticism is required when interpreting these assignments. Our hope is that any systematic assignment error is consistent across clusters and conditions such that they cancel out in comparisons of phase frequencies, which is the more interesting analysis anyway. Indeed, while the availability of absolute phase calls may be more appealing, it may not make much practical difference to the conclusions if the frequencies are ultimately interpreted in a relative sense (e.g., using a chi-squared test). # Test for differences in phase distributions between clusters 1 and 2. chisq.test(tab[,1:2]) ## ## Pearson&#39;s Chi-squared test ## ## data: tab[, 1:2] ## X-squared = 108, df = 2, p-value &lt;2e-16 16.4 Using the cyclone() classifier The prediction method described by Scialdone et al. (2015) is another approach for classifying cells into cell cycle phases. Using a reference dataset, we first compute the sign of the difference in expression between each pair of genes. Pairs with changes in the sign across cell cycle phases are chosen as markers. Cells in a test dataset can then be classified into the appropriate phase, based on whether the observed sign for each marker pair is consistent with one phase or another. This approach is implemented in the cyclone() function from the scran package, which also contains pre-trained set of marker pairs for mouse and human data. set.seed(100) library(scran) mm.pairs &lt;- readRDS(system.file(&quot;exdata&quot;, &quot;mouse_cycle_markers.rds&quot;, package=&quot;scran&quot;)) # Using Ensembl IDs to match up with the annotation in &#39;mm.pairs&#39;. assignments &lt;- cyclone(sce.416b, mm.pairs, gene.names=rowData(sce.416b)$ENSEMBL) The phase assignment result for each cell in the 416B dataset is shown in Figure 16.3. For each cell, a higher score for a phase corresponds to a higher probability that the cell is in that phase. We focus on the G1 and G2/M scores as these are the most informative for classification. plot(assignments$score$G1, assignments$score$G2M, xlab=&quot;G1 score&quot;, ylab=&quot;G2/M score&quot;, pch=16) Figure 16.3: Cell cycle phase scores from applying the pair-based classifier on the 416B dataset. Each point represents a cell, plotted according to its scores for G1 and G2/M phases. Cells are classified as being in G1 phase if the G1 score is above 0.5 and greater than the G2/M score; in G2/M phase if the G2/M score is above 0.5 and greater than the G1 score; and in S phase if neither score is above 0.5. We see that the results are quite similar to those from SingleR(), which is reassuring. table(assignments$phases, sce.416b$cluster) ## ## 1 2 3 4 ## G1 74 8 20 0 ## G2M 1 48 0 13 ## S 3 13 4 1 The same considerations and caveats described for the SingleR-based approach are also applicable here. From a practical perspective, cyclone() takes much longer but does not require an explicit reference as the marker pairs are already computed. 16.5 Regressing out cell cycle phase For some time, it was popular to regress out the cell cycle phase prior to downstream analyses. The aim was to remove uninteresting variation due to cell cycle, thus improving resolution of other biological processes of interest. We could implement this by performing cell cycle phase assignment as described above, treating each phase as a separate batch and applying any of the batch correction strategies described in Chapter 26.8. The most common approach is to use a linear model to simply regress out the phase effect, e.g., via regressBatches(). library(batchelor) sce.nocycle &lt;- regressBatches(sce.416b, batch=assignments$phases) # Similar use in related functions that support blocking: dec.nocycle &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;, block=assignments$phases) marker.nocycle &lt;- findMarkers(sce.416b, sce.416b$cluster, block=assignments$phases) That said, we do not consider adjusting for cell cycle to be a necessary step in routine scRNA-seq analyses. In most applications, the cell cycle is a minor factor of variation, secondary to differences between cell types. Any attempt at removal would also need to assume that the cell cycle effect is orthogonal to other biological processes. For example, regression would potentially remove interesting signal if cell cycle activity varied across clusters or conditions, with a prime example being the increased proliferation of activated T cells (Richard et al. 2018). We suggest only performing cell cycle adjustment on an as-needed basis in populations with clear cell cycle effects. Alternatively, users may consider just excluding cell cycle-related genes from downstream analysis. This should remove most of the cell cycle effect without making strong assumptions about orthogonality. Of course, this will not remove the effect of the cell cycle in genes with no annotated role in the cell cycle, but in such cases, there is ambiguity over whether that effect is truly due to the cell cycle or from some other (interesting) biological process that happens to be correlated with the cell cycle. library(org.Mm.eg.db) cc.genes &lt;- select(org.Mm.eg.db, keys=&quot;GO:0007049&quot;, keytype=&quot;GOALL&quot;, column=&quot;ENSEMBL&quot;) sce.416b.uncycle &lt;- sce.416b[!rowData(sce.416b)$ENSEMBL %in% cc.genes$ENSEMBL,] # Proceed with the rest of the analysis. Note that in this case, oncogene # induction is quite strongly associated with the cell cycle but is considered # to be a separate effect, so removal of the cell cycle-related genes does not # change the clustering much. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] batchelor_1.3.8 fossil_0.3.7 shapefiles_0.7 [4] foreign_0.8-74 maps_3.3.0 sp_1.3-2 [7] SingleR_1.1.6 org.Mm.eg.db_3.10.0 AnnotationDbi_1.49.0 [10] scRNAseq_2.1.5 scran_1.15.14 scater_1.15.12 [13] ggplot2_3.2.1 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [16] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [19] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [22] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [25] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_1.4-1 XVector_0.27.0 [4] BiocNeighbors_1.5.1 farver_2.0.1 bit64_0.9-7 [7] interactiveDisplayBase_1.25.0 knitr_1.26 zeallot_0.1.0 [10] dbplyr_1.4.2 pheatmap_1.0.12 shiny_1.4.0 [13] BiocManager_1.30.10 compiler_4.0.0 httr_1.4.1 [16] dqrng_0.2.1 backports_1.1.5 assertthat_0.2.1 [19] Matrix_1.2-18 fastmap_1.0.1 lazyeval_0.2.2 [22] limma_3.43.0 later_1.0.0 BiocSingular_1.3.1 [25] htmltools_0.4.0 tools_4.0.0 rsvd_1.0.2 [28] igraph_1.2.4.2 gtable_0.3.0 glue_1.3.1 [31] GenomeInfoDbData_1.2.2 dplyr_0.8.3 rappdirs_0.3.1 [34] Rcpp_1.0.3 vctrs_0.2.1 ExperimentHub_1.13.5 [37] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [40] ps_1.3.0 mime_0.8 lifecycle_0.1.0 [43] irlba_2.3.3 statmod_1.4.32 AnnotationHub_2.19.3 [46] edgeR_3.29.0 zlibbioc_1.33.0 scales_1.1.0 [49] promises_1.1.0 RColorBrewer_1.1-2 yaml_2.2.0 [52] curl_4.3 memoise_1.1.0 gridExtra_2.3 [55] stringi_1.4.3 RSQLite_2.2.0 BiocVersion_3.11.1 [58] highr_0.8 rlang_0.4.2 pkgconfig_2.0.3 [61] bitops_1.0-6 evaluate_0.14 lattice_0.20-38 [64] purrr_0.3.3 labeling_0.3 cowplot_1.0.0 [67] bit_1.1-14 processx_3.4.1 tidyselect_0.2.5 [70] magrittr_1.5 bookdown_0.16 R6_2.4.1 [73] DBI_1.1.0 pillar_1.4.3 withr_2.1.2 [76] RCurl_1.95-4.12 tibble_2.1.3 crayon_1.3.4 [79] BiocFileCache_1.11.4 rmarkdown_2.0 viridis_0.5.1 [82] locfit_1.5-9.1 grid_4.0.0 blob_1.2.0 [85] callr_3.4.0 digest_0.6.23 xtable_1.8-4 [88] httpuv_1.5.2 munsell_0.5.0 beeswarm_0.2.3 [91] viridisLite_0.3.0 vipor_0.4.5 Bibliography "],
["trajectory-analysis.html", "Chapter 17 Trajectory Analysis Session Info", " Chapter 17 Trajectory Analysis .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } Figure 17.1: Waiting for Stephanie to finish her PR. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rcpp_1.0.3 bookdown_0.16 ps_1.3.0 digest_0.6.23 [5] magrittr_1.5 evaluate_0.14 highr_0.8 rlang_0.4.2 [9] stringi_1.4.3 callr_3.4.0 rmarkdown_2.0 tools_4.0.0 [13] stringr_1.4.0 xfun_0.11 yaml_2.2.0 compiler_4.0.0 [17] processx_3.4.1 BiocManager_1.30.10 htmltools_0.4.0 knitr_1.26 "],
["integrating-with-protein-abundance.html", "Chapter 18 Integrating with protein abundance 18.1 Motivation 18.2 Preprocessing 18.3 Clustering and interpretation 18.4 Integration with gene expression data Session Info", " Chapter 18 Integrating with protein abundance .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 18.1 Motivation Cellular indexing of transcriptomes and epitopes by sequencing (CITE-seq) is a technique that quantifies both gene expression and the abundance of selected surface proteins in each cell simultaneously (Stoeckius, Hafemeister, et al. 2017). In this approach, cells are first labelled with antibodies that have been conjugated to synthetic RNA tags. A cell with a higher abundance of a target protein will be bound by more antibodies, causing more molecules of the corresponding antibody-derived tag (ADT) to be attached to that cell. Cells are then separated into their own reaction chambers using droplet-based microfluidics (Zheng et al. 2017). Both the ADTs and endogenous transcripts are reverse-transcribed and captured into a cDNA library; the abundance of each protein or expression of each gene is subsequently quantified by sequencing of each set of features. This provides a powerful tool for interrogating aspects of the proteome (such as post-translational modifications) and other cellular features that would normally be invisible to transcriptomic studies. How should the ADT data be incorporated into the analysis? While we have counts for both ADTs and transcripts, there are fundamental differences in nature of the data that make it difficult to treat the former as additional features in the latter. Most experiments involve only a small number of antibodies (&lt;20) that are chosen by the researcher because they are of a priori interest, in contrast to gene expression data that captures the entire transcriptome regardless of the study. The coverage of the ADTs is also much deeper as they are sequenced separately from the transcripts, allowing the sequencing resources to be concentrated into a smaller number of features. And, of course, the use of antibodies against protein targets involves consideration of separate biases compared to those observed for transcripts. In this chapter, we will describe some strategies for integrated analysis of ADT and transcript data in CITE-seq experiments. We will demonstrate using a PBMC dataset from 10X Genomics that contains quantified abundances for a number of interesting surface proteins. # Caching it locally with BiocFileCache to avoid repeating the download. library(BiocFileCache) bfc &lt;- BiocFileCache(ask=FALSE) stuff &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com&quot;, &quot;samples/cell-exp/3.0.0/pbmc_10k_protein_v3&quot;, &quot;pbmc_10k_protein_v3_filtered_feature_bc_matrix.tar.gz&quot;)) untar(stuff, exdir=tempdir()) # Loading it in as a SingleCellExperiment object. library(DropletUtils) sce &lt;- read10xCounts(file.path(tempdir(), &quot;filtered_feature_bc_matrix&quot;)) sce ## class: SingleCellExperiment ## dim: 33555 7865 ## metadata(1): Samples ## assays(1): counts ## rownames(33555): ENSG00000243485 ENSG00000237613 ... IgG1 IgG2b ## rowData names(3): ID Symbol Type ## colnames: NULL ## colData names(2): Sample Barcode ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): 18.2 Preprocessing 18.2.1 Setting up the data The SingleCellExperiment class provides the concept of an “alternative Experiment” to store data for different sets of features but the same cells. This involves storing another SummarizedExperiment (or an instance of a subclass) inside our SingleCellExperiment where the rows (features) can differ but the columns (cells) are the same. In previous chapters, we were using the alternative Experiments to store spike-in data, but here we will use the concept to split off the ADT data. This isolates the two sets of features to ensure that analyses on one set do not inadvertently use data from the other set, and vice versa. sce &lt;- splitAltExps(sce, rowData(sce)$Type) altExpNames(sce) ## [1] &quot;Antibody Capture&quot; altExp(sce) # Can be used like any other SingleCellExperiment. ## class: SingleCellExperiment ## dim: 17 7865 ## metadata(1): Samples ## assays(1): counts ## rownames(17): CD3 CD4 ... IgG1 IgG2b ## rowData names(3): ID Symbol Type ## colnames: NULL ## colData names(0): ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): At this point, it is also helpful to coerce the sparse matrix for ADTs into a dense matrix. The ADT counts are usually not sparse so storage as a sparse matrix provides no advantage; in fact, it actually increases memory usage and computational time as the indices of non-zero entries must be unnecessarily stored and processed. From a practical perspective, this avoids unnecessary incompatibilities with downstream applications that do not accept sparse inputs. counts(altExp(sce)) &lt;- as.matrix(counts(altExp(sce))) counts(altExp(sce))[,1:10] # sneak peek ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## CD3 18 30 18 18 5 21 34 48 4522 2910 ## CD4 138 119 207 11 14 1014 324 1127 3479 2900 ## CD8a 13 19 10 17 14 29 27 43 38 28 ## CD14 491 472 1289 20 19 2428 1958 2189 55 41 ## CD15 61 102 128 124 156 204 607 128 111 130 ## CD16 17 155 72 1227 1873 148 676 75 44 37 ## CD56 17 248 26 491 458 29 29 29 30 15 ## CD19 3 3 8 5 4 7 15 4 6 6 ## CD25 9 5 15 15 16 52 85 17 13 18 ## CD45RA 110 125 5268 4743 4108 227 175 523 4044 1081 ## CD45RO 74 156 28 28 21 492 517 316 26 43 ## PD-1 9 9 20 25 28 16 26 16 28 16 ## TIGIT 4 9 11 59 76 11 12 12 9 8 ## CD127 7 8 12 16 17 15 11 10 231 179 ## IgG2a 5 4 12 12 7 9 6 3 19 14 ## IgG1 2 8 19 16 14 10 12 7 16 10 ## IgG2b 3 3 6 4 9 8 50 2 8 2 18.2.2 Quality control For most part, our quality control for this dataset still depends on the endogenous transcripts to remove empty droplets and low-quality cells. Any failure in cDNA capture for a particular cell will affect the coverage of both transcripts and ADTs, and changes in mitochondrial RNA content are only reflected in the transcriptomic data; as a result, the ADTs provide little additional information for QC. For this dataset, the count matrix has already been filtered in CellRanger to remove empty droplets so we only filter on the mitochondrial proportions to remove putative low-quality cells. library(scater) mito &lt;- grep(&quot;^MT-&quot;, rowData(sce)$Symbol) df &lt;- perCellQCMetrics(sce, subsets=list(Mito=mito)) mito.discard &lt;- isOutlier(df$subsets_Mito_percent, type=&quot;higher&quot;) summary(mito.discard) ## Mode FALSE TRUE ## logical 7569 296 If we want to combine transcript and ADT data, it is prudent to ensure that we only retain cells that actually have ADT counts. Recall that droplet-based libraries will contain contamination from ambient solution (Section 6.5), in this case containing containing conjugated antibodies that are either free in solution or bound to cell fragments. As the ADTs are (relatively) deeply sequenced, we can expect non-zero counts for most ADTs in each cell due to contamination (Figure 18.1; if this is not the case, we may suspect some failure of ADT processing for that cell. We thus remove cells that have unusually low numbers of detected ADTs, defined here as half of the median across all cells. (We could use the MAD-based default behavior of isOutlier(), but the MAD is zero in this case and filtering would discard useful cells with almost all ADTs detected.) # Require a minimum fold-change of 2 from the median (converted into log2). ab.discard &lt;- isOutlier(df$`altexps_Antibody Capture_detected`, log=TRUE, type=&quot;lower&quot;, min_diff=1) summary(ab.discard) ## Mode FALSE TRUE ## logical 7864 1 hist(df$`altexps_Antibody Capture_detected`, col=&#39;grey&#39;, main=&quot;&quot;, xlab=&quot;Number of detected ADTs&quot;) abline(v=attr(ab.discard, &quot;thresholds&quot;)[&quot;lower&quot;], col=&quot;red&quot;, lty=2) Figure 18.1: Distribution of the number of detected ADTs across all cells in the PBMC dataset. The red dotted line indicates the threshold below which cells were removed. By comparison, the total ADT count is less useful as a QC metric because it is heavily correlated with the biological state of the cell. The presence of a targeted protein can lead to a several-fold increase in the total ADT count given the binary nature of most surface protein markers. Removing cells with low total ADTs would strongly penalize cell types that do not exhibit many (or any) of the selected protein targets, and would represent an extreme case of the issues discussed in Section 6.3.2.2. Finally, to remove the low-quality cells, we subset the SingleCellExperiment as previously described. This automatically applies the filtering to both the transcript and ADT data; such coordination is one of the advantages of storing both datasets in a single object. discard &lt;- ab.discard | mito.discard sce &lt;- sce[,!discard] 18.2.3 Normalization Counts for the ADTs are subject to several biases that must be normalized prior to further analysis. Capture efficiency varies from cell to cell though the differences in biophysical properties between endogenous transcripts and the (much shorter) ADTs means that the capture-related biases for the two sets of features are unlikely to be identical. Composition biases are also much more pronounced in ADT data due to (i) the binary nature of target protein abundances, where any increase in protein abundance manifests as a large increase to the total tag count; and (ii) the a priori selection of interesting protein targets, which enriches for features that are more likely to be differentially abundant across the population. As in Chapter 7, we assume that these are scaling biases and compute ADT-specific size factors to remove them. To this end, several strategies are again available to calculate a size factor for each cell: The simplest approach is to normalize on the total ADT counts, effectively the library size for the ADTs. Like in Section 7.2, these “ADT library size factors” are adequate for clustering but will introduce composition biases that interfere with interpretation of the fold-changes between clusters. While composition biases are unlikely to compromise exploratory analyses like clustering, they may complicate interpretation of log-fold changes between clusters, especially for relatively subtle (e.g., ~2-fold) changes in the abundances of markers associated with functional activity rather than cell type. sf.lib &lt;- librarySizeFactors(altExp(sce)) summary(sf.lib) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.027 0.524 0.905 1.000 1.266 22.817 If we interpret the total count as the arithmetic mean of counts in each cell, we might instead consider the related approach of taking the geometric mean of all counts as the size factor for each cell (Stoeckius, Hafemeister, et al. 2017). The geometric mean is a reasonable estimator of the scaling biases for large counts with the added benefit that it mitigates the effects of composition biases by dampening the effects of one or two highly abundant proteins. While more robust than the ADT library size factors, these geometric mean-based factors are still not entirely correct and will progressively become less accurate as upregulation increases in strength. sf.geo &lt;- librarySizeFactors(altExp(sce), geometric=TRUE) summary(sf.geo) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.07 0.66 0.85 1.00 1.07 45.48 Ideally, we would like to compute size factors that adjust for the composition biases. This usually requires an assumption that most ADTs are not differentially expressed between cell types/states. At first glance, this appears to be a strong assumption - the target proteins were specifically chosen as they exhibit interesting heterogeneity across the population, meaning that a non-differential majority across ADTs would be unlikely. However, we can still make it work by assuming that (i) each cell only expresses a minority of the targeted proteins and (ii) the ambient contamination in each library is the same in terms of the number of molecules captured by each droplet. We can then compute size factors to equalize the coverage of these contaminating ADTs, thus eliminating cell-to-cell differences in capture efficiency. This is loosely based on a similar approach for normalization of ChIP-seq data based on background enrichment (Lun and Smyth 2016). If possible, we would prefer to obtain an estimate of the ambient profile from the barcodes that were identified as empty droplets (Section ??). In this case, though, this information has already been discarded from the provided dataset; we instead use a proxy profile constructed from the average of all cells, under the assumption that all cell types are equally likely to contribute to the ambient profile. We define size factors using a DESeq-like approach based on the median of the ratio of each cell’s counts to the ambient profile. # Replace &#39;ambient&#39; with actual ambient profile, if available. ambient &lt;- rowMeans(counts(altExp(sce))) sf.amb &lt;- medianSizeFactors(altExp(sce), reference=ambient) summary(sf.amb) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00 0.59 0.83 1.00 1.14 41.80 In one subpopulation, the DESeq-like size factors are consistently larger than the ADT library size factors, whereas the opposite is true for most of the other subpopulations (Figure 18.2). This is consistent with the presence of composition biases due to differential abundance of the targeted proteins between subpopulations. Here, composition biases would introduce a spurious 2-fold change in normalized ADT abundance if the library size factors were used. # Coloring by cluster to highlight the composition biases. # We set k=20 to get fewer, broader clusters for a clearer picture. library(scran) tagdata &lt;- logNormCounts(altExp(sce)) # library size factors by default. g &lt;- buildSNNGraph(tagdata, k=20, d=NA) # no need for PCA, see below. clusters &lt;- igraph::cluster_walktrap(g)$membership plot(sf.lib, sf.amb, log=&quot;xy&quot;, col=clusters, xlab=&quot;Library size factors (tag)&quot;, ylab=&quot;DESeq-like size factors (tag)&quot;) abline(0, 1, col=&quot;grey&quot;, lty=2) Figure 18.2: DESeq-like size factors for each cell in the PBMC dataset, compared to ADT library size factors. Each point is a cell and is colored according to the cluster identity defined from normalized ADT data. Some experiments will include isotype control antibodies that have similar properties to a primary antibody but lack a specific target in the cell, thus providing a measure of non-specific binding. As with spike-in normalization (Section 7.4), we could make the assumption that these control ADTs should not be differentially abundant between cells. Any difference thus represents some bias that should be normalized by defining control-based size factors from the sum of counts over all control ADTs. We demonstrate this approach below by computing size factors from the immunoglobulin (IgG) controls (Figure 18.3). controls &lt;- grep(&quot;^Ig&quot;, rownames(altExp(sce))) sf.control &lt;- librarySizeFactors(altExp(sce), subset_row=controls) summary(sf.control) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.00 0.69 0.88 1.00 1.14 44.02 plot(sf.amb, sf.control, log=&quot;xy&quot;, xlab=&quot;DESeq-like size factors (tag)&quot;, ylab=&quot;Control size factors (tag)&quot;) abline(0, 1, col=&quot;grey&quot;, lty=2) Figure 18.3: IgG control-derived size factors for each cell in the PBMC dataset, compared to the DESeq-like size factors. This approach exchanges the previous assumption of a non-differential majority for another assumption about the lack of differential abundance in the control tags. We might feel that the latter is a generally weaker assumption, but it is possible for non-specific binding to vary due to biology (e.g., when the cell surface area increases), at which point this normalization strategy may not be appropriate. We suggest using the DESeq-like size factors by default, as these are the most general and eliminate the major problems with composition biases. Running logNormCounts() will then perform scaling normalization and log-transformation for both the endogenous transcripts and the ADTs using their respective size factors. sizeFactors(altExp(sce)) &lt;- sf.amb sce &lt;- logNormCounts(sce, use_altexps=TRUE) # Checking that we have normalized values: assayNames(sce) ## [1] &quot;counts&quot; &quot;logcounts&quot; assayNames(altExp(sce)) ## [1] &quot;counts&quot; &quot;logcounts&quot; 18.3 Clustering and interpretation Unlike transcript-based counts, feature selection is largely unnecessary for analyzing ADT data. This is because feature selection has already occurred during experimental design where the manual choice of target proteins means that all ADTs correspond to interesting features by definition. From a practical perspective, the ADT count matrix is already small so there is no need for data compaction from using HVGs or PCs. Moreover, each ADT is often chosen to capture some orthogonal biological signal, so there is not much extraneous noise in higher dimensions that can be readily removed. This suggests we should directly apply downstream procedures like clustering and visualization on the log-normalized abundance matrix for the ADTs (Figure 18.4). # Set d=NA so that the function does not perform PCA. g.adt &lt;- buildSNNGraph(altExp(sce), d=NA) clusters.adt &lt;- igraph::cluster_walktrap(g.adt)$membership # Generating a t-SNE plot. set.seed(1010010) altExp(sce) &lt;- runTSNE(altExp(sce)) altExp(sce)$cluster &lt;- factor(clusters.adt) plotTSNE(altExp(sce), colour_by=&quot;cluster&quot;, text_by=&quot;cluster&quot;, text_col=&quot;red&quot;) Figure 18.4: \\(t\\)-SNE plot generated from the log-normalized abundance of each ADT in the PBMC dataset. Each point is a cell and is labelled according to its assigned cluster. With only a few ADTs, characterization of each cluster is most efficiently achieved by creating a heatmap of the average log-abundance of each tag (Figure 18.5). For this experiment, we can easily identify B cells (CD19+), various subsets of T cells (CD3+, CD4+, CD8+), monocytes and macrophages (CD14+, CD16+), to name a few. More detailed examination of the distribution of abundances within each cluster is easily performed with plotExpression() where strong bimodality may indicate that finer clustering is required to resolve cell subtypes. averaged &lt;- sumCountsAcrossCells(altExp(sce), clusters.adt, exprs_values=&quot;logcounts&quot;, average=TRUE) library(pheatmap) pheatmap(averaged - rowMeans(averaged), breaks=seq(-3, 3, length.out=101)) Figure 18.5: Heatmap of the average log-normalized abundance of each ADT in each cluster of the PBMC dataset. Colors represent the log2-fold change from the grand average across all clusters. Of course, this provides little information beyond what we could have obtained from a mass cytometry experiment; the real value of this data lies in the integration of protein abundance with gene expression. 18.4 Integration with gene expression data 18.4.1 By subclustering In the simplest approach to integration, we take cells in each of the ADT-derived clusters and perform subclustering using the transcript data. This is an in silico equivalent to an experiment that performs FACS to isolate cell types followed by scRNA-seq for further characterization. We exploit the fact that the ADT abundances are cleaner (larger counts, stronger signal) for more robust identification of broad cell types, and use the gene expression data to identify more subtle structure that manifests in the transcriptome. We demonstrate below by using quickSubCluster() to loop over all of the ADT-derived clusters and subcluster on gene expression (Figure 18.6). set.seed(101010) all.sce &lt;- quickSubCluster(sce, clusters.adt, prepFUN=function(x) { dec &lt;- modelGeneVar(x) top &lt;- getTopHVGs(dec, prop=0.1) x &lt;- runPCA(x, subset_row=top, ncomponents=25) }, clusterFUN=function(x) { g.trans &lt;- buildSNNGraph(x, use.dimred=&quot;PCA&quot;) igraph::cluster_walktrap(g.trans)$membership } ) # Summarizing the number of subclusters in each tag-derived parent cluster, # compared to the number of cells in that parent cluster. ncells &lt;- vapply(all.sce, ncol, 0L) nsubclusters &lt;- vapply(all.sce, FUN=function(x) length(unique(x$subcluster)), 0L) plot(ncells, nsubclusters, xlab=&quot;Number of cells&quot;, type=&quot;n&quot;, ylab=&quot;Number of subclusters&quot;, log=&quot;xy&quot;) text(ncells, nsubclusters, names(all.sce)) Figure 18.6: Number of subclusters identified from the gene expression data within each ADT-derived parent cluster. Another benefit of subclustering is that we can use the annotation on the ADT-derived clusters to facilitate annotation of each subcluster. If we knew that cluster X contained T cells from the ADT-derived data, there is no need to identify subclusters X.1, X.2, etc. as T cells from scratch; rather, we can focus on the more subtle (and interesting) differences between the subclusters using findMarkers(). For example, cluster 12 contains CD8+ T cells according to Figure 18.5, in which we further identify internal subclusters based on granzyme expression (Figure 18.7). Subclustering is also conceptually appealing as it avoids comparing log-fold changes in protein abundances with log-fold changes in gene expression. This ensures that variation (or noise) from the transcript counts does not compromise cell type/state identification from the relatively cleaner ADT counts. of.interest &lt;- &quot;12&quot; plotExpression(all.sce[[of.interest]], x=&quot;subcluster&quot;, features=c(&quot;ENSG00000100450&quot;, &quot;ENSG00000113088&quot;)) Figure 18.7: Distribution of log-normalized expression values of GZMH (left) and GZHK (right) in transcript-derived subclusters of a ADT-derived subpopulation of CD8+ T cells. The downside is that relying on previous results increases the risk of misleading conclusions when ambiguities in those results are not considered, as previously discussed in Section 10.7. It is a good idea to perform some additional checks to ensure that each subcluster has similar protein abundances, e.g., using a heatmap as in Figure 18.5 or with a series of plots like in Figure 18.8. If so, this allows the subcluster to “inherit” the annotation attached to the parent cluster for easier interpretation. sce.cd8 &lt;- all.sce[[of.interest]] plotExpression(altExp(sce.cd8), x=I(sce.cd8$subcluster), features=c(&quot;CD3&quot;, &quot;CD8a&quot;)) Figure 18.8: Distribution of log-normalized abundances of ADTs for CD3 and CD8a in each subcluster of the CD8+ T cell population. 18.4.2 By combined clustering Alternatively, we can combine the information from both sets of features into a single matrix for use in downstream analyses. This is logistically convenient as the combined structure is compatible with routine analysis workflows for transcript-only data. To illustrate, we first perform some standard steps on the transcript count matrix: sce.main &lt;- logNormCounts(sce) dec.main &lt;- modelGeneVar(sce.main) top.main &lt;- getTopHVGs(dec.main, prop=0.1) sce.main &lt;- runPCA(sce.main, subset_row=top.main, ncomponents=25) The simplest version of this idea involves literally combining the log-normalized abundance matrix for the ADTs with the log-expression matrix (or its compacted form, the matrix of PCs) to obtain a single matrix for use in downstream procedures. This requires some reweighting to balance the contribution of the transcript and ADT data to the total variance in the combined matrix, especially given that the former has around 100-fold more features than the latter. We see that the number of clusters is slightly higher than that from the ADT data alone, consistent with the introduction of additional heterogeneity when the two feature sets are combined. # TODO: push this into a function somewhere. library(DelayedMatrixStats) transcript.data &lt;- logcounts(sce.main)[top.main,,drop=FALSE] transcript.var &lt;- sum(rowVars(DelayedArray(transcript.data))) tag.data &lt;- logcounts(altExp(sce.main)) tag.var &lt;- sum(rowVars(DelayedArray(tag.data))) reweight &lt;- sqrt(transcript.var/tag.var) combined &lt;- rbind(transcript.data, tag.data*reweight) # &#39;buildSNNGraph&#39; conveniently performs the PCA for us if requested. We use # more PCs in &#39;d&#39; to capture more variance in both sets of features. Note that # this uses IRLBA by default so we need to set the seed. set.seed(100010) g.com &lt;- buildSNNGraph(combined, d=50) clusters.com &lt;- igraph::cluster_walktrap(g.com)$membership table(clusters.com) ## clusters.com ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 51 347 134 49 849 73 1028 75 503 1150 81 1693 52 344 12 46 19 25 26 41 ## 21 22 23 24 25 26 27 28 29 30 31 32 ## 66 36 72 126 16 78 384 68 48 27 32 17 A more sophisticated approach uses the UMAP algorithm (McInnes, Healy, and Melville 2018) to integrate information from the two sets of features. Very loosely speaking, we can imagine this as an intersection of the nearest neighbor graphs formed from each set, which effectively encourages the formation of communities of cells that are close in both feature spaces. Here, we perform two rounds of UMAP; one round retains high dimensionality for a faithful representation of the data during clustering, while the other performs dimensionality reduction for a pretty visualization. This yields an extremely fine-grained clustering in Figure 18.9, which is attributable to the stringency of intersection operations for defining the local neighborhood. # See https://umap-learn.readthedocs.io/en/latest/clustering.html # for the choice of umap parameters. set.seed(1001010) combined2 &lt;- runMultiUMAP( list(reducedDim(sce.main, &quot;PCA&quot;), t(logcounts(altExp(sce.main)))), n_components=20, n_neighbors=30, min_dist=0 ) g.com2 &lt;- buildSNNGraph(combined2, d=NA, transposed=TRUE) clusters.com2 &lt;- igraph::cluster_walktrap(g.com2)$membership table(clusters.com2) ## clusters.com2 ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 157 78 390 189 360 112 346 404 40 183 131 71 145 1048 155 40 142 633 101 63 ## 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ## 314 185 81 32 737 35 41 38 33 44 57 49 55 41 80 79 95 48 35 28 ## 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 ## 33 67 49 24 38 22 23 24 19 18 22 20 24 26 16 15 22 13 27 21 ## 61 62 63 64 65 66 67 68 ## 17 19 13 18 24 26 20 13 # Combining again for visualization: set.seed(0101110) reducedDim(sce.main, &quot;combinedUMAP&quot;) &lt;- runMultiUMAP( list(reducedDim(sce.main, &quot;PCA&quot;), t(logcounts(altExp(sce.main)))) ) sce.main$cluster &lt;- clusters.com2 plotReducedDim(sce.main, &quot;combinedUMAP&quot;, colour_by=&quot;cluster&quot;, text_by=&quot;cluster&quot;) Figure 18.9: UMAP plot obtained by combining transcript and ADT data in the PBMC dataset. Each point represents a cell and is colored according to its assigned cluster. An even more sophisticated approach uses factor analysis to identify common and unique factors of variation in each feature set. The set of factors can then be used as low-dimensional coordinates for each cell in downstream analyses, though a number of additional statistics are also computed that may be useful, e.g., the contribution of each feature to each factor. # Waiting for MOFA2. If you see Godot, remind him that he owes me money. These combined strategies are convenient but do not consider (or implicitly make assumptions about) the importance of heterogeneity in the ADT data relative to the transcript data. For example, the UMAP approach takes equal contributions from both sets of features to the intersection, which may not be appropriate if the biology of interest is concentrated in only one set. More generally, a combined analysis must consider the potential for uninteresting noise in one set to interfere with biological signal in the other set, a concern that is largely avoided during subclustering. 18.4.3 By differential testing In more interesting applications of this technology, protein targets are chosen that reflect some functional activity rather than cell type. (Because, frankly, the latter is not particularly hard to infer from transcript data in most cases.) A particularly elegant example involves quantification of the immune response by using antibodies to target the influenza peptide-MHCII complexes in T cells, albeit for mass cytometry (Fehlings et al. 2018). If the aim is to test for differences in the functional readout, a natural analysis strategy is to use the transcript data for clustering (Figure 18.10) and perform differential testing between clusters or conditions for the relevant ADTs. # Performing a quick analysis of the gene expression data. sce &lt;- logNormCounts(sce) dec &lt;- modelGeneVar(sce) top &lt;- getTopHVGs(dec, prop=0.1) set.seed(1001010) sce &lt;- runPCA(sce, subset_row=top, ncomponents=25) g &lt;- buildSNNGraph(sce, use.dimred=&quot;PCA&quot;) clusters &lt;- igraph::cluster_walktrap(g)$membership sce$cluster &lt;- factor(clusters) set.seed(1000010) sce &lt;- runTSNE(sce, dimred=&quot;PCA&quot;) plotTSNE(sce, colour_by=&quot;cluster&quot;, text_by=&quot;cluster&quot;) Figure 18.10: \\(t\\)-SNE plot of the PBMC dataset based on the transcript data. Each point is a cell and is colored according to the assigned cluster. We demonstrate this approach using findMarkers() to test for differences in tag abundance between clusters (Chapter 11). For example, if the PD-1 level was a readout for some interesting phenotype - say, T cell exhaustion (Pauken and Wherry 2015) - we might be interested in its upregulation in cluster 16 compared to all other clustuers (Figure 18.11). Methods from Chapter 14 can be similarly used to test for differences between conditions based on pseudo-bulk ADT counts. markers &lt;- findMarkers(altExp(sce), sce$cluster) of.interest &lt;- markers[[16]] pheatmap(getMarkerEffects(of.interest), breaks=seq(-3, 3, length.out=101)) Figure 18.11: Heatmap of log-fold changes in tag abundances in cluster 16 compared to all other clusters identified from transcript data in the PBMC data set. The main appeal of this approach is that it avoids data snooping (Section 11.5.1) as the clusters are defined without knowledge of the ADTs. This improves the statistical rigor of the subsequent differential testing on the ADT abundances (though only to some extent; other problems are still present, such as the lack of true replication in between-cluster comparisons). From a practical perspective, this approach yields fewer clusters and reduces the amount of work involved in manual annotation, especially if there are multiple functional states (e.g., stressed, apoptotic, stimulated) for each cell type. However, it is fundamentally limited to per-tag inferences; if we want to identify subpopulations with interesting combinations of target proteins, we must resort to high-dimensional analyses like clustering on the ADT abundances. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] DelayedMatrixStats_1.9.0 pheatmap_1.0.12 scran_1.15.14 [4] scater_1.15.12 ggplot2_3.2.1 DropletUtils_1.7.1 [7] SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 DelayedArray_0.13.2 [10] BiocParallel_1.21.2 matrixStats_0.55.0 Biobase_2.47.2 [13] GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 IRanges_2.21.2 [16] S4Vectors_0.25.8 BiocGenerics_0.33.0 BiocFileCache_1.11.4 [19] dbplyr_1.4.2 Cairo_1.5-10 BiocStyle_2.15.3 [22] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 bit64_0.9-7 RcppAnnoy_0.0.14 RColorBrewer_1.1-2 [5] httr_1.4.1 tools_4.0.0 backports_1.1.5 R6_2.4.1 [9] irlba_2.3.3 HDF5Array_1.15.2 vipor_0.4.5 uwot_0.1.5 [13] DBI_1.1.0 lazyeval_0.2.2 colorspace_1.4-1 withr_2.1.2 [17] tidyselect_0.2.5 gridExtra_2.3 processx_3.4.1 bit_1.1-14 [21] curl_4.3 compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [25] bookdown_0.16 scales_1.1.0 callr_3.4.0 rappdirs_0.3.1 [29] stringr_1.4.0 digest_0.6.23 rmarkdown_2.0 R.utils_2.9.2 [33] XVector_0.27.0 pkgconfig_2.0.3 htmltools_0.4.0 highr_0.8 [37] limma_3.43.0 rlang_0.4.2 RSQLite_2.2.0 farver_2.0.1 [41] dplyr_0.8.3 R.oo_1.23.0 RCurl_1.95-4.12 magrittr_1.5 [45] BiocSingular_1.3.1 GenomeInfoDbData_1.2.2 Matrix_1.2-18 Rcpp_1.0.3 [49] ggbeeswarm_0.6.0 munsell_0.5.0 Rhdf5lib_1.9.0 viridis_0.5.1 [53] lifecycle_0.1.0 R.methodsS3_1.7.1 stringi_1.4.3 yaml_2.2.0 [57] edgeR_3.29.0 zlibbioc_1.33.0 Rtsne_0.15 rhdf5_2.31.1 [61] grid_4.0.0 blob_1.2.0 dqrng_0.2.1 crayon_1.3.4 [65] lattice_0.20-38 cowplot_1.0.0 locfit_1.5-9.1 zeallot_0.1.0 [69] knitr_1.26 ps_1.3.0 pillar_1.4.3 igraph_1.2.4.2 [73] codetools_0.2-16 glue_1.3.1 evaluate_0.14 RcppParallel_4.4.4 [77] BiocManager_1.30.10 vctrs_0.2.1 gtable_0.3.0 purrr_0.3.3 [81] assertthat_0.2.1 xfun_0.11 rsvd_1.0.2 RSpectra_0.16-0 [85] viridisLite_0.3.0 tibble_2.1.3 beeswarm_0.2.3 memoise_1.1.0 [89] statmod_1.4.32 Bibliography "],
["repertoire-seq.html", "Chapter 19 Analyzing repertoire sequencing data 19.1 Motivation 19.2 Analyzing the T cell receptor repertoire 19.3 Analyzing the immunoglobulin repertoire 19.4 Multi-sample analyses Session Info", " Chapter 19 Analyzing repertoire sequencing data .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } Figure 19.1: This page is under construction. Enjoy these platelets at work instead. 19.1 Motivation An organism’s immune repertoire is defined as the set of T and B cell subtypes that contain genetic diversity in the T cell receptor (TCR) components or immunoglobin chains, respectively. This diversity is important for ensuring that the adaptive immune system can respond effectively to a wide range of antigens. We can profile the immune repertoire by simply sequencing the relevant transcripts (Georgiou et al. 2014; Rosati et al. 2017), which can be combined with previously mentioned technologies (Zheng et al. 2017) to achieve single-cell resolution. This data can then be used to characterize an individual’s immune response based on the expansion of T or B cell clones, i.e., multiple cells with the same sequences for each TCR component or immunoglobulin chain. By itself, single-cell repertoire sequencing data can be readily analyzed using tools from the ImmCantation suite. In particular, the alakazam package provides functions to perform common analyses to quantify clonal diversity, reconstruct lineages, examine amino acid properties, etc. However, in most experiments, we also obtain standard RNA sequencing data for each cell; the challenge lies in how we can integrate these two datasets together in the same analysis. This is not entirely trivial as each cell may have zero, one or multiple sequences for any given repertoire component, whereas we only obtain a single expression profile for that cell. We would like to define a single data structure that captures both the expression profile and repertoire state for each cell. This ensures synchronization during operations like subsetting (as previously discussed for the SingleCellExperiment class) and reduces book-keeping errors throughout the course of an interactive analysis. We achieve this using the SplitDataFrame class from the S4Vectors package, which allows us to accommodate repertoire sequencing data into existing Bioconductor classes while retaining compatibility with ImmCantation functions. We demonstrate on a publicly available 10X Genomics dataset using mouse PBMCs: View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(ask=FALSE) exprs.data &lt;- bfcrpath(bfc, file.path( &quot;http://cf.10xgenomics.com/samples/cell-vdj/3.1.0&quot;, &quot;vdj_v1_hs_pbmc3&quot;, &quot;vdj_v1_hs_pbmc3_filtered_feature_bc_matrix.tar.gz&quot;)) untar(exprs.data, exdir=tempdir()) library(DropletUtils) sce.pbmc &lt;- read10xCounts(file.path(tempdir(), &quot;filtered_feature_bc_matrix&quot;)) sce.pbmc &lt;- splitAltExps(sce.pbmc, rowData(sce.pbmc)$Type) #--- quality-control ---# library(scater) is.mito &lt;- grep(&quot;^MT-&quot;, rowData(sce.pbmc)$Symbol) stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=is.mito)) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) low.adt &lt;- stats$`altexps_Antibody Capture_detected` &lt; nrow(altExp(sce.pbmc))/2 discard &lt;- high.mito | low.adt sce.pbmc &lt;- sce.pbmc[,!discard] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) # TODO: move into scran somewhere. library(DelayedMatrixStats) ambient &lt;- rowMeans(counts(altExp(sce.pbmc))) sf.amb &lt;- colMedians(DelayedArray(counts(altExp(sce.pbmc)))/ambient) sf.amb &lt;- sf.amb/mean(sf.amb) sizeFactors(altExp(sce.pbmc)) &lt;- sf.amb sce.pbmc &lt;- logNormCounts(sce.pbmc, use_altexps=TRUE) #--- dimensionality-reduction ---# set.seed(100000) altExp(sce.pbmc) &lt;- runTSNE(altExp(sce.pbmc)) set.seed(1000000) altExp(sce.pbmc) &lt;- runUMAP(altExp(sce.pbmc)) #--- clustering ---# g.adt &lt;- buildSNNGraph(altExp(sce.pbmc), k=10, d=NA) clust.adt &lt;- igraph::cluster_walktrap(g.adt)$membership altExp(sce.pbmc)$cluster &lt;- factor(clust.adt) set.seed(1010010) subclusters &lt;- quickSubCluster(sce.pbmc, clust.adt, prepFUN=function(x) { dec &lt;- modelGeneVarByPoisson(x) top &lt;- getTopHVGs(dec, prop=0.1) denoisePCA(x, dec, subset.row=top) }, clusterFUN=function(x) { g.gene &lt;- buildSNNGraph(x, k=10, use.dimred = &#39;PCA&#39;) igraph::cluster_walktrap(g.gene)$membership } ) sce.pbmc ## class: SingleCellExperiment ## dim: 33538 6660 ## metadata(1): Samples ## assays(2): counts logcounts ## rownames(33538): ENSG00000243485 ENSG00000237613 ... ENSG00000277475 ENSG00000268674 ## rowData names(3): ID Symbol Type ## colnames: NULL ## colData names(2): Sample Barcode ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): Antibody Capture 19.2 Analyzing the T cell receptor repertoire 19.2.1 Data processing First, we obtain the filtered TCR contig annotations for the same set of cells. Each row of the resulting data frame contains information about a single TCR component sequence in one cell, broken down into the alleles of the V(D)J genes making up that component (v_gene, d_gene, j_gene) where possible. The number of reads and UMIs supporting the set of allele assignments for a cell is also shown, though only the UMI count should be used for quantifying expression of a particular TCR sequence. Each cell is assigned to a clonotype (raw_clonotype_id) based on the combination of the \\(\\alpha\\)-chain (TRA) and \\(\\beta\\)-chain (TRB) sequences in that cell. library(BiocFileCache) bfc &lt;- BiocFileCache(ask=FALSE) tcr.data &lt;- bfcrpath(bfc, file.path( &quot;http://cf.10xgenomics.com/samples/cell-vdj/3.1.0&quot;, &quot;vdj_v1_hs_pbmc3/vdj_v1_hs_pbmc3_t_filtered_contig_annotations.csv&quot;)) tcr &lt;- read.csv(tcr.data, stringsAsFactors=FALSE) head(tcr) ## barcode is_cell contig_id high_confidence length chain v_gene ## 1 AAACCTGAGATCTGAA-1 True AAACCTGAGATCTGAA-1_contig_1 True 521 TRB TRBV20-1 ## 2 AAACCTGAGATCTGAA-1 True AAACCTGAGATCTGAA-1_contig_2 True 474 TRA TRAV13-1 ## 3 AAACCTGAGGAACTGC-1 True AAACCTGAGGAACTGC-1_contig_1 True 496 TRB TRBV7-2 ## 4 AAACCTGAGGAACTGC-1 True AAACCTGAGGAACTGC-1_contig_2 True 505 TRA TRAV23/DV6 ## 5 AAACCTGAGGAGTCTG-1 True AAACCTGAGGAGTCTG-1_contig_1 True 495 TRA TRAV2 ## 6 AAACCTGAGGAGTCTG-1 True AAACCTGAGGAGTCTG-1_contig_2 True 526 TRB TRBV6-2 ## d_gene j_gene c_gene full_length productive cdr3 ## 1 None TRBJ2-7 TRBC2 True True CSARDKGLSYEQYF ## 2 None TRAJ44 TRAC True True CAASIGPLGTGTASKLTF ## 3 None TRBJ2-1 TRBC2 True True CASSLGPSGEQFF ## 4 None TRAJ34 TRAC True True CAASDNTDKLIF ## 5 None TRAJ38 TRAC True True CAVEANNAGNNRKLIW ## 6 None TRBJ1-1 TRBC1 True True CASSRTGGTEAFF ## cdr3_nt reads umis raw_clonotype_id ## 1 TGCAGTGCTAGAGACAAGGGGCTTAGCTACGAGCAGTACTTC 9327 12 clonotype100 ## 2 TGTGCAGCAAGTATCGGCCCCCTAGGAACCGGCACTGCCAGTAAACTCACCTTT 3440 3 clonotype100 ## 3 TGTGCCAGCAGCTTGGGACCATCGGGTGAGCAGTTCTTC 32991 29 clonotype101 ## 4 TGTGCAGCAAGCGATAACACCGACAAGCTCATCTTT 10714 9 clonotype101 ## 5 TGTGCTGTGGAGGCTAATAATGCTGGCAACAACCGTAAGCTGATTTGG 1734 3 clonotype102 ## 6 TGTGCCAGCAGTCGGACAGGGGGCACTGAAGCTTTCTTT 15530 13 clonotype102 ## raw_consensus_id ## 1 clonotype100_consensus_1 ## 2 clonotype100_consensus_2 ## 3 clonotype101_consensus_2 ## 4 clonotype101_consensus_1 ## 5 clonotype102_consensus_1 ## 6 clonotype102_consensus_2 The challenge in incorporating all of these data structures into a single object lies in the fact that each cell may have zero, one or many TCR/immunoglobulin sequences. This precludes direct storage of repertoire information in the colData() of the SingleCellExperiment, which expects a 1:1 mapping from each cell to each repertoire sequence. Instead, we store the repertoire data as a SplitDataFrameList object where each cell corresponds to a variable-row DataFrame containing information for zero-to-many sequences. This is easily done using the DataFrame() constructor and the split() function, as shown below: tra &lt;- tcr[tcr$chain==&quot;TRA&quot;,] trb &lt;- tcr[tcr$chain==&quot;TRB&quot;,] sce.pbmc$TRA &lt;- split(DataFrame(tra), factor(tra$barcode, sce.pbmc$Barcode)) sce.pbmc$TRB &lt;- split(DataFrame(trb), factor(trb$barcode, sce.pbmc$Barcode)) # Putting cluster information at the top level, for convenience. sce.pbmc$cluster &lt;- altExp(sce.pbmc)$cluster 19.2.2 Basic diagnostics We start by generating some basic cell-level diagnostics. For each cluster, we determine the proportion of cells that have at least one sequence of a TCR component (Figure 19.2). Clusters with large counts are most likely to be T cells, though some background level of TCR expression may be observed in other clusters due to a mixture of clustering uncertainty, ambient contamination, doublet formation and expression in other cell types. ncells &lt;- table(sce.pbmc$cluster) ncells ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 160 507 662 39 691 1415 32 650 76 1037 121 47 68 25 15 562 139 32 44 120 ## 21 22 23 24 ## 84 65 52 17 tra.counts.any &lt;- table(sce.pbmc$cluster[lengths(sce.pbmc$TRA) &gt; 0]) trb.counts.any &lt;- table(sce.pbmc$cluster[lengths(sce.pbmc$TRB) &gt; 0]) barplot(rbind(TRA=tra.counts.any/ncells, TRB=trb.counts.any/ncells), beside=TRUE) Figure 19.2: Proportion of cells in each cluster that express at least one sequence of the TCR \\(\\alpha\\) or \\(\\beta\\)-chains. We can refine this to only consider the productive sequences, i.e., contigs that are likely to produce a functional protein (Figure 19.3). This is achieved by subsetting the SplitDataFrameList with a LogicalList object, the latter of which specifies the rows of each per-cell DataFrame corresponding to productive sequences. is.prod.A &lt;- sce.pbmc$TRA[,&quot;productive&quot;]==&quot;True&quot; # LogicalList has.prod.A &lt;- lengths(sce.pbmc$TRA[is.prod.A]) &gt; 0 tra.counts.prod &lt;- table(sce.pbmc$cluster[has.prod.A]) is.prod.B &lt;- sce.pbmc$TRB[,&quot;productive&quot;]==&quot;True&quot; has.prod.B &lt;- lengths(sce.pbmc$TRB[is.prod.B]) &gt; 0 trb.counts.prod &lt;- table(sce.pbmc$cluster[has.prod.B]) barplot(rbind(TRA=tra.counts.prod/ncells, TRB=trb.counts.prod/ncells), legend=TRUE, beside=TRUE, ylim=c(0, 1.2)) Figure 19.3: Proportion of cells in each cluster that express at least one productive sequence of the TCR \\(\\alpha\\) or \\(\\beta\\)-chains. In contrast, using a conventional logical or integer vector to subset the SplitDataFrameList will subset the cells themselves (rather than the rows for each cell, as shown above). For example, we can use this approach to count the number of cells in each cluster that have multiple sequences for a component (Figure ??). tra.counts.multi &lt;- table(sce.pbmc$cluster[lengths(sce.pbmc$TRA) &gt; 1]) trb.counts.multi &lt;- table(sce.pbmc$cluster[lengths(sce.pbmc$TRB) &gt; 1]) barplot(rbind(TRA=tra.counts.multi/ncells, TRB=trb.counts.multi/ncells), legend=TRUE, beside=TRUE) Figure 19.4: Proportion of cells in each cluster that express two or more sequences of the TCR \\(\\alpha\\) or \\(\\beta\\)-chains. 19.2.3 Quantifying clonal expansion Quantification of clonal expansion is the most obvious application of repertoire sequencing data. Cells with the same T cell clonotype are assumed to target the same antigen, and any increase in the frequency of a clonotype provides evidence for T cell activation and proliferation upon stimulation by the corresponding antigen. Thus, we can gain some insights into the immune activity of each T cell cluster by counting the number of expanded clonotypes in each cluster, as shown below for the \\(\\alpha\\)-chain. (We do not exclude clonotypes containing cells in different clusters, which can arise for various genuine biological reasons, e.g., differences in the microenvironment.) clone.id.A &lt;- unlist(unique(sce.pbmc$TRA[,&quot;raw_clonotype_id&quot;])) expanded.id.A &lt;- setdiff(clone.id.A[duplicated(clone.id.A)], &quot;None&quot;) length(expanded.id.A) # number of expanded clonotypes for TRA ## [1] 92 clone.id.B &lt;- unlist(unique(sce.pbmc$TRB[,&quot;raw_clonotype_id&quot;])) expanded.id.B &lt;- setdiff(clone.id.B[duplicated(clone.id.B)], &quot;None&quot;) length(expanded.id.B) # number of expanded clonotypes for TRB ## [1] 96 is.clone.A &lt;- any(sce.pbmc$TRA[,&quot;raw_clonotype_id&quot;] %in% expanded.id.A) tra.counts.clonal &lt;- table(sce.pbmc$cluster[is.clone.A]) is.clone.B &lt;- any(sce.pbmc$TRB[,&quot;raw_clonotype_id&quot;] %in% expanded.id.B) trb.counts.clonal &lt;- table(sce.pbmc$cluster[is.clone.B]) barplot(rbind(TRA=tra.counts.clonal/ncells, TRB=trb.counts.clonal/ncells), legend=TRUE, beside=TRUE) Figure 19.5: Proportion of cells in each cluster that have multiple clonotypes, based on the TCR \\(\\alpha\\) or \\(\\beta\\)-chains. We can use this information to determine whether a particular T cell cluster is enriched for expanding clonotypes. The example below uses Fisher’s exact test to identify a significant increase in the proportion of expanded clonotypes in a cluster of putative CD8+ T cells compared to another cluster of CD4+ T cells (Figure 19.6). This provides some relative measure of the average immune activity of each cluster though, of course, further subclustering may reveal finer subpopulations with more or less activity than the average of the parent cluster. # Identifying the clusters: tclust.1 &lt;- &quot;2&quot; tclust.2 &lt;- &quot;6&quot; mat &lt;- cbind(Expanded=tra.counts.clonal, Unexpanded=tra.counts.any - tra.counts.clonal)[c(tclust.1, tclust.2),] mat ## Expanded Unexpanded ## 2 138 309 ## 6 80 1193 stats &lt;- fisher.test(mat) stats ## ## Fisher&#39;s Exact Test for Count Data ## ## data: mat ## p-value &lt;2e-16 ## alternative hypothesis: true odds ratio is not equal to 1 ## 95 percent confidence interval: ## 4.870 9.129 ## sample estimates: ## odds ratio ## 6.65 # Checking the identities of the relevant clusters. Note that &#39;cluster&#39; is also # present as a colData entry in &#39;altExp(sce.pbmc)&#39;, which is why the # &#39;other_fields=&quot;cluster&quot;&#39; argument works correctty. of.interest &lt;- sce.pbmc$cluster %in% c(tclust.1, tclust.2) library(scater) plotExpression(altExp(sce.pbmc)[,of.interest], features=rownames(altExp(sce.pbmc)), other_fields=&quot;cluster&quot;) + facet_wrap(~cluster, ncol=1) Figure 19.6: Distribution of log-abundance values for each antibody-derived tag in the PBMC dataset, across all cells in either T cell cluster (top and bottom panels). 19.2.4 Quantifying gene expression and properties We may also be interested in the expression of specific TCR genes, which can provide some insight into the type of antigens being targeted (Shugay et al. 2018). We again use Fisher’s exact test to test if our two T cell clusters of interest differ in the proportion of TCR sequences containing each gene. This yields a number of significant differences that may or may not be interesting, I don’t know. As usual, composition effects apply here. # This should DEFINITELY use countGenes(). gene.id.A &lt;- sce.pbmc$TRA[,&quot;v_gene&quot;] expanded.cluster &lt;- rep(sce.pbmc$cluster, lengths(gene.id.A)) gene.tab.A &lt;- table(unlist(gene.id.A), expanded.cluster) # Testing for differences between our clusters. collected &lt;- list() totals &lt;- colSums(gene.tab.A) for (i in rownames(gene.tab.A)) { mat &lt;- cbind( Gene=gene.tab.A[i,], Other=totals - gene.tab.A[i,])[c(tclust.1, tclust.2),] stats &lt;- fisher.test(mat) collected[[i]] &lt;- DataFrame(OR=stats$estimate, p.value=stats$p.value, row.names=i) } collected &lt;- do.call(rbind, collected) collected$FDR &lt;- p.adjust(collected$p.value, method=&quot;BH&quot;) collected &lt;- collected[order(collected$p.value),] head(collected) ## DataFrame with 6 rows and 3 columns ## OR p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## TRAV1-2 17.325061 9.22092e-48 4.14941e-46 ## TRAV9-2 0.347538 7.02164e-05 1.57987e-03 ## TRAV38-2/DV8 2.387645 1.47719e-04 2.21578e-03 ## TRAV13-1 0.407479 2.72881e-04 3.06991e-03 ## TRAV38-1 0.152513 1.28213e-03 1.09826e-02 ## TRAV12-1 2.217839 1.49621e-03 1.09826e-02 The same philosophy can be applied to detect significant differences in biophysical properties. I have no idea what to say about this. I can only assume that gravy refers to hydrophobicity, and not the sauce. (One 300g can of gravy gives me a quarter of my daily fat, according to Google. And half my sodium as well. What a bargain!) And maybe basic TCRs will prefer to bind acidic pepties? Now we just have to find all those acidic antigens out there - how hard can it be? What kind of pathogen uses acidic residues, anyway? Prolines, now that’s a sign of class. # TODO: move this somewhere else. extractDataFrame &lt;- function(splitted, ...) { thing &lt;- data.frame(...) thing &lt;- thing[rep(seq_len(NROW(thing)), lengths(splitted)),,drop=FALSE] cbind(as.data.frame(unlist(splitted)), thing) } df.A &lt;- extractDataFrame(sce.pbmc$TRA, cluster=sce.pbmc$cluster) library(alakazam) aap &lt;- aminoAcidProperties(df.A, seq=&quot;cdr3&quot;) properties &lt;- grep(&quot;_AA_&quot;, colnames(aap)) head(aap[,properties]) ## cdr3_AA_LENGTH cdr3_AA_GRAVY cdr3_AA_BULK cdr3_AA_ALIPHATIC cdr3_AA_POLARITY ## AAACCTGAGATCTGAA-1 18 0.6889 13.42 0.8167 7.806 ## AAACCTGAGGAACTGC-1 12 0.1083 14.68 0.8167 8.642 ## AAACCTGAGGAGTCTG-1 16 -0.4250 14.52 0.8562 8.794 ## AAACCTGAGGCTCTTA-1 14 0.4286 13.09 0.6286 7.979 ## AAACCTGAGGCTCTTA-1.1 NA NA NA NA NA ## AAACCTGTCAACGGGA-1 17 -0.2118 14.15 0.8059 8.324 ## cdr3_AA_CHARGE cdr3_AA_BASIC cdr3_AA_ACIDIC cdr3_AA_AROMATIC ## AAACCTGAGATCTGAA-1 0.9260 0.05556 0.0000 0.05556 ## AAACCTGAGGAACTGC-1 -1.0734 0.08333 0.1667 0.08333 ## AAACCTGAGGAGTCTG-1 0.9265 0.12500 0.0625 0.06250 ## AAACCTGAGGCTCTTA-1 0.9260 0.07143 0.0000 0.07143 ## AAACCTGAGGCTCTTA-1.1 NA NA NA NA ## AAACCTGTCAACGGGA-1 2.0378 0.17647 0.0000 0.17647 collected &lt;- list() for (i in properties) { prop &lt;- colnames(aap)[i] current &lt;- split(aap[,prop], aap$cluster) left &lt;- current[[tclust.1]] right &lt;- current[[tclust.2]] stats &lt;- wilcox.test(left, right) collected[[prop]] &lt;- DataFrame(Delta=median(left, na.rm=TRUE) - median(right, na.rm=TRUE), p.value=stats$p.value, row.names=prop) } collected &lt;- do.call(rbind, collected) collected ## DataFrame with 9 rows and 2 columns ## Delta p.value ## &lt;numeric&gt; &lt;numeric&gt; ## cdr3_AA_LENGTH -1.00000000 3.06864e-06 ## cdr3_AA_GRAVY -0.01590909 6.97870e-01 ## cdr3_AA_BULK 0.50125000 3.89143e-11 ## cdr3_AA_ALIPHATIC 0.06428571 8.22883e-05 ## cdr3_AA_POLARITY -0.08064893 1.33808e-03 ## cdr3_AA_CHARGE -0.99761076 2.41862e-14 ## cdr3_AA_BASIC 0.00641026 1.00025e-03 ## cdr3_AA_ACIDIC 0.07142857 3.40111e-14 ## cdr3_AA_AROMATIC 0.02456140 1.84476e-07 19.3 Analyzing the immunoglobulin repertoire Immunoglobulins are good. 19.4 Multi-sample analyses A much more interesting analysis is possible when there are multiple samples and treatment conditions, where the aim is to determine which clusters contain T cell clonotypes that expand in response to treatment. In much the same vein as the analysis in Chapter 14, we can obtain a cluster-by-sample count matrix by simply cbind()ing together the tra.counts.clonal vector from each sample. To demonstrate, we will pretend that our cells are derived from 4 samples that have been merged together for common clustering (Chapter 13). pretend.samples &lt;- sample(letters[1:4], ncol(sce.pbmc), replace=TRUE) # Creating a count matrix. clone.counts &lt;- any.counts &lt;- list() for (i in sort(unique(pretend.samples))) { current.sample &lt;- sce.pbmc[,i==pretend.samples] clone.id.A &lt;- unlist(unique(current.sample$TRA[,&quot;raw_clonotype_id&quot;])) expanded.id.A &lt;- setdiff(clone.id.A[duplicated(clone.id.A)], &quot;None&quot;) is.clone.A &lt;- any(current.sample$TRA[,&quot;raw_clonotype_id&quot;] %in% expanded.id.A) clone.counts[[i]] &lt;- table(current.sample$cluster[is.clone.A]) any.counts[[i]] &lt;- table(current.sample$cluster[lengths(current.sample$TRA) &gt; 0]) } clone.counts &lt;- do.call(cbind, clone.counts) any.counts &lt;- do.call(cbind, any.counts) We then test for condition-specific differences in the proportion of clonotypes that are expanded. A natural approach would be to apply a beta-binomial model to each cluster, using the expanded and TCR-containing counts as input; for the time being, though, we will just perform a simple Wilcoxon ranked sum test. We test on proportions to accommodate biological differences in T cell abundance between samples well as technical differences in, say, sequencing depth that might affect the success rate of TCR calls on a sample-by-sample basis. prop &lt;- clone.counts/any.counts # Pretending that the first two samples are cases, # and the second two samples are controls. wilcox.test(prop[tclust.1,1:2], prop[tclust.1,3:4]) ## ## Wilcoxon rank sum exact test ## ## data: prop[tclust.1, 1:2] and prop[tclust.1, 3:4] ## W = 0, p-value = 0.3 ## alternative hypothesis: true location shift is not equal to 0 wilcox.test(prop[tclust.2,1:2], prop[tclust.2,3:4]) ## ## Wilcoxon rank sum exact test ## ## data: prop[tclust.2, 1:2] and prop[tclust.2, 3:4] ## W = 1, p-value = 0.7 ## alternative hypothesis: true location shift is not equal to 0 Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] alakazam_0.3.0 scater_1.15.12 ggplot2_3.2.1 [4] BiocFileCache_1.11.4 dbplyr_1.4.2 SingleCellExperiment_1.9.1 [7] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [10] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [13] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [16] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [19] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] nlme_3.1-143 bitops_1.0-6 bit64_0.9-7 [4] progress_1.2.2 httr_1.4.1 tools_4.0.0 [7] backports_1.1.5 R6_2.4.1 irlba_2.3.3 [10] vipor_0.4.5 DBI_1.1.0 lazyeval_0.2.2 [13] colorspace_1.4-1 ade4_1.7-13 withr_2.1.2 [16] prettyunits_1.0.2 tidyselect_0.2.5 gridExtra_2.3 [19] processx_3.4.1 bit_1.1-14 curl_4.3 [22] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [25] bookdown_0.16 scales_1.1.0 readr_1.3.1 [28] callr_3.4.0 rappdirs_0.3.1 stringr_1.4.0 [31] digest_0.6.23 rmarkdown_2.0 XVector_0.27.0 [34] pkgconfig_2.0.3 htmltools_0.4.0 highr_0.8 [37] rlang_0.4.2 RSQLite_2.2.0 DelayedMatrixStats_1.9.0 [40] farver_2.0.1 dplyr_0.8.3 RCurl_1.95-4.12 [43] magrittr_1.5 BiocSingular_1.3.1 GenomeInfoDbData_1.2.2 [46] Matrix_1.2-18 Rcpp_1.0.3 ggbeeswarm_0.6.0 [49] munsell_0.5.0 ape_5.3 viridis_0.5.1 [52] lifecycle_0.1.0 stringi_1.4.3 yaml_2.2.0 [55] MASS_7.3-51.5 zlibbioc_1.33.0 grid_4.0.0 [58] blob_1.2.0 crayon_1.3.4 lattice_0.20-38 [61] cowplot_1.0.0 hms_0.5.2 zeallot_0.1.0 [64] knitr_1.26 ps_1.3.0 pillar_1.4.3 [67] igraph_1.2.4.2 seqinr_3.6-1 glue_1.3.1 [70] evaluate_0.14 BiocManager_1.30.10 vctrs_0.2.1 [73] tidyr_1.0.0 gtable_0.3.0 purrr_0.3.3 [76] assertthat_0.2.1 xfun_0.11 rsvd_1.0.2 [79] viridisLite_0.3.0 tibble_2.1.3 beeswarm_0.2.3 [82] memoise_1.1.0 Bibliography "],
["interactive-sharing.html", "Chapter 20 Interactive Interfaces and Sharing 20.1 Motivation 20.2 Quick start 20.3 Examples of usages for iSEE apps 20.4 Reproducibility 20.5 Additional resources Session Info", " Chapter 20 Interactive Interfaces and Sharing .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 20.1 Motivation Exploratory data analysis (EDA) and visualization are crucial for many aspects of data analysis, such as quality control, hypothesis generation, and contextual result interpretation. Modern high-throughput technologies have been used to generate biological datasets of increasing size and complexity, including single-cell genomics and multi-omics experiments. As a consequence, the need for flexible and interactive platforms to explore those data from various angles has contributed to the increasing popularity of interactive graphical user interfaces (GUI). In this chapter, we illustrate how the Bioconductor package iSEE can be used to perform some common exploratory tasks during single-cell analysis workflows. We note that these are examples only; in practice, EDA is often context-dependent and driven by distinct motivations and hypotheses for every new data set. To this end, iSEE provides a flexible framework immediately compatible with a wide range of genomics data modalities and offers tools for building custom interactive interfaces configured to draw special attention to key aspects of individual data sets. 20.2 Quick start In this chapter, we use the 10X PBMC dataset for demonstration purposes. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) #--- gene-annotation ---# library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) #--- cell-detection ---# set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) #--- variance-modelling ---# set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop=0.1) #--- dimensionality-reduction ---# set.seed(10000) sce.pbmc &lt;- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc) set.seed(100000) sce.pbmc &lt;- runTSNE(sce.pbmc, dimred=&quot;PCA&quot;) set.seed(1000000) sce.pbmc &lt;- runUMAP(sce.pbmc, dimred=&quot;PCA&quot;) Then, we load the iSEE and shiny packages for use in the rest of this chapter. library(iSEE) library(shiny) An instance of an interactive iSEE application can be launched with any data set that is stored in an object of the SummarizedExperiment class (or any class that extends it; e.g., SingleCellExperiment, DESeqDataSet, MethylSet). In its simplest form, this is done simply by calling iSEE(sce) with the sce data object as the sole argument, as illustrated here with the sce.pbmc data set. iSEE(sce.pbmc) The default interface contains up to eight standard panels, each featuring a particular aspect of the data set. The names of standard panels are available in the panelTypes variable. The shorter panel codes are useful for the configuration of tours, described in the section Dissemination of analysis results. panelTypes ## redDimPlot colDataPlot featAssayPlot ## &quot;Reduced dimension plot&quot; &quot;Column data plot&quot; &quot;Feature assay plot&quot; ## rowStatTable rowDataPlot sampAssayPlot ## &quot;Row statistics table&quot; &quot;Row data plot&quot; &quot;Sample assay plot&quot; ## colStatTable customDataPlot customStatTable ## &quot;Column statistics table&quot; &quot;Custom data plot&quot; &quot;Custom statistics table&quot; ## heatMapPlot ## &quot;Heat map&quot; The layout of panels in the interface may be altered interactively: panels can be added, removed, resized or repositioned using the “Organize panels” menu in the top right corner of the interface. The initial layout in which an application is launched can also be altered programmatically (see section Examples of usages for iSEE apps). To familiarize themselves with the GUI, users can launch an interactive tour from the menu in the top right corner. In addition, custom tours can be written to substitute the default built-in tour. This feature is particularly useful to disseminate new data sets with accompanying bespoke explanations guiding users through the salient features of any given data set (see section Dissemination of analysis results). It is also possible to deploy “empty” instances of iSEE apps, where any SummarizedExperiment object stored in an RDS file may be uploaded to the running application. Once the file is uploaded, the application will import the sce object and initialize the GUI panels with the contents of the object for interactive exploration. This type of iSEE applications is launched without specifying the sce argument, as shown below. iSEE() 20.3 Examples of usages for iSEE apps In the following subsections, we demonstrate some examples of use cases that can be addressed with interactive iSEE applications to gain insights into a data set and inform decision-making for downstream analyses. In each case, we demonstrate how iSEE applications can be preconfigured to launch in a specific state and layout, to facilitate immediate exploration of key aspects of the data set, in a manner most directly relevant to each situation and objectives. We note that these are examples only; we encourage readers to consider them as templates for learning and developing applications adapted to their own specific needs and purposes. 20.3.1 Quality control Having previously computed quality control metrics (see section Quick start above), it is possible to launch an app instance that immediately displays a set of panels preconfigured to focus on selected quality control metrics. For example, a common view for initial inspection of single-cell RNA-sequencing data sets generated by microfluidics platforms plots the library size of each cell, in decreasing order. An elbow in this plot generally reveals the transition between good quality cells and low quality cells or empty droplets. Another common view is to overlay the library size (in log space) as a color gradient over the result of a dimensionality reduction method such as t-SNE, UMAP, or ivis (Van der Maaten and Hinton 2008; McInnes, Healy, and Melville 2018; Szubert et al. 2019). This view may reveal trajectories or clusters associated with library size. Depending on the experimental context, such observations may result from technical or biological phenomena. For instance, it may indicate that normalization was not completely effective at removing cell biases. Alternatively, it could also indicate the presence of multiple cell types or states that differ in total RNA content. In the example below, we demonstrate that an iSEE app can be preconfigured to immediately display the views described above, after compute the apropriate per-cell quality control metrics. In addition, we also preconfigure the app to automatically highlight in the Reduced dimension plot panel any point selection made in the Column data plot panel. For instance, select the cells with either large or small library sizes, to inspect their distribution in reduced dimensions. # Compute per-cell QC metrics library(scater) sce.pbmc &lt;- addPerCellQC(sce.pbmc, exprs_values=&quot;counts&quot;) # Compute the log10-transformed library size colData(sce.pbmc)[[&quot;log10_total_counts&quot;]] &lt;- log10(sce.pbmc$total) # Compute the rank of each cell by decreasing library size colData(sce.pbmc)[[&quot;total_counts_rank&quot;]] &lt;- rank(-sce.pbmc$total) # Configure a &quot;Column data plot&quot; panel colDataArgs &lt;- colDataPlotDefaults(sce.pbmc, 1) colDataArgs$YAxis &lt;- &quot;log10_total_counts&quot; colDataArgs$XAxis &lt;- &quot;Column data&quot; colDataArgs$XAxisColData &lt;- &quot;total_counts_rank&quot; colDataArgs$DataBoxOpen &lt;- TRUE # Configure a &quot;Reduced dimension plot &quot; panel redDimArgs &lt;- redDimPlotDefaults(sce.pbmc, 1) redDimArgs$DataBoxOpen &lt;- TRUE redDimArgs$Type &lt;- &quot;TSNE&quot; redDimArgs$VisualBoxOpen &lt;- TRUE redDimArgs$ColorBy &lt;- &quot;Column data&quot; redDimArgs$ColorByColData &lt;- &quot;log10_total_counts&quot; redDimArgs$SelectBoxOpen &lt;- TRUE redDimArgs$SelectByPlot &lt;- &quot;Column data plot 1&quot; # Configure the set of panels initially visible initialPanels &lt;- DataFrame( Name = c(&quot;Column data plot 1&quot;, &quot;Reduced dimension plot 1&quot;), Width = c(6L, 6L) ) # Prepare the app app &lt;- iSEE(sce.pbmc, colDataArgs = colDataArgs, redDimArgs = redDimArgs, initialPanels = initialPanels) The preconfigured Shiny app can then be launched as show below. runApp(app) Note that preconfigured apps remain fully interactive, meaning that users can interactively control the settings and layout of the panels. For instance, users may select cells in one panel and choose to highlight the selected cells in the other using the “Selection parameters” collapsible box, in an effort to determine an adequate threshold on the library size to filter cells to retain for downstream analyses. Users may also change the information displayed in any panel. For instance, users may choose to color data points by percentage of UMI mapped to mitochondrial genes (“pct_counts_Mito”) in the “Reduced dimension plot 1”. Using the transfer of point selection between panels, users could select cells with small library sizes (in the “Column data plot 1” panel) and highlight them in the “Reduced dimension plot 1” panel, to investigate a possible relation between library size, clustering, and proportion of reads mapped to mitochondrial genes. 20.3.2 Annotation and identification of cell populations Recent efforts such as the Human Cell Atlas (HCA) and the NIH Human BioMolecular Atlas Program (HuBMAP) have initiated the creation of reference maps of cell types and states in the human body in health and disease. A direct challenge of such efforts lies in the curation and annotation of known and novel cell types in those data sets, and the subsequent transfer learning of those annotations to new data sets. This generally relies on unsupervised clustering of cells, followed by pairwise differential expression to identify gene markers for each cluster, and ultimately manual curation of gene signatures to assign a cell type identity - either known or novel - to each cluster. In this example, we show how iSEE can be used to interactively examine results from unsupervised clustering and pairwise differential expression to conveniently inspect and determine cell identities. In this first code chunk, we identify clusters of cells and their respective positive markers; that is, genes expressed at higher levels in the cluster of interest relative to other cells. The clusters are identified as densely connected subgraphs within a k-nearest-neighbors graph of cells based on their expression profiles. Positive markers are identified as genes with a significantly higher mean expression in each cluster using pairwise Welch t-tests. Finally, the log-transformed false discovery rate (FDR) of each marker for each cluster is stored in the rowData component of the sce object, which will then be accessible in the iSEE application. library(scran) # Compute cell clusters g &lt;- buildSNNGraph(sce.pbmc, k=10, use.dimred = &#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership sce.pbmc$cluster &lt;- factor(clust) # Identify positive markers for each cluster markers.pbmc.up &lt;- findMarkers( sce.pbmc, sce.pbmc$cluster, direction=&quot;up&quot;, log.p=TRUE, sorted=FALSE) # Collate the log-transformed FDR for each marker in a single table x &lt;- DataFrame( row.names = rownames(sce.pbmc), lapply(X = markers.pbmc.up, FUN = &quot;[[&quot;, i=&quot;log.FDR&quot;) ) colnames(x) &lt;- as.character(seq_len(ncol(x))) # Store the table of results as row metadata rowData(sce.pbmc)[[(paste0(&quot;log.FDR&quot;, &quot;.markers.up&quot;))]] &lt;- x The next code chunk preconfigures an app that shows: - A table of feature statistics (including the log-transformed FDR of cluster markers computed above), - A plot showing the distribution of expression values for a chosen gene in each cluster, - A plot showing the result of the UMAP dimensionality reduction method overlaid with the expression value of a chosen gene. Moreover, the code chunk below preconfigures the second and third panel to use the gene (i.e., row) selected in the first panel. This functionality is particularly convenient once the table is sorted by decreasing significance of the markers for a cluster of interest. For instance, once the application is launched, users can sort the table by ascending value of “log.FDR.markers.up:1” (where “:1” indicates cluster “1”). Then, users may select the first row in the “Row statistics table 1” and watch the second and third panel automatically update to display the most significant marker gene on the y-axis (“Feature assay plot 1” panel), and as a color scale overlaid on the data points (“Reduced dimension plot 1” panel). # Configure a &quot;Row statistics table&quot; panel (NOTE: we leave all parameters to default) rowStatArgs &lt;- rowStatTableDefaults(sce.pbmc, 1) # Configure a &quot;Feature assay plot&quot; panel featAssayArgs &lt;- featAssayPlotDefaults(sce.pbmc, 1) featAssayArgs$YAxisRowTable &lt;- &quot;Row statistics table 1&quot; featAssayArgs$XAxis &lt;- &quot;Column data&quot; featAssayArgs$XAxisColData &lt;- &quot;cluster&quot; featAssayArgs$DataBoxOpen &lt;- TRUE # Configure a &quot;Reduced dimension plot&quot; panel redDimArgs &lt;- redDimPlotDefaults(sce.pbmc, 1) redDimArgs$Type &lt;- &quot;UMAP&quot; redDimArgs$ColorBy &lt;- &quot;Feature name&quot; redDimArgs$ColorByRowTable &lt;- &quot;Row statistics table 1&quot; redDimArgs$VisualBoxOpen &lt;- TRUE initialPanels &lt;- DataFrame( Name = c(&quot;Row statistics table 1&quot;, &quot;Feature assay plot 1&quot;, &quot;Reduced dimension plot 1&quot;), Width = c(4L, 4L, 4L) ) # Prepare the app app &lt;- iSEE(sce.pbmc, rowStatArgs = rowStatArgs, featAssayArgs = featAssayArgs, redDimArgs = redDimArgs, initialPanels = initialPanels) The preconfigured Shiny app can then be launched as show below. runApp(app) In addition to selecting the top genes by significance, it is also possible to search the table for arbitrary gene names and select any known marker gene. Practically, investigating the expression levels of known marker genes is a common approach to assigning cell type labels to inferred clusters. 20.3.3 Collaborative analysis Analysis and interpretation of complex data sets typically involves multiple analysts. Rather than sharing analysis results via multiple versions of static figures and reports, it is often helpful to share interactive plots, allowing the other involved parties to independently explore the data in further depth. With iSEE, this can be achieved at any time by clicking on the “Display panel settings” button under the “Diagnostics” tab in the top right corner, copying the displayed code into an R script, and sharing this chunk of code with collaborators. However, note that they will also need to have access to a copy of the original sce object used for the analysis. In that setup, executing the code in the script and launching iSEE with the following command will open an instance mimicking what was shown on the screen when the “Display panel settings” button was clicked. It is important to note that all iSEE applications remain interactive irrespective of their initial configuration; only the initial layout and state of the application is modified from the default setup. 20.3.4 Dissemination of analysis results Typically, results from single-cell data are disseminated as static figures in published papers and reports. However, those are unlikely to capture the full information content of a complex scRNA-seq data set, and do not allow further exploration by the reader. To complement this traditional mode of dissemination, it is becoming increasingly common to deploy web-based interactive data browsers, allowing interested readers to investigate their respective hypotheses using the published data. With iSEE, such interactive exploration is facilitated by small guided tours - step-by-step walkthroughs of the different panels with pointers to facilitate their interpretation, from the authors’ point of view. At any time, the viewer is still free to leave the interactive tour and explore the data from their own perspective. All that is needed to add a tour to an iSEE instance is a data frame with two columns named “element” and “intro”; the first column declares the UI element to highlight in each step of the tour, and the second one contains the text to display at that step. This data frame must then be provided to the iSEE() function via the tour argument. In the code chunk below, we demonstrate the implementation of a simple tour taking through the two panels that compose a GUI, and interactively train users to use the collapsible boxes. tour &lt;- data.frame( element = c( &quot;#Welcome&quot;, &quot;#redDimPlot1&quot;, &quot;#colDataPlot1&quot;, &quot;#colDataPlot1_DataBoxOpen&quot;, &quot;#Conclusion&quot;), intro = c( &quot;Welcome to this tour!&quot;, &quot;This is a &lt;i&gt;Reduced dimension plot.&lt;/i&gt;&quot;, &quot;And this is a &lt;i&gt;Column data plot.&lt;/i&gt;&quot;, &quot;&lt;b&gt;Action:&lt;/b&gt; Click on this collapsible box to open and close it.&quot;, &quot;Thank you for taking this tour!&quot;), stringsAsFactors = FALSE) initialPanels &lt;- DataFrame( Name = c(&quot;Reduced dimension plot 1&quot;, &quot;Column data plot 1&quot;), Width = c(6L, 6L) ) The preconfigured Shiny app can then be loaded with the tour and launched as show below. iSEE(sce.pbmc, initialPanels = initialPanels, tour = tour) Examples of advanced tours showcasing a selection of published data sets can be found at https://github.com/LTLA/iSEE2018. 20.4 Reproducibility Although this chapter focuses on interactive exploration of data, we note that it is important to retain reproducibility, and to have a record of how each figure was generated. With iSEE, this information is readily available via the “Extract the R code” button under the “Diagnostics” dropdown menu in the top-right corner of the GUI. At any time, copying the code displayed in the modal window and executing it in the R session from which the iSEE app was launched exactly reproduces all plots currently displayed in the GUI. Similarly, the information on the panel setup is available by clicking on “Display panel settings” in the same dropdown menu. Another modal window will show the R code the user would need to use to reproduce the exact panel settings; copying and pasting this into an R script or a RMarkdown report will store this information in a permanent way. 20.5 Additional resources For demontration and inspiration, we refer readers to the following examples of deployed applications: Use cases accompanying the published article: https://marionilab.cruk.cam.ac.uk/ (source code: https://github.com/LTLA/iSEE2018) Examples of iSEE in production: http://www.teichlab.org/singlecell-treg Other examples as source code: Gallery of examples notebooks to reproduce analyses on public data: https://github.com/federicomarini/iSEE_instances Gallery of example custom panels: https://github.com/kevinrue/iSEE_custom Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] scran_1.15.14 scater_1.15.12 ggplot2_3.2.1 [4] shiny_1.4.0 iSEE_1.7.2 SingleCellExperiment_1.9.1 [7] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [10] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [13] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [16] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [19] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] nlme_3.1-143 bitops_1.0-6 bit64_0.9-7 [4] tools_4.0.0 backports_1.1.5 irlba_2.3.3 [7] R6_2.4.1 DT_0.11 vipor_0.4.5 [10] DBI_1.1.0 lazyeval_0.2.2 mgcv_1.8-31 [13] colorspace_1.4-1 withr_2.1.2 gridExtra_2.3 [16] tidyselect_0.2.5 processx_3.4.1 bit_1.1-14 [19] compiler_4.0.0 BiocNeighbors_1.5.1 shinyjs_1.0 [22] colourpicker_1.0 bookdown_0.16 scales_1.1.0 [25] callr_3.4.0 stringr_1.4.0 digest_0.6.23 [28] rmarkdown_2.0 rentrez_1.2.2 XVector_0.27.0 [31] pkgconfig_2.0.3 htmltools_0.4.0 limma_3.43.0 [34] fastmap_1.0.1 htmlwidgets_1.5.1 rlang_0.4.2 [37] RSQLite_2.2.0 DelayedMatrixStats_1.9.0 jsonlite_1.6 [40] dplyr_0.8.3 BiocSingular_1.3.1 RCurl_1.95-4.12 [43] magrittr_1.5 GenomeInfoDbData_1.2.2 Matrix_1.2-18 [46] ggbeeswarm_0.6.0 Rcpp_1.0.3 munsell_0.5.0 [49] viridis_0.5.1 lifecycle_0.1.0 edgeR_3.29.0 [52] stringi_1.4.3 yaml_2.2.0 rintrojs_0.2.2 [55] zlibbioc_1.33.0 plyr_1.8.5 grid_4.0.0 [58] blob_1.2.0 dqrng_0.2.1 promises_1.1.0 [61] shinydashboard_0.7.1 crayon_1.3.4 miniUI_0.1.1.1 [64] lattice_0.20-38 cowplot_1.0.0 splines_4.0.0 [67] locfit_1.5-9.1 zeallot_0.1.0 knitr_1.26 [70] ps_1.3.0 pillar_1.4.3 igraph_1.2.4.2 [73] reshape2_1.4.3 XML_3.98-1.20 glue_1.3.1 [76] evaluate_0.14 BiocManager_1.30.10 vctrs_0.2.1 [79] httpuv_1.5.2 gtable_0.3.0 purrr_0.3.3 [82] assertthat_0.2.1 xfun_0.11 rsvd_1.0.2 [85] mime_0.8 xtable_1.8-4 later_1.0.0 [88] viridisLite_0.3.0 tibble_2.1.3 beeswarm_0.2.3 [91] AnnotationDbi_1.49.0 memoise_1.1.0 statmod_1.4.32 [94] shinyAce_0.4.1 Bibliography "],
["dealing-with-big-data.html", "Chapter 21 Dealing with big data 21.1 Motivation 21.2 Fast approximations 21.3 Parallelization 21.4 Out of memory representations Session Info", " Chapter 21 Dealing with big data .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 21.1 Motivation Advances in scRNA-seq technologies have increased the number of cells that can be assayed in routine experiments. Public databases such as GEO are continually expanding with more scRNA-seq studies, while large-scale projects such as the Human Cell Atlas are expected to generate data for billions of cells. For effective data analysis, the computational methods need to scale with the increasing size of scRNA-seq data sets. This section discusses how we can use various aspects of the Bioconductor ecosystem to tune our analysis pipelines for greater speed and efficiency. 21.2 Fast approximations 21.2.1 Nearest neighbor searching Identification of neighbouring cells in PC or expression space is a common procedure that is used in many functions, e.g., buildSNNGraph(), doubletCells(). The default is to favour accuracy over speed by using an exact nearest neighbour (NN) search, implemented with the \\(k\\)-means for \\(k\\)-nearest neighbours algorithm (Wang 2012). However, for large data sets, it may be preferable to use a faster approximate approach. The BiocNeighbors framework makes it easy to switch between search options by simply changing the BNPARAM= argument in compatible functions. To demonstrate, we will use the 10X PBMC data: View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) #--- gene-annotation ---# library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) #--- cell-detection ---# set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] #--- quality-control ---# stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) #--- variance-modelling ---# set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop=0.1) #--- dimensionality-reduction ---# set.seed(10000) sce.pbmc &lt;- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc) set.seed(100000) sce.pbmc &lt;- runTSNE(sce.pbmc, dimred=&quot;PCA&quot;) set.seed(1000000) sce.pbmc &lt;- runUMAP(sce.pbmc, dimred=&quot;PCA&quot;) #--- clustering ---# g &lt;- buildSNNGraph(sce.pbmc, k=10, use.dimred = &#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership sce.pbmc$cluster &lt;- factor(clust) sce.pbmc ## class: SingleCellExperiment ## dim: 33694 3922 ## metadata(1): Samples ## assays(2): counts logcounts ## rownames(33694): RP11-34P13.3 FAM138A ... AC213203.1 FAM231B ## rowData names(2): ID Symbol ## colnames(3922): AAACCTGAGAAGGCCT-1 AAACCTGAGACAGACC-1 ... TTTGTCACAGGTCCAC-1 ## TTTGTCATCCCAAGAT-1 ## colData names(3): Sample Barcode cluster ## reducedDimNames(3): PCA TSNE UMAP ## spikeNames(0): ## altExpNames(0): We had previously clustered on a shared nearest neighbor graph generated with an exact neighbour search (Section 10.3). We repeat this below using an approximate search, implemented using the Annoy algorithm. This involves constructing a AnnoyParam object to specify the search algorithm and then passing it to the buildSNNGraph() function. The results from the exact and approximate searches are consistent with most clusters from the former re-appearing in the latter. This suggests that the inaccuracy from the approximation can be largely ignored. library(scran) library(BiocNeighbors) snn.gr &lt;- buildSNNGraph(sce.pbmc, BNPARAM=AnnoyParam(), use.dimred=&quot;PCA&quot;) clusters &lt;- igraph::cluster_walktrap(snn.gr) table(Exact=sce.pbmc$cluster, Approx=clusters$membership) ## Approx ## Exact 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ## 1 0 463 0 0 0 49 0 73 0 0 0 0 0 0 0 0 0 0 0 ## 2 518 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 3 0 0 364 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 4 0 0 0 451 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 ## 5 0 0 0 0 170 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## 6 0 0 0 0 0 790 0 0 0 0 0 0 0 1 0 0 0 0 0 ## 7 0 0 0 0 0 0 295 0 0 0 0 0 0 0 0 0 0 0 0 ## 8 0 0 0 0 0 0 30 0 0 0 0 0 0 0 77 0 0 0 0 ## 9 0 0 0 0 0 0 0 0 45 0 0 0 0 0 0 0 0 0 0 ## 10 1 0 0 0 0 0 0 0 0 45 0 0 0 0 0 0 0 0 0 ## [ reached getOption(&quot;max.print&quot;) -- omitted 8 rows ] Note that Annoy writes the NN index to disk prior to performing the search. Thus, it may not actually be faster than the default exact algorithm for small datasets, depending on whether the overhead of disk write is offset by the computational complexity of the search. It is also not difficult to find situations where the approximation deteriorates, especially at high dimensions, though this may not have an appreciable impact on the biological conclusions. set.seed(1000) y1 &lt;- matrix(rnorm(50000), nrow=1000) y2 &lt;- matrix(rnorm(50000), nrow=1000) Y &lt;- rbind(y1, y2) exact &lt;- findKNN(Y, k=20) approx &lt;- findKNN(Y, k=20, BNPARAM=AnnoyParam()) mean(exact$index!=approx$index) ## [1] 0.5619 21.2.2 Singular value decomposition The singular value decomposition (SVD) underlies the PCA used throughout our analyses, e.g., in denoisePCA(), fastMNN(), doubletCells(). (Briefly, the right singular vectors are the eigenvectors of the gene-gene covariance matrix, where each eigenvector represents the axis of maximum remaining variation in the PCA.) The default base::svd() function performs an exact SVD that is not performant for large datasets. Instead, we use fast approximate methods from the irlba and rsvd packages, conveniently wrapped into the BiocSingular package for ease of use and package development. Specifically, we can change the SVD algorithm used in any of these functions by simply specifying an alternative value for the BSPARAM= argument. library(scater) library(BiocSingular) # As the name suggests, it is random, so we need to set the seed. set.seed(101000) r.out &lt;- runPCA(sce.pbmc, ncomponents=20, BSPARAM=RandomParam()) str(reducedDim(r.out)) ## num [1:3922, 1:20] 15.3 13.41 -8.46 -7.86 6.38 ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : chr [1:3922] &quot;AAACCTGAGAAGGCCT-1&quot; &quot;AAACCTGAGACAGACC-1&quot; &quot;AAACCTGAGGCATGGT-1&quot; &quot;AAACCTGCAAGGTTCT-1&quot; ... ## ..$ : chr [1:20] &quot;PC1&quot; &quot;PC2&quot; &quot;PC3&quot; &quot;PC4&quot; ... ## - attr(*, &quot;percentVar&quot;)= num [1:20] 20.26 10.02 5.36 2.19 1.41 ... set.seed(101001) i.out &lt;- runPCA(sce.pbmc, ncomponents=20, BSPARAM=IrlbaParam()) str(reducedDim(i.out)) ## num [1:3922, 1:20] 15.3 13.41 -8.46 -7.86 6.38 ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : chr [1:3922] &quot;AAACCTGAGAAGGCCT-1&quot; &quot;AAACCTGAGACAGACC-1&quot; &quot;AAACCTGAGGCATGGT-1&quot; &quot;AAACCTGCAAGGTTCT-1&quot; ... ## ..$ : chr [1:20] &quot;PC1&quot; &quot;PC2&quot; &quot;PC3&quot; &quot;PC4&quot; ... ## - attr(*, &quot;percentVar&quot;)= num [1:20] 20.26 10.02 5.36 2.19 1.41 ... Both IRLBA and randomized SVD (RSVD) are much faster than the exact SVD with negligible loss of accuracy. This motivates their default use in many scran and scater functions, at the cost of requiring users to set the seed to guarantee reproducibility. IRLBA can occasionally fail to converge and require more iterations (passed via maxit= in IrlbaParam()), while RSVD involves an explicit trade-off between accuracy and speed based on its oversampling parameter (p=) and number of power iterations (q=). We tend to prefer IRLBA as its default behavior is more accurate, though RSVD is much faster for file-backed matrices (Section 26.8). 21.3 Parallelization Parallelization of calculations across genes or cells is an obvious strategy for speeding up scRNA-seq analysis workflows. The BiocParallel package provides a common interface for parallel computing throughout the Bioconductor ecosystem, manifesting as a BPPARAM= argument in compatible functions. We can pick from a diverse range of parallelization backends depending on the available hardware and operating system. For example, we might use forking across 2 cores to parallelize the variance calculations on a Unix system: dec.pbmc.mc &lt;- modelGeneVar(sce.pbmc, BPPARAM=MulticoreParam(2)) dec.pbmc.mc ## DataFrame with 33694 rows and 6 columns ## mean total tech bio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## RP11-34P13.3 0.000000000 0.000000000 0.000000000 0.00000e+00 NaN NaN ## FAM138A 0.000000000 0.000000000 0.000000000 0.00000e+00 NaN NaN ## OR4F5 0.000000000 0.000000000 0.000000000 0.00000e+00 NaN NaN ## RP11-34P13.7 0.002196632 0.002262180 0.002255590 6.59070e-06 0.492098 0.745136 ## RP11-34P13.8 0.000549026 0.000599631 0.000563762 3.58694e-05 0.333112 0.745136 ## ... ... ... ... ... ... ... ## AC233755.2 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN ## AC233755.1 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN ## AC240274.1 0.0101976 0.0120565 0.0104711 0.00158536 0.152349 0.745136 ## AC213203.1 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN ## FAM231B 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN Another approach would be to distribute jobs across a network of computers, which yields the same result: dec.pbmc.snow &lt;- modelGeneVar(sce.pbmc, BPPARAM=SnowParam(5)) dec.pbmc.snow ## DataFrame with 33694 rows and 6 columns ## mean total tech bio p.value FDR ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## RP11-34P13.3 0.000000000 0.000000000 0.000000000 0.00000e+00 NaN NaN ## FAM138A 0.000000000 0.000000000 0.000000000 0.00000e+00 NaN NaN ## OR4F5 0.000000000 0.000000000 0.000000000 0.00000e+00 NaN NaN ## RP11-34P13.7 0.002196632 0.002262180 0.002255590 6.59070e-06 0.492098 0.745136 ## RP11-34P13.8 0.000549026 0.000599631 0.000563762 3.58694e-05 0.333112 0.745136 ## ... ... ... ... ... ... ... ## AC233755.2 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN ## AC233755.1 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN ## AC240274.1 0.0101976 0.0120565 0.0104711 0.00158536 0.152349 0.745136 ## AC213203.1 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN ## FAM231B 0.0000000 0.0000000 0.0000000 0.00000000 NaN NaN For high-performance computing (HPC) systems with a cluster of compute nodes, we can distribute jobs via the job scheduler using the BatchtoolsParam class. The example below assumes a SLURM cluster, though the settings can be easily configured for a particular system (see here for details). # 2 hours, 8 GB, 1 CPU per task, for 10 tasks. bpp &lt;- BatchtoolsParam(10, cluster=&quot;slurm&quot;, resources=list(walltime=7200, memory=8000, ncpus=1)) Parallelization is best suited for CPU-intensive calculations where the division of labor results in a concomitant reduction in compute time. It is not suited for tasks that are bounded by other compute resources, e.g., memory or file I/O (though the latter is less of an issue on HPC systems with parallel read/write). In particular, R itself is inherently single-core, so many of the parallelization backends involve (i) setting up one or more separate R sessions, (ii) loading the relevant packages and (iii) transmitting the data to that session. Depending on the nature and size of the task, this overhead may outweigh any benefit from parallel computing. 21.4 Out of memory representations The count matrix is the central structure around which our analyses are based. In most of the previous chapters, this has been held fully in memory as a dense matrix or as a sparse dgCMatrix. Howevever, in-memory representations may not be feasible for very large data sets, especially on machines with limited memory. For example, the 1.3 million brain cell data set from 10X Genomics (Zheng et al. 2017) would require over 100 GB of RAM to hold as a matrix and around 30 GB as a dgCMatrix. This makes it challenging to explore the data on anything less than a HPC system. The obvious solution is to use a file-backed matrix representation where the data are held on disk and subsets are retrieved into memory as requested. While a number of implementations of file-backed matrices are available (e.g., bigmemory, matter), we will be using the implementation from the HDF5Array package. This uses the popular HDF5 format as the underlying data store, which provides a measure of standardization and portability across systems. We demonstrate with a subset of 20,000 cells from the 1.3 million brain cell data set, as provided by the TENxBrainData package. library(TENxBrainData) sce.brain &lt;- TENxBrainData20k() sce.brain ## class: SingleCellExperiment ## dim: 27998 20000 ## metadata(0): ## assays(1): counts ## rownames: NULL ## rowData names(2): Ensembl Symbol ## colnames: NULL ## colData names(4): Barcode Sequence Library Mouse ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): Examination of the SingleCellExperiment object indicates that the count matrix is a HDF5Matrix. From a comparison of the memory usage, it is clear that this matrix object is simply a stub that points to the much larger HDF5 file that actually contains the data. This avoids the need for large RAM availability during analyses. counts(sce.brain) ## &lt;27998 x 20000&gt; matrix of class HDF5Matrix and type &quot;integer&quot;: ## [,1] [,2] [,3] [,4] ... [,19997] [,19998] [,19999] [,20000] ## [1,] 0 0 0 0 . 0 0 0 0 ## [2,] 0 0 0 0 . 0 0 0 0 ## [3,] 0 0 0 0 . 0 0 0 0 ## [4,] 0 0 0 0 . 0 0 0 0 ## [5,] 0 0 0 0 . 0 0 0 0 ## ... . . . . . . . . . ## [27994,] 0 0 0 0 . 0 0 0 0 ## [27995,] 0 0 0 1 . 0 2 0 0 ## [27996,] 0 0 0 0 . 0 1 0 0 ## [27997,] 0 0 0 0 . 0 0 0 0 ## [27998,] 0 0 0 0 . 0 0 0 0 object.size(counts(sce.brain)) ## 2160 bytes file.info(path(counts(sce.brain)))$size ## [1] 76264332 Manipulation of the count matrix will generally result in the creation of a DelayedArray object from the DelayedArray package. This remembers the operations to be applied to the counts and stores them in the object, to be executed when the modified matrix values are realized for use in calculations. The use of delayed operations avoids the need to write the modified values to a new file at every operation, which would unnecessarily require time-consuming disk I/O. tmp &lt;- counts(sce.brain) tmp &lt;- log2(tmp + 1) tmp ## &lt;27998 x 20000&gt; matrix of class DelayedMatrix and type &quot;double&quot;: ## [,1] [,2] [,3] ... [,19999] [,20000] ## [1,] 0 0 0 . 0 0 ## [2,] 0 0 0 . 0 0 ## [3,] 0 0 0 . 0 0 ## [4,] 0 0 0 . 0 0 ## [5,] 0 0 0 . 0 0 ## ... . . . . . . ## [27994,] 0 0 0 . 0 0 ## [27995,] 0 0 0 . 0 0 ## [27996,] 0 0 0 . 0 0 ## [27997,] 0 0 0 . 0 0 ## [27998,] 0 0 0 . 0 0 Many functions described in the previous workflows are capable of accepting HDF5Matrix objects. This is powered by the availability of common methods for all matrix representations (e.g., subsetting, combining, methods from DelayedMatrixStats) as well as representation-agnostic C++ code using beachmat (A. T. L. Lun, Pages, and Smith 2018). For example, we compute QC metrics below with the same calculateQCMetrics() function that we used in the other workflows. library(scater) is.mito &lt;- grepl(&quot;^mt-&quot;, rowData(sce.brain)$Symbol) qcstats &lt;- perCellQCMetrics(sce.brain, subsets=list(Mt=is.mito)) qcstats ## DataFrame with 20000 rows and 10 columns ## sum detected percent_top_50 percent_top_100 percent_top_200 percent_top_500 ## &lt;integer&gt; &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## 1 3060 1546 24.1830 34.5752 46.5033 65.8170 ## 2 3500 1694 22.7429 33.2286 45.6571 64.8286 ## 3 3092 1613 22.3480 33.8292 45.7309 64.0039 ## 4 4420 2050 24.7511 33.7783 44.8190 61.4706 ## 5 3771 1813 23.0443 33.1742 45.0544 63.1398 ## ... ... ... ... ... ... ... ## 19996 4431 2050 23.0196 32.7917 44.5046 60.9795 ## 19997 6988 2704 18.6606 28.5633 40.5839 58.2856 ## 19998 8749 2988 23.9113 33.6267 44.4965 60.9784 ## 19999 3842 1711 24.7267 36.8037 48.7507 66.6840 ## 20000 1775 945 29.8592 40.9014 54.0845 74.9296 ## subsets_Mt_sum subsets_Mt_detected subsets_Mt_percent total ## &lt;integer&gt; &lt;integer&gt; &lt;numeric&gt; &lt;integer&gt; ## 1 123 10 4.01961 3060 ## 2 118 11 3.37143 3500 ## 3 58 9 1.87581 3092 ## 4 131 10 2.96380 4420 ## 5 100 8 2.65182 3771 ## ... ... ... ... ... ## 19996 127 9 2.866170 4431 ## 19997 60 9 0.858615 6988 ## 19998 305 11 3.486113 8749 ## 19999 129 8 3.357626 3842 ## 20000 26 6 1.464789 1775 Needless to say, data access from file-backed representations is slower than that from in-memory representations. The time spent retrieving data from disk is an unavoidable cost of reducing memory usage. Whether this is tolerable depends on the application. One example usage pattern involves performing the heavy computing quickly with in-memory representations on HPC systems with plentiful memory, and then distributing file-backed counterparts to individual users for exploration and visualization on their personal machines. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets methods base other attached packages: [1] TENxBrainData_1.7.0 HDF5Array_1.15.2 rhdf5_2.31.1 [4] BiocSingular_1.3.1 scater_1.15.12 ggplot2_3.2.1 [7] fossil_0.3.7 shapefiles_0.7 foreign_0.8-74 [10] maps_3.3.0 sp_1.3-2 BiocNeighbors_1.5.1 [13] scran_1.15.14 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [16] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [19] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [22] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [25] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_1.4-1 XVector_0.27.0 [4] bit64_0.9-7 AnnotationDbi_1.49.0 interactiveDisplayBase_1.25.0 [7] knitr_1.26 zeallot_0.1.0 dbplyr_1.4.2 [10] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [13] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [16] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [19] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [22] htmltools_0.4.0 tools_4.0.0 rsvd_1.0.2 [25] igraph_1.2.4.2 gtable_0.3.0 glue_1.3.1 [28] GenomeInfoDbData_1.2.2 dplyr_0.8.3 rappdirs_0.3.1 [31] Rcpp_1.0.3 vctrs_0.2.1 ExperimentHub_1.13.5 [34] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [37] ps_1.3.0 beachmat_2.3.1 mime_0.8 [40] lifecycle_0.1.0 irlba_2.3.3 statmod_1.4.32 [43] AnnotationHub_2.19.3 edgeR_3.29.0 zlibbioc_1.33.0 [46] scales_1.1.0 promises_1.1.0 yaml_2.2.0 [49] curl_4.3 memoise_1.1.0 gridExtra_2.3 [52] stringi_1.4.3 RSQLite_2.2.0 BiocVersion_3.11.1 [55] rlang_0.4.2 pkgconfig_2.0.3 bitops_1.0-6 [58] evaluate_0.14 lattice_0.20-38 purrr_0.3.3 [61] Rhdf5lib_1.9.0 bit_1.1-14 processx_3.4.1 [64] tidyselect_0.2.5 magrittr_1.5 bookdown_0.16 [67] R6_2.4.1 snow_0.4-3 DBI_1.1.0 [70] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [73] tibble_2.1.3 crayon_1.3.4 BiocFileCache_1.11.4 [76] rmarkdown_2.0 viridis_0.5.1 locfit_1.5-9.1 [79] grid_4.0.0 blob_1.2.0 callr_3.4.0 [82] digest_0.6.23 xtable_1.8-4 httpuv_1.5.2 [85] munsell_0.5.0 beeswarm_0.2.3 viridisLite_0.3.0 [88] vipor_0.4.5 Bibliography "],
["interoperability.html", "Chapter 22 Interoperability 22.1 Motivation 22.2 Interchanging with Seurat 22.3 Interchanging with scanpy Session Info", " Chapter 22 Interoperability .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 22.1 Motivation The Bioconductor single-cell ecosystem is but one of many popular frameworks for scRNA-seq data analysis. Seurat is very widely used for analysis of droplet-based datasets while scanpy provides an option for users who prefer working in Python. In many scenarios, these frameworks provide useful functionality that we might want to use from a Bioconductor-centric analysis (or vice versa). For example, Python has well-established machine learning libraries while R has a large catalogue of statistical tools, and it would be much better to use this functionality directly than to attempt to transplant it into a new framework. However, effective re-use requires some consideration towards interoperability during development of the relevant software tools. In an ideal world, everyone would agree on a common data structure that could be seamlessly and faithfully exchanged between frameworks. In the real world, though, each framework uses a different structure for various pragmatic or historical reasons. (This obligatory xkcd sums up the situation.) Most single cell-related Bioconductor packages use the SingleCellExperiment class, as previously discussed; Seurat defines its own SeuratObject class; and scanpy has its AnnData class. This inevitably introduces some friction if we are forced to convert from one structure to another in order to use another framework’s methods. In the absence of coordination of data structures, the next best solution is for each framework to provide methods that can operate on its most basic data object. Depending on the method, this might be the count matrix, the normalized expression matrix, a matrix of PCs or a graph object. If such methods are available, we can simply extract the relevant component from our SingleCellExperiment and call an external method directly without having to assemble that framework’s structure. Indeed, it is for this purpose that almost all scran functions and many scater functions are capable of accepting matrix objects or equivalents (e.g., sparse matrices) in addition to SingleCellExperiments. In this chapter, we will provide some examples of using functionality from frameworks outside of the SingleCellExperiment ecosystem in a single-cell analysis. We will focus on Seurat and scanpy as these are the two of the most popular analysis frameworks in the field. However, the principles of interoperability are generally applicable and are worth keeping in mind when developing or evaluating any type of analysis software. 22.2 Interchanging with Seurat Figure 22.1: Need to add this at some point. 22.3 Interchanging with scanpy Figure 22.2: Need to add this at some point. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rcpp_1.0.3 bookdown_0.16 ps_1.3.0 digest_0.6.23 [5] magrittr_1.5 evaluate_0.14 highr_0.8 rlang_0.4.2 [9] stringi_1.4.3 callr_3.4.0 rmarkdown_2.0 tools_4.0.0 [13] stringr_1.4.0 xfun_0.11 yaml_2.2.0 compiler_4.0.0 [17] processx_3.4.1 BiocManager_1.30.10 htmltools_0.4.0 knitr_1.26 "],
["lun-416b-cell-line-smart-seq2.html", "Chapter 23 Lun 416B cell line (Smart-seq2) 23.1 Introduction 23.2 Data loading 23.3 Quality control 23.4 Normalization 23.5 Variance modelling 23.6 Batch correction 23.7 Dimensionality reduction 23.8 Clustering 23.9 Interpretation Session Info", " Chapter 23 Lun 416B cell line (Smart-seq2) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 23.1 Introduction The A. T. L. Lun et al. (2017) dataset contains two 96-well plates of 416B cells (an immortalized mouse myeloid progenitor cell line), processed using the Smart-seq2 protocol (Picelli et al. 2014). A constant amount of spike-in RNA from the External RNA Controls Consortium (ERCC) was also added to each cell’s lysate prior to library preparation. High-throughput sequencing was performed and the expression of each gene was quantified by counting the total number of reads mapped to its exonic regions. Similarly, the quantity of each spike-in transcript was measured by counting the number of reads mapped to the spike-in reference sequences. 23.2 Data loading We convert the blocking factor to a factor so that downstream steps do not treat it as an integer. library(scRNAseq) sce.416b &lt;- LunSpikeInData(which=&quot;416b&quot;) sce.416b$block &lt;- factor(sce.416b$block) We rename the rows of our SingleCellExperiment with the symbols, reverting to Ensembl identifiers for missing or duplicate symbols. library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.416b)$ENSEMBL &lt;- rownames(sce.416b) rowData(sce.416b)$SYMBOL &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SYMBOL&quot;) rowData(sce.416b)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rownames(sce.416b), keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) library(scater) rownames(sce.416b) &lt;- uniquifyFeatureNames(rowData(sce.416b)$ENSEMBL, rowData(sce.416b)$SYMBOL) 23.3 Quality control We save an unfiltered copy of the SingleCellExperiment for later use. unfiltered &lt;- sce.416b Technically, we do not need to use the mitochondrial proportions as we already have the spike-in proportions (which serve a similar purpose) for this dataset. However, it probably doesn’t do any harm to include it anyway. mito &lt;- which(rowData(sce.416b)$SEQNAME==&quot;MT&quot;) stats &lt;- perCellQCMetrics(sce.416b, subsets=list(Mt=mito)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;subsets_Mt_percent&quot;, &quot;altexps_ERCC_percent&quot;), batch=sce.416b$block) sce.416b &lt;- sce.416b[,!qc$discard] colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$block &lt;- factor(unfiltered$block) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;block&quot;, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, x=&quot;block&quot;, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, x=&quot;block&quot;, y=&quot;subsets_Mt_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito percent&quot;), plotColData(unfiltered, x=&quot;block&quot;, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ERCC percent&quot;), nrow=2, ncol=2 ) Figure 23.1: Distribution of each QC metric across cells in the 416B dataset, stratified by the plate of origin. Each point represents a cell and is colored according to whether that cell was discarded. gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;sum&quot;, y=&quot;subsets_Mt_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10(), plotColData(unfiltered, x=&quot;altexps_ERCC_percent&quot;, y=&quot;subsets_Mt_percent&quot;, colour_by=&quot;discard&quot;), ncol=2 ) Figure 23.2: Percentage of mitochondrial reads in each cell in the 416B dataset, compared to the total count (left) or the percentage of spike-in reads (right). Each point represents a cell and is colored according to whether that cell was discarded. We also examine the number of cells removed for each reason. colSums(as.matrix(qc)) ## low_lib_size low_n_features high_subsets_Mt_percent ## 5 0 2 ## high_altexps_ERCC_percent discard ## 2 7 23.4 Normalization No pre-clustering is performed here, as the dataset is small and all cells are derived from the same cell line anyway. library(scran) sce.416b &lt;- computeSumFactors(sce.416b) sce.416b &lt;- logNormCounts(sce.416b) summary(sizeFactors(sce.416b)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.347 0.711 0.921 1.000 1.152 3.604 We see that the induced cells have size factors that are systematically shifted from the uninduced cells, consistent with the presence of a composition bias (Figure 23.3). plot(librarySizeFactors(sce.416b), sizeFactors(sce.416b), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, col=c(&quot;black&quot;, &quot;red&quot;)[grepl(&quot;induced&quot;, sce.416b$phenotype)+1], log=&quot;xy&quot;) Figure 23.3: Relationship between the library size factors and the deconvolution size factors in the 416B dataset. Each cell is colored according to its oncogene induction status. 23.5 Variance modelling We block on the plate of origin to minimize plate effects, and then we take the top 10% of genes with the largest biological components. dec.416b &lt;- modelGeneVarWithSpikes(sce.416b, &quot;ERCC&quot;, block=sce.416b$block) chosen.hvgs &lt;- getTopHVGs(dec.416b, prop=0.1) par(mfrow=c(1,2)) blocked.stats &lt;- dec.416b$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) points(curfit$mean, curfit$var, col=&quot;red&quot;, pch=16) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 23.4: Per-gene variance as a function of the mean for the log-expression values in the 416B dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the spike-in transcripts (red). This was performed separately for each plate. 23.6 Batch correction The composition of cells is expected to be the same across the two plates, hence the use of removeBatchEffect() rather than more complex methods. For larger datasets, consider using regressBatches() from the batchelor package. library(limma) assay(sce.416b, &quot;corrected&quot;) &lt;- removeBatchEffect(logcounts(sce.416b), design=model.matrix(~sce.416b$phenotype), batch=sce.416b$block) 23.7 Dimensionality reduction We do not expect a great deal of heterogeneity in this dataset, so we only request 10 PCs. We use an exact SVD to avoid warnings from irlba about handling small datasets. sce.416b &lt;- runPCA(sce.416b, ncomponents=10, subset_row=chosen.hvgs, exprs_values=&quot;corrected&quot;, BSPARAM=BiocSingular::ExactParam()) set.seed(1010) sce.416b &lt;- runTSNE(sce.416b, dimred=&quot;PCA&quot;, perplexity=10) 23.8 Clustering my.dist &lt;- dist(reducedDim(sce.416b, &quot;PCA&quot;)) my.tree &lt;- hclust(my.dist, method=&quot;ward.D2&quot;) library(dynamicTreeCut) my.clusters &lt;- unname(cutreeDynamic(my.tree, distM=as.matrix(my.dist), minClusterSize=10, verbose=0)) sce.416b$cluster &lt;- factor(my.clusters) We compare the clusters to the plate of origin. Each cluster is comprised of cells from both batches, indicating that the clustering is not driven by a batch effect. table(Cluster=sce.416b$cluster, Plate=sce.416b$block) ## Plate ## Cluster 20160113 20160325 ## 1 40 38 ## 2 37 32 ## 3 10 14 ## 4 6 8 We compare the clusters to the oncogene induction status. We observe differences in in the composition of each cluster, consistent with a biological effect of oncogene induction. table(Cluster=sce.416b$cluster, Oncogene=sce.416b$phenotype) ## Oncogene ## Cluster induced CBFB-MYH11 oncogene expression wild type phenotype ## 1 78 0 ## 2 0 69 ## 3 1 23 ## 4 14 0 plotTSNE(sce.416b, colour_by=&quot;cluster&quot;) Figure 23.5: Obligatory \\(t\\)-SNE plot of the 416B dataset, where each point represents a cell and is colored according to the assigned cluster. Most cells have relatively small positive widths in Figure 23.6, indicating that the separation between clusters is weak. This may be symptomatic of over-clustering where clusters that are clearly defined on oncogene induction status are further split into subsets that are less well separated. Nonetheless, we will proceed with the current clustering scheme as it provides reasonable partitions for further characterization of heterogeneity. library(cluster) clust.col &lt;- scater:::.get_palette(&quot;tableau10medium&quot;) # hidden scater colours sil &lt;- silhouette(my.clusters, dist = my.dist) sil.cols &lt;- clust.col[ifelse(sil[,3] &gt; 0, sil[,1], sil[,2])] sil.cols &lt;- sil.cols[order(-sil[,1], sil[,3])] plot(sil, main = paste(length(unique(my.clusters)), &quot;clusters&quot;), border=sil.cols, col=sil.cols, do.col.sort=FALSE) Figure 23.6: Silhouette plot for the hierarchical clustering of the 416B dataset. Each bar represents the silhouette width for a cell and is colored according to the assigned cluster (if positive) or the closest cluster (if negative). 23.9 Interpretation markers &lt;- findMarkers(sce.416b, my.clusters, block=sce.416b$block) marker.set &lt;- markers[[&quot;1&quot;]] head(marker.set, 10) ## DataFrame with 10 rows and 7 columns ## Top p.value FDR summary.logFC logFC.2 logFC.3 logFC.4 ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Ccna2 1 9.85422e-67 4.59246e-62 -7.13310 -7.13310 -2.20632 -7.3451052 ## Cdca8 1 1.01449e-41 1.52514e-38 -7.26175 -6.00378 -2.03841 -7.2617478 ## Pirb 1 4.16555e-33 1.95516e-30 5.87820 5.28149 5.87820 0.0352849 ## Cks1b 2 2.98233e-40 3.23229e-37 -6.43381 -6.43381 -4.15385 -6.4385323 ## Aurkb 2 2.41436e-64 5.62593e-60 -6.94063 -6.94063 -1.65534 -6.4162126 ## Myh11 2 1.28865e-46 3.75353e-43 4.38182 4.38182 4.29290 0.9410499 ## Mcm6 3 1.15877e-28 3.69887e-26 -5.44558 -5.44558 -5.82130 -3.5804973 ## Cdca3 3 5.02047e-45 1.23144e-41 -6.22179 -6.22179 -2.10502 -7.0539510 ## Top2a 3 7.25965e-61 1.12776e-56 -7.07811 -7.07811 -2.39123 -6.8297343 ## Mcm2 4 1.50854e-33 7.98908e-31 -5.54197 -5.54197 -6.09178 -3.8238103 We visualize the expression profiles of the top candidates in Figure 23.7 to verify that the DE signature is robust. Most of the top markers have strong and consistent up- or downregulation in cells of cluster 1 compared to some or all of the other clusters. A cursory examination of the heatmap indicates that cluster 1 contains oncogene-induced cells with strong downregulation of DNA replication and cell cycle genes. This is consistent with the potential induction of senescence as an anti-tumorigenic response (Wajapeyee et al. 2010). top.markers &lt;- rownames(marker.set)[marker.set$Top &lt;= 10] plotHeatmap(sce.416b, features=top.markers, order_columns_by=&quot;cluster&quot;, colour_columns_by=c(&quot;cluster&quot;, &quot;block&quot;, &quot;phenotype&quot;), center=TRUE, symmetric=TRUE, zlim=c(-5, 5)) Figure 23.7: Heatmap of the top marker genes for cluster 1 in the 416B dataset, stratified by cluster. The plate of origin and oncogene induction status are also shown for each cell. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] cluster_2.1.0 dynamicTreeCut_1.63-1 limma_3.43.0 [4] scran_1.15.14 scater_1.15.12 ggplot2_3.2.1 [7] ensembldb_2.11.2 AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 [10] AnnotationDbi_1.49.0 AnnotationHub_2.19.3 BiocFileCache_1.11.4 [13] dbplyr_1.4.2 scRNAseq_2.1.5 SingleCellExperiment_1.9.1 [16] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [19] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [22] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [25] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [28] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 interactiveDisplayBase_1.25.0 codetools_0.2-16 [10] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [13] pheatmap_1.0.12 shiny_1.4.0 BiocManager_1.30.10 [16] compiler_4.0.0 httr_1.4.1 dqrng_0.2.1 [19] backports_1.1.5 assertthat_0.2.1 Matrix_1.2-18 [22] fastmap_1.0.1 lazyeval_0.2.2 later_1.0.0 [25] BiocSingular_1.3.1 htmltools_0.4.0 prettyunits_1.0.2 [28] tools_4.0.0 igraph_1.2.4.2 rsvd_1.0.2 [31] gtable_0.3.0 glue_1.3.1 GenomeInfoDbData_1.2.2 [34] dplyr_0.8.3 rappdirs_0.3.1 Rcpp_1.0.3 [37] vctrs_0.2.1 Biostrings_2.55.4 ExperimentHub_1.13.5 [40] rtracklayer_1.47.0 DelayedMatrixStats_1.9.0 xfun_0.11 [43] stringr_1.4.0 ps_1.3.0 mime_0.8 [46] lifecycle_0.1.0 irlba_2.3.3 statmod_1.4.32 [49] XML_3.98-1.20 edgeR_3.29.0 zlibbioc_1.33.0 [52] scales_1.1.0 hms_0.5.2 promises_1.1.0 [55] ProtGenerics_1.19.3 RColorBrewer_1.1-2 yaml_2.2.0 [58] curl_4.3 memoise_1.1.0 gridExtra_2.3 [61] biomaRt_2.43.0 stringi_1.4.3 RSQLite_2.2.0 [64] highr_0.8 BiocVersion_3.11.1 rlang_0.4.2 [67] pkgconfig_2.0.3 bitops_1.0-6 evaluate_0.14 [70] lattice_0.20-38 purrr_0.3.3 labeling_0.3 [73] GenomicAlignments_1.23.1 cowplot_1.0.0 bit_1.1-14 [76] processx_3.4.1 tidyselect_0.2.5 magrittr_1.5 [79] bookdown_0.16 R6_2.4.1 DBI_1.1.0 [82] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [85] tibble_2.1.3 crayon_1.3.4 rmarkdown_2.0 [88] viridis_0.5.1 progress_1.2.2 locfit_1.5-9.1 [91] grid_4.0.0 blob_1.2.0 callr_3.4.0 [94] digest_0.6.23 xtable_1.8-4 httpuv_1.5.2 [97] openssl_1.4.1 munsell_0.5.0 beeswarm_0.2.3 [100] viridisLite_0.3.0 vipor_0.4.5 askpass_1.1 Bibliography "],
["zeisel-mouse-brain-strt-seq.html", "Chapter 24 Zeisel mouse brain (STRT-Seq) 24.1 Introduction 24.2 Data loading 24.3 Quality control 24.4 Normalization 24.5 Variance modelling 24.6 Dimensionality reduction 24.7 Clustering 24.8 Interpretation Session Info", " Chapter 24 Zeisel mouse brain (STRT-Seq) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 24.1 Introduction Here, we examine a heterogeneous dataset from a study of cell types in the mouse brain (Zeisel et al. 2015). This contains approximately 3000 cells of varying types such as oligodendrocytes, microglia and neurons. Individual cells were isolated using the Fluidigm C1 microfluidics system (Pollen et al. 2014) and library preparation was performed on each cell using a UMI-based protocol. After sequencing, expression was quantified by counting the number of unique molecular identifiers (UMIs) mapped to each gene. 24.2 Data loading We remove repeats and merge together redundant rows corresponding to alternative genomic locations for the same gene. Specifically, we sum the counts for all rows corresponding to a single gene for ease of interpretation, and create a new SingleCellExperiment with these aggregated counts. library(scRNAseq) sce.zeisel &lt;- ZeiselBrainData() sce.zeisel &lt;- sce.zeisel[rowData(sce.zeisel)$featureType!=&quot;repeat&quot;,] library(scater) sce.zeisel &lt;- aggregateAcrossFeatures(sce.zeisel, id=sub(&quot;_loc[0-9]+$&quot;, &quot;&quot;, rownames(sce.zeisel))) library(org.Mm.eg.db) ensembl &lt;- mapIds(org.Mm.eg.db, keys=rownames(sce.zeisel), keytype=&quot;SYMBOL&quot;, column=&quot;ENSEMBL&quot;) rowData(sce.zeisel)$ENSEMBL &lt;- ensembl 24.3 Quality control unfiltered &lt;- sce.zeisel The original authors of the study have already removed low-quality cells prior to data publication. Nonetheless, we compute some quality control metrics to check whether the remaining cells are satisfactory. stats &lt;- perCellQCMetrics(sce.zeisel, subsets=list( Mt=rowData(sce.zeisel)$featureType==&quot;mito&quot;)) qc &lt;- quickPerCellQC(stats, percent_subsets=c(&quot;altexps_ERCC_percent&quot;, &quot;subsets_Mt_percent&quot;)) sce.zeisel &lt;- sce.zeisel[,!qc$discard] colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ERCC percent&quot;), plotColData(unfiltered, y=&quot;subsets_Mt_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito percent&quot;), ncol=2 ) Figure 24.1: Distribution of each QC metric across cells in the Zeisel brain dataset. Each point represents a cell and is colored according to whether that cell was discarded. gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;sum&quot;, y=&quot;subsets_Mt_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10(), plotColData(unfiltered, x=&quot;altexps_ERCC_percent&quot;, y=&quot;subsets_Mt_percent&quot;, colour_by=&quot;discard&quot;), ncol=2 ) Figure 24.2: Percentage of mitochondrial reads in each cell in the Zeisel brain dataset, compared to the total count (left) or the percentage of spike-in reads (right). Each point represents a cell and is colored according to whether that cell was discarded. We also examine the number of cells removed for each reason. colSums(as.matrix(qc)) ## low_lib_size low_n_features high_altexps_ERCC_percent ## 0 3 65 ## high_subsets_Mt_percent discard ## 128 189 24.4 Normalization library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.zeisel) sce.zeisel &lt;- computeSumFactors(sce.zeisel, cluster=clusters) sce.zeisel &lt;- logNormCounts(sce.zeisel) summary(sizeFactors(sce.zeisel)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.119 0.486 0.831 1.000 1.321 4.509 plot(librarySizeFactors(sce.zeisel), sizeFactors(sce.zeisel), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 24.3: Relationship between the library size factors and the deconvolution size factors in the Zeisel brain dataset. 24.5 Variance modelling In theory, we should block on the plate of origin for each cell. However, only 20-40 cells are available on each plate, and the population is also highly heterogeneous. This means that we cannot assume that the distribution of sampled cell types on each plate is the same. Thus, to avoid regressing out potential biology, we will not block on any factors in this analysis. dec.zeisel &lt;- modelGeneVarWithSpikes(sce.zeisel, &quot;ERCC&quot;) top.hvgs &lt;- getTopHVGs(dec.zeisel, prop=0.1) We see from Figure 24.4 that the technical and total variances are much smaller than those in the read-based datasets. This is due to the use of UMIs, which reduces the noise caused by variable PCR amplification. Furthermore, the spike-in trend is consistently lower than the variances of the endogenous gene, which reflects the heterogeneity in gene expression across cells of different types. plot(dec.zeisel$mean, dec.zeisel$total, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(dec.zeisel) points(curfit$mean, curfit$var, col=&quot;red&quot;, pch=16) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) Figure 24.4: Per-gene variance as a function of the mean for the log-expression values in the Zeisel brain dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the spike-in transcripts (red). 24.6 Dimensionality reduction library(BiocSingular) set.seed(101011001) sce.zeisel &lt;- denoisePCA(sce.zeisel, technical=dec.zeisel, subset.row=top.hvgs) sce.zeisel &lt;- runTSNE(sce.zeisel, dimred=&quot;PCA&quot;) We have a look at the number of PCs retained by denoisePCA(). ncol(reducedDim(sce.zeisel, &quot;PCA&quot;)) ## [1] 50 24.7 Clustering snn.gr &lt;- buildSNNGraph(sce.zeisel, use.dimred=&quot;PCA&quot;) sce.zeisel$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) table(sce.zeisel$cluster) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ## 283 451 114 143 599 167 191 128 350 70 199 58 39 24 plotTSNE(sce.zeisel, colour_by=&quot;cluster&quot;) Figure 24.5: Obligatory \\(t\\)-SNE plot of the Zeisel brain dataset, where each point represents a cell and is colored according to the assigned cluster. 24.8 Interpretation We focus on upregulated marker genes as these can quickly provide positive identification of cell type in a heterogeneous population. We examine the table for cluster 1, in which log-fold changes are reported between cluster 1 and every other cluster. The same output is provided for each cluster in order to identify genes that discriminate between clusters. markers &lt;- findMarkers(sce.zeisel, sce.zeisel$cluster, direction=&quot;up&quot;) marker.set &lt;- markers[[&quot;1&quot;]] head(marker.set[,1:8], 10) # only first 8 columns, for brevity ## DataFrame with 10 rows and 8 columns ## Top p.value FDR summary.logFC logFC.2 logFC.3 logFC.4 logFC.5 ## &lt;integer&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## Atp1a3 1 1.45982e-282 7.24035e-279 3.45669 0.0398568 0.0893943 1.241388 3.45669 ## Celf4 1 2.27030e-246 4.50404e-243 3.10465 0.3886716 0.6145023 0.869334 3.10465 ## Gad1 1 7.44925e-232 1.34351e-228 4.57719 4.5392751 4.3003280 4.050305 4.47236 ## Gad2 1 2.88086e-207 3.57208e-204 4.25393 4.2322487 3.8884654 3.769556 4.16902 ## Mllt11 1 1.72982e-249 3.81309e-246 2.88363 0.5782719 1.4933128 0.951649 2.88363 ## Ndrg4 1 0.00000e+00 0.00000e+00 3.84337 0.8887239 1.0183408 1.140041 3.84337 ## Slc32a1 1 2.38276e-110 4.04030e-108 1.92859 1.9196173 1.8252062 1.804311 1.92426 ## Syngr3 1 3.68257e-143 1.30462e-140 2.55531 1.0981258 1.1994793 1.188856 2.47696 ## Atp6v1g2 2 3.04451e-204 3.55295e-201 2.50875 0.0981706 0.5203760 0.616391 2.50875 ## Napb 2 1.10402e-231 1.82522e-228 2.81533 0.1774508 0.3046901 0.673772 2.81533 Figure 24.6 indicates that most of the top markers are strongly DE in cells of cluster 1 compared to some or all of the other clusters. We can use these markers to identify cells from cluster 1 in validation studies with an independent population of cells. A quick look at the markers suggest that cluster 1 represents interneurons based on expression of Gad1 and Slc6a1 (Zeng et al. 2012). top.markers &lt;- rownames(marker.set)[marker.set$Top &lt;= 10] plotHeatmap(sce.zeisel, features=top.markers, order_columns_by=&quot;cluster&quot;) Figure 24.6: Heatmap of the log-expression of the top markers for cluster 1 compared to each other cluster. Cells are ordered by cluster and the color is scaled to the log-expression of each gene in each cell. An alternative visualization approach is to plot the log-fold changes to all other clusters directly (Figure 24.7). This is more concise and is useful in situations involving many clusters that contain different numbers of cells. logFCs &lt;- getMarkerEffects(marker.set[1:50,]) library(pheatmap) max.lfc &lt;- max(abs(range(logFCs))) pheatmap(logFCs, breaks=seq(-5, 5, length.out=101)) Figure 24.7: Heatmap of the log-fold changes of the top markers for cluster 1 compared to each other cluster. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] pheatmap_1.0.12 BiocSingular_1.3.1 scran_1.15.14 [4] org.Mm.eg.db_3.10.0 AnnotationDbi_1.49.0 scater_1.15.12 [7] ggplot2_3.2.1 scRNAseq_2.1.5 SingleCellExperiment_1.9.1 [10] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [13] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [16] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [19] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [22] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 bit64_0.9-7 RColorBrewer_1.1-2 [4] httr_1.4.1 tools_4.0.0 backports_1.1.5 [7] R6_2.4.1 irlba_2.3.3 vipor_0.4.5 [10] DBI_1.1.0 lazyeval_0.2.2 colorspace_1.4-1 [13] withr_2.1.2 gridExtra_2.3 tidyselect_0.2.5 [16] processx_3.4.1 bit_1.1-14 curl_4.3 [19] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [22] bookdown_0.16 scales_1.1.0 callr_3.4.0 [25] rappdirs_0.3.1 stringr_1.4.0 digest_0.6.23 [28] rmarkdown_2.0 XVector_0.27.0 pkgconfig_2.0.3 [31] htmltools_0.4.0 highr_0.8 limma_3.43.0 [34] dbplyr_1.4.2 fastmap_1.0.1 rlang_0.4.2 [37] RSQLite_2.2.0 shiny_1.4.0 DelayedMatrixStats_1.9.0 [40] farver_2.0.1 dplyr_0.8.3 RCurl_1.95-4.12 [43] magrittr_1.5 GenomeInfoDbData_1.2.2 Matrix_1.2-18 [46] Rcpp_1.0.3 ggbeeswarm_0.6.0 munsell_0.5.0 [49] viridis_0.5.1 lifecycle_0.1.0 edgeR_3.29.0 [52] stringi_1.4.3 yaml_2.2.0 zlibbioc_1.33.0 [55] Rtsne_0.15 BiocFileCache_1.11.4 AnnotationHub_2.19.3 [58] grid_4.0.0 blob_1.2.0 dqrng_0.2.1 [61] promises_1.1.0 ExperimentHub_1.13.5 crayon_1.3.4 [64] lattice_0.20-38 cowplot_1.0.0 locfit_1.5-9.1 [67] zeallot_0.1.0 knitr_1.26 ps_1.3.0 [70] pillar_1.4.3 igraph_1.2.4.2 codetools_0.2-16 [73] glue_1.3.1 BiocVersion_3.11.1 evaluate_0.14 [76] BiocManager_1.30.10 vctrs_0.2.1 httpuv_1.5.2 [79] gtable_0.3.0 purrr_0.3.3 assertthat_0.2.1 [82] xfun_0.11 rsvd_1.0.2 mime_0.8 [85] xtable_1.8-4 later_1.0.0 viridisLite_0.3.0 [88] tibble_2.1.3 beeswarm_0.2.3 memoise_1.1.0 [91] statmod_1.4.32 interactiveDisplayBase_1.25.0 Bibliography "],
["unfiltered-human-pbmcs-10x-genomics.html", "Chapter 25 Unfiltered human PBMCs (10X Genomics) 25.1 Introduction 25.2 Data loading 25.3 Quality control 25.4 Normalization 25.5 Variance modelling 25.6 Dimensionality reduction 25.7 Clustering 25.8 Interpretation Session Info", " Chapter 25 Unfiltered human PBMCs (10X Genomics) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 25.1 Introduction Here, we describe a brief analysis of the peripheral blood mononuclear cell (PBMC) dataset from 10X Genomics (Zheng et al. 2017). The data are publicly available from the 10X Genomics website, from which we download the raw gene/barcode count matrices, i.e., before cell calling from the CellRanger pipeline. 25.2 Data loading library(BiocFileCache) bfc &lt;- BiocFileCache(&quot;raw_data&quot;, ask = FALSE) raw.path &lt;- bfcrpath(bfc, file.path(&quot;http://cf.10xgenomics.com/samples&quot;, &quot;cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz&quot;)) untar(raw.path, exdir=file.path(tempdir(), &quot;pbmc4k&quot;)) library(DropletUtils) fname &lt;- file.path(tempdir(), &quot;pbmc4k/raw_gene_bc_matrices/GRCh38&quot;) sce.pbmc &lt;- read10xCounts(fname, col.names=TRUE) library(scater) rownames(sce.pbmc) &lt;- uniquifyFeatureNames( rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol) library(EnsDb.Hsapiens.v86) location &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID, column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) 25.3 Quality control We perform cell detection using the emptyDrops() algorithm, as discussed in Section 6.5. set.seed(100) e.out &lt;- emptyDrops(counts(sce.pbmc)) sce.pbmc &lt;- sce.pbmc[,which(e.out$FDR &lt;= 0.001)] unfiltered &lt;- sce.pbmc We use a relaxed QC strategy and only remove cells with large mitochondrial proportions, using it as a proxy for cell damage. This reduces the risk of removing cell types with low RNA content, especially in a heterogeneous PBMC population with many different cell types. stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location==&quot;MT&quot;))) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) sce.pbmc &lt;- sce.pbmc[,!high.mito] summary(high.mito) ## Mode FALSE TRUE ## logical 3922 311 colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- high.mito gridExtra::grid.arrange( plotColData(unfiltered, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito percent&quot;), ncol=2 ) Figure 25.1: Distribution of various QC metrics in the PBMC dataset after cell calling. Each point is a cell and is colored according to whether it was discarded by the mitochondrial filter. plotColData(unfiltered, x=&quot;sum&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10() Figure 25.2: Proportion of mitochondrial reads in each cell of the PBMC dataset compared to its total count. 25.4 Normalization library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) sce.pbmc &lt;- logNormCounts(sce.pbmc) summary(sizeFactors(sce.pbmc)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.009 0.710 0.871 1.000 1.094 13.948 plot(librarySizeFactors(sce.pbmc), sizeFactors(sce.pbmc), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 25.3: Relationship between the library size factors and the deconvolution size factors in the PBMC dataset. 25.5 Variance modelling set.seed(1001) dec.pbmc &lt;- modelGeneVarByPoisson(sce.pbmc) top.pbmc &lt;- getTopHVGs(dec.pbmc, prop=0.1) plot(dec.pbmc$mean, dec.pbmc$total, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(dec.pbmc) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) Figure 25.4: Per-gene variance as a function of the mean for the log-expression values in the PBMC dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to simulated Poisson counts. 25.6 Dimensionality reduction set.seed(10000) sce.pbmc &lt;- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc) set.seed(100000) sce.pbmc &lt;- runTSNE(sce.pbmc, dimred=&quot;PCA&quot;) set.seed(1000000) sce.pbmc &lt;- runUMAP(sce.pbmc, dimred=&quot;PCA&quot;) We verify that a reasonable number of PCs is retained. ncol(reducedDim(sce.pbmc, &quot;PCA&quot;)) ## [1] 8 25.7 Clustering g &lt;- buildSNNGraph(sce.pbmc, k=10, use.dimred = &#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership sce.pbmc$cluster &lt;- factor(clust) table(sce.pbmc$cluster) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## 585 518 364 458 170 791 295 107 45 46 152 84 40 60 142 16 28 21 plotTSNE(sce.pbmc, colour_by=&quot;cluster&quot;) Figure 25.5: Obligatory \\(t\\)-SNE plot of the PBMC dataset, where each point represents a cell and is colored according to the assigned cluster. 25.8 Interpretation markers &lt;- findMarkers(sce.pbmc, groups=sce.pbmc$cluster, pval.type=&quot;some&quot;, direction=&quot;up&quot;) We examine the markers for cluster 7 in more detail. High expression of CD14, CD68 and MNDA combined with low expression of CD16 suggests that this cluster contains monocytes, compared to macrophages in cluster 12. marker.set &lt;- markers[[&quot;7&quot;]] as.data.frame(marker.set[1:30,1:3]) ## p.value FDR summary.logFC ## FCN1 4.882e-137 1.645e-132 2.7159 ## LGALS2 3.729e-133 6.282e-129 2.1914 ## CSTA 1.427e-131 1.603e-127 2.1237 ## CFD 1.207e-102 1.017e-98 1.5033 ## FGL2 8.567e-93 5.773e-89 1.3589 ## IFI30 7.823e-80 4.393e-76 1.2764 ## CLEC7A 6.052e-79 2.913e-75 1.1094 ## MS4A6A 1.958e-78 8.247e-75 1.4195 ## CFP 8.802e-73 3.295e-69 1.3122 ## S100A8 6.193e-70 2.087e-66 3.4316 ## LYZ 9.327e-70 2.857e-66 3.0166 ## LGALS3 1.496e-69 4.200e-66 1.1279 ## RP11-1143G9.4 1.673e-69 4.336e-66 2.0166 ## VCAN 2.661e-68 6.404e-65 1.2505 ## SERPINA1 5.716e-65 1.284e-61 1.7134 ## CPVL 1.373e-64 2.890e-61 0.9759 ## CD14 4.392e-61 8.704e-58 1.1047 ## S100A12 3.343e-59 6.257e-56 1.3923 ## TNFSF13B 7.416e-59 1.315e-55 0.9295 ## NAMPT 3.018e-57 5.084e-54 0.9750 ## CD302 2.232e-56 3.581e-53 0.8216 ## S100A9 2.213e-54 3.390e-51 2.5405 ## MNDA 7.045e-54 1.032e-50 2.0909 ## FCGRT 2.045e-53 2.871e-50 1.1251 ## IGSF6 3.575e-53 4.818e-50 0.8448 ## CD68 1.122e-52 1.454e-49 1.3482 ## AIF1 1.471e-52 1.835e-49 2.7225 ## NCF2 2.139e-52 2.574e-49 0.7757 ## MPEG1 4.167e-52 4.841e-49 0.7906 ## CEBPB 5.306e-51 5.789e-48 1.1035 plotExpression(sce.pbmc, features=c(&quot;CD14&quot;, &quot;CD68&quot;, &quot;MNDA&quot;, &quot;FCGR3A&quot;), x=&quot;cluster&quot;, colour_by=&quot;cluster&quot;) Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] scran_1.15.14 EnsDb.Hsapiens.v86_2.99.0 ensembldb_2.11.2 [4] AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 [7] scater_1.15.12 ggplot2_3.2.1 DropletUtils_1.7.1 [10] SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 DelayedArray_0.13.2 [13] BiocParallel_1.21.2 matrixStats_0.55.0 Biobase_2.47.2 [16] GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 IRanges_2.21.2 [19] S4Vectors_0.25.8 BiocGenerics_0.33.0 BiocFileCache_1.11.4 [22] dbplyr_1.4.2 Cairo_1.5-10 BiocStyle_2.15.3 [25] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 RSpectra_0.16-0 codetools_0.2-16 [10] R.methodsS3_1.7.1 knitr_1.26 zeallot_0.1.0 [13] Rsamtools_2.3.2 R.oo_1.23.0 uwot_0.1.5 [16] HDF5Array_1.15.2 BiocManager_1.30.10 compiler_4.0.0 [19] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [22] assertthat_0.2.1 Matrix_1.2-18 lazyeval_0.2.2 [25] limma_3.43.0 BiocSingular_1.3.1 htmltools_0.4.0 [28] prettyunits_1.0.2 tools_4.0.0 rsvd_1.0.2 [31] igraph_1.2.4.2 gtable_0.3.0 glue_1.3.1 [34] GenomeInfoDbData_1.2.2 dplyr_0.8.3 rappdirs_0.3.1 [37] Rcpp_1.0.3 vctrs_0.2.1 Biostrings_2.55.4 [40] rtracklayer_1.47.0 DelayedMatrixStats_1.9.0 xfun_0.11 [43] stringr_1.4.0 ps_1.3.0 lifecycle_0.1.0 [46] irlba_2.3.3 statmod_1.4.32 XML_3.98-1.20 [49] edgeR_3.29.0 zlibbioc_1.33.0 scales_1.1.0 [52] hms_0.5.2 ProtGenerics_1.19.3 rhdf5_2.31.1 [55] yaml_2.2.0 curl_4.3 memoise_1.1.0 [58] gridExtra_2.3 biomaRt_2.43.0 stringi_1.4.3 [61] RSQLite_2.2.0 highr_0.8 rlang_0.4.2 [64] pkgconfig_2.0.3 bitops_1.0-6 evaluate_0.14 [67] lattice_0.20-38 purrr_0.3.3 Rhdf5lib_1.9.0 [70] labeling_0.3 GenomicAlignments_1.23.1 cowplot_1.0.0 [73] bit_1.1-14 processx_3.4.1 tidyselect_0.2.5 [76] magrittr_1.5 bookdown_0.16 R6_2.4.1 [79] DBI_1.1.0 pillar_1.4.3 withr_2.1.2 [82] RCurl_1.95-4.12 tibble_2.1.3 crayon_1.3.4 [85] rmarkdown_2.0 viridis_0.5.1 progress_1.2.2 [88] locfit_1.5-9.1 grid_4.0.0 FNN_1.1.3 [91] blob_1.2.0 callr_3.4.0 digest_0.6.23 [94] R.utils_2.9.2 RcppParallel_4.4.4 openssl_1.4.1 [97] munsell_0.5.0 beeswarm_0.2.3 viridisLite_0.3.0 [100] vipor_0.4.5 askpass_1.1 Bibliography "],
["filtered-human-pbmcs-10x-genomics.html", "Chapter 26 Filtered human PBMCs (10X Genomics) 26.1 Introduction 26.2 Data loading 26.3 Quality control 26.4 Normalization 26.5 Variance modelling 26.6 Dimensionality reduction 26.7 Clustering 26.8 Data integration Session Info", " Chapter 26 Filtered human PBMCs (10X Genomics) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 26.1 Introduction This performs an analysis of the public PBMC ID dataset generated by 10X Genomics (Zheng et al. 2017), starting from the filtered count matrix. 26.2 Data loading library(TENxPBMCData) all.sce &lt;- list( pbmc3k=TENxPBMCData(&#39;pbmc3k&#39;), pbmc4k=TENxPBMCData(&#39;pbmc4k&#39;), pbmc8k=TENxPBMCData(&#39;pbmc8k&#39;) ) 26.3 Quality control unfiltered &lt;- all.sce Cell calling implicitly serves as a QC step to remove libraries with low total counts and number of detected genes. Thus, we will only filter on the mitochondrial proportion. library(scater) stats &lt;- high.mito &lt;- list() for (n in names(all.sce)) { current &lt;- all.sce[[n]] is.mito &lt;- grep(&quot;MT&quot;, rowData(current)$Symbol_TENx) stats[[n]] &lt;- perCellQCMetrics(current, subsets=list(Mito=is.mito)) high.mito[[n]] &lt;- isOutlier(stats[[n]]$subsets_Mito_percent, type=&quot;higher&quot;) all.sce[[n]] &lt;- current[,!high.mito[[n]]] } qcplots &lt;- list() for (n in names(all.sce)) { current &lt;- unfiltered[[n]] colData(current) &lt;- cbind(colData(current), stats[[n]]) current$discard &lt;- high.mito[[n]] qcplots[[n]] &lt;- plotColData(current, x=&quot;sum&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10() } do.call(gridExtra::grid.arrange, c(qcplots, ncol=3)) Figure 26.1: Percentage of mitochondrial reads in each cell in each of the 10X PBMC datasets, compared to the total count. Each point represents a cell and is colored according to whether that cell was discarded. lapply(high.mito, summary) ## $pbmc3k ## Mode FALSE TRUE ## logical 2609 91 ## ## $pbmc4k ## Mode FALSE TRUE ## logical 4182 158 ## ## $pbmc8k ## Mode FALSE TRUE ## logical 8157 224 26.4 Normalization We perform library size normalization, simply for convenience when dealing with file-backed matrices. all.sce &lt;- lapply(all.sce, logNormCounts) lapply(all.sce, function(x) summary(sizeFactors(x))) ## $pbmc3k ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.234 0.748 0.926 1.000 1.157 6.604 ## ## $pbmc4k ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.315 0.711 0.890 1.000 1.127 11.027 ## ## $pbmc8k ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.296 0.704 0.877 1.000 1.118 6.794 26.5 Variance modelling library(scran) all.dec &lt;- lapply(all.sce, modelGeneVar) all.hvgs &lt;- lapply(all.dec, getTopHVGs, prop=0.1) par(mfrow=c(1,3)) for (n in names(all.dec)) { curdec &lt;- all.dec[[n]] plot(curdec$mean, curdec$total, pch=16, cex=0.5, main=n, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(curdec) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 26.2: Per-gene variance as a function of the mean for the log-expression values in each PBMC dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the variances. 26.6 Dimensionality reduction For various reasons, we will first analyze each PBMC dataset separately rather than merging them together. We use randomized SVD, which is more efficient for file-backed matrices. library(BiocSingular) set.seed(10000) all.sce &lt;- mapply(FUN=runPCA, x=all.sce, subset_row=all.hvgs, MoreArgs=list(ncomponents=25, BSPARAM=RandomParam()), SIMPLIFY=FALSE) set.seed(100000) all.sce &lt;- lapply(all.sce, runTSNE, dimred=&quot;PCA&quot;) set.seed(1000000) all.sce &lt;- lapply(all.sce, runUMAP, dimred=&quot;PCA&quot;) 26.7 Clustering for (n in names(all.sce)) { g &lt;- buildSNNGraph(all.sce[[n]], k=10, use.dimred=&#39;PCA&#39;) clust &lt;- igraph::cluster_walktrap(g)$membership all.sce[[n]]$cluster &lt;- factor(clust) } lapply(all.sce, function(x) table(x$cluster)) ## $pbmc3k ## ## 1 2 3 4 5 6 7 8 9 10 ## 487 154 603 514 31 150 179 333 147 11 ## ## $pbmc4k ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 ## 497 185 569 786 373 232 44 1023 77 218 88 54 36 ## ## $pbmc8k ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## 1004 759 1073 1543 367 150 201 2067 59 154 244 67 76 285 20 15 64 9 all.tsne &lt;- list() for (n in names(all.sce)) { all.tsne[[n]] &lt;- plotTSNE(all.sce[[n]], colour_by=&quot;cluster&quot;) + ggtitle(n) } do.call(gridExtra::grid.arrange, c(all.tsne, list(ncol=2))) Figure 26.3: Obligatory \\(t\\)-SNE plots of each PBMC dataset, where each point represents a cell in the corresponding dataset and is colored according to the assigned cluster. 26.8 Data integration With the per-dataset analyses out of the way, we will now repeat the analysis after merging together the three batches. # Intersecting the common genes. universe &lt;- Reduce(intersect, lapply(all.sce, rownames)) all.sce2 &lt;- lapply(all.sce, &quot;[&quot;, i=universe,) all.dec2 &lt;- lapply(all.dec, &quot;[&quot;, i=universe,) # Renormalizing to adjust for differences in depth. library(batchelor) normed.sce &lt;- do.call(multiBatchNorm, all.sce2) # Identifying a set of HVGs using stats from all batches. combined.dec &lt;- do.call(combineVar, all.dec2) combined.hvg &lt;- getTopHVGs(combined.dec, n=5000) set.seed(1000101) merged.pbmc &lt;- do.call(fastMNN, c(normed.sce, list(subset.row=combined.hvg, BSPARAM=RandomParam()))) We use the percentage of lost variance as a measure. metadata(merged.pbmc)$merge.info$lost.var ## pbmc3k pbmc4k pbmc8k ## [1,] 7.003e-03 3.126e-03 0.000000 ## [2,] 7.137e-05 5.125e-05 0.003003 We proceed to clustering: g &lt;- buildSNNGraph(merged.pbmc, use.dimred=&quot;corrected&quot;) merged.pbmc$cluster &lt;- factor(igraph::cluster_louvain(g)$membership) table(merged.pbmc$cluster, merged.pbmc$batch) ## ## pbmc3k pbmc4k pbmc8k ## 1 113 387 825 ## 2 507 395 806 ## 3 175 344 581 ## 4 295 539 1018 ## 5 346 638 1210 ## 6 11 3 9 ## 7 17 27 111 ## 8 33 113 185 ## 9 423 754 1546 ## 10 4 36 67 ## 11 197 124 221 ## 12 150 180 293 ## 13 327 588 1125 ## 14 11 54 160 And visualization: set.seed(10101010) merged.pbmc &lt;- runTSNE(merged.pbmc, dimred=&quot;corrected&quot;) gridExtra::grid.arrange( plotTSNE(merged.pbmc, colour_by=&quot;cluster&quot;, text_by=&quot;cluster&quot;, text_colour=&quot;red&quot;), plotTSNE(merged.pbmc, colour_by=&quot;batch&quot;) ) Figure 26.4: Obligatory \\(t\\)-SNE plots for the merged PBMC datasets, where each point represents a cell and is colored by cluster (top) or batch (bottom). Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] batchelor_1.3.8 BiocSingular_1.3.1 scran_1.15.14 [4] scater_1.15.12 ggplot2_3.2.1 TENxPBMCData_1.5.0 [7] HDF5Array_1.15.2 rhdf5_2.31.1 SingleCellExperiment_1.9.1 [10] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [13] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [16] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [19] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [22] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 RSpectra_0.16-0 interactiveDisplayBase_1.25.0 [10] AnnotationDbi_1.49.0 codetools_0.2-16 knitr_1.26 [13] zeallot_0.1.0 dbplyr_1.4.2 uwot_0.1.5 [16] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [19] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [22] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [25] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [28] htmltools_0.4.0 tools_4.0.0 rsvd_1.0.2 [31] igraph_1.2.4.2 gtable_0.3.0 glue_1.3.1 [34] GenomeInfoDbData_1.2.2 dplyr_0.8.3 rappdirs_0.3.1 [37] Rcpp_1.0.3 vctrs_0.2.1 ExperimentHub_1.13.5 [40] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [43] ps_1.3.0 beachmat_2.3.1 mime_0.8 [46] lifecycle_0.1.0 irlba_2.3.3 statmod_1.4.32 [49] AnnotationHub_2.19.3 edgeR_3.29.0 zlibbioc_1.33.0 [52] scales_1.1.0 promises_1.1.0 yaml_2.2.0 [55] curl_4.3 memoise_1.1.0 gridExtra_2.3 [58] stringi_1.4.3 RSQLite_2.2.0 highr_0.8 [61] BiocVersion_3.11.1 rlang_0.4.2 pkgconfig_2.0.3 [64] bitops_1.0-6 evaluate_0.14 lattice_0.20-38 [67] purrr_0.3.3 Rhdf5lib_1.9.0 labeling_0.3 [70] cowplot_1.0.0 bit_1.1-14 processx_3.4.1 [73] tidyselect_0.2.5 RcppAnnoy_0.0.14 magrittr_1.5 [76] bookdown_0.16 R6_2.4.1 DBI_1.1.0 [79] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [82] tibble_2.1.3 crayon_1.3.4 BiocFileCache_1.11.4 [85] rmarkdown_2.0 viridis_0.5.1 locfit_1.5-9.1 [88] grid_4.0.0 FNN_1.1.3 blob_1.2.0 [91] callr_3.4.0 digest_0.6.23 xtable_1.8-4 [94] httpuv_1.5.2 RcppParallel_4.4.4 munsell_0.5.0 [97] beeswarm_0.2.3 viridisLite_0.3.0 vipor_0.4.5 Bibliography "],
["human-pbmc-10x-dataset-surface-proteins.html", "Chapter 27 Human PBMC 10X dataset (surface proteins) 27.1 Introduction 27.2 Analysis code 27.3 Results Session Info", " Chapter 27 Human PBMC 10X dataset (surface proteins) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 27.1 Introduction Here, we describe a brief analysis of yet another peripheral blood mononuclear cell (PBMC) dataset from 10X Genomics (Zheng et al. 2017). Data are publicly available from the 10X Genomics website, from which we download the filtered gene/barcode count matrices for gene expression and cell surface proteins. Note that most of the repertoire-related steps will be discussed in Chapter 19, this workflow mostly provides the baseline analysis for the expression data. 27.2 Analysis code 27.2.1 Data loading library(BiocFileCache) bfc &lt;- BiocFileCache(ask=FALSE) exprs.data &lt;- bfcrpath(bfc, file.path( &quot;http://cf.10xgenomics.com/samples/cell-vdj/3.1.0&quot;, &quot;vdj_v1_hs_pbmc3&quot;, &quot;vdj_v1_hs_pbmc3_filtered_feature_bc_matrix.tar.gz&quot;)) untar(exprs.data, exdir=tempdir()) library(DropletUtils) sce.pbmc &lt;- read10xCounts(file.path(tempdir(), &quot;filtered_feature_bc_matrix&quot;)) sce.pbmc &lt;- splitAltExps(sce.pbmc, rowData(sce.pbmc)$Type) 27.2.2 Quality control unfiltered &lt;- sce.pbmc We discard cells with high mitochondrial proportions and few detectable ADT counts. library(scater) is.mito &lt;- grep(&quot;^MT-&quot;, rowData(sce.pbmc)$Symbol) stats &lt;- perCellQCMetrics(sce.pbmc, subsets=list(Mito=is.mito)) high.mito &lt;- isOutlier(stats$subsets_Mito_percent, type=&quot;higher&quot;) low.adt &lt;- stats$`altexps_Antibody Capture_detected` &lt; nrow(altExp(sce.pbmc))/2 discard &lt;- high.mito | low.adt sce.pbmc &lt;- sce.pbmc[,!discard] 27.2.3 Normalization Computing size factors for the gene expression and ADT counts. library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.pbmc) sce.pbmc &lt;- computeSumFactors(sce.pbmc, cluster=clusters) # TODO: move into scran somewhere. library(DelayedMatrixStats) ambient &lt;- rowMeans(counts(altExp(sce.pbmc))) sf.amb &lt;- colMedians(DelayedArray(counts(altExp(sce.pbmc)))/ambient) sf.amb &lt;- sf.amb/mean(sf.amb) sizeFactors(altExp(sce.pbmc)) &lt;- sf.amb sce.pbmc &lt;- logNormCounts(sce.pbmc, use_altexps=TRUE) 27.2.4 Dimensionality reduction set.seed(100000) altExp(sce.pbmc) &lt;- runTSNE(altExp(sce.pbmc)) set.seed(1000000) altExp(sce.pbmc) &lt;- runUMAP(altExp(sce.pbmc)) 27.2.5 Clustering g.adt &lt;- buildSNNGraph(altExp(sce.pbmc), k=10, d=NA) clust.adt &lt;- igraph::cluster_walktrap(g.adt)$membership altExp(sce.pbmc)$cluster &lt;- factor(clust.adt) set.seed(1010010) subclusters &lt;- quickSubCluster(sce.pbmc, clust.adt, prepFUN=function(x) { dec &lt;- modelGeneVarByPoisson(x) top &lt;- getTopHVGs(dec, prop=0.1) denoisePCA(x, dec, subset.row=top) }, clusterFUN=function(x) { g.gene &lt;- buildSNNGraph(x, k=10, use.dimred = &#39;PCA&#39;) igraph::cluster_walktrap(g.gene)$membership } ) 27.3 Results 27.3.1 Quality control statistics colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- discard gridExtra::grid.arrange( plotColData(unfiltered, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito percent&quot;), plotColData(unfiltered, y=&quot;altexps_Antibody Capture_detected&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ADT detected&quot;), ncol=2 ) plotColData(unfiltered, x=&quot;sum&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10() summary(high.mito) ## Mode FALSE TRUE ## logical 6660 571 summary(low.adt) ## Mode FALSE ## logical 7231 27.3.2 Normalization summary(sizeFactors(sce.pbmc)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.074 0.719 0.908 1.000 1.133 8.858 summary(sizeFactors(altExp(sce.pbmc))) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.10 0.70 0.83 1.00 1.03 227.36 plot(librarySizeFactors(sce.pbmc), sizeFactors(sce.pbmc), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, main=&quot;Gene expression&quot;, log=&quot;xy&quot;) plot(librarySizeFactors(altExp(sce.pbmc)), sizeFactors(altExp(sce.pbmc)), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Median-based factors&quot;, main=&quot;Antibody capture&quot;, log=&quot;xy&quot;) 27.3.3 Clustering table(altExp(sce.pbmc)$cluster) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 160 507 662 39 691 1415 32 650 76 1037 121 47 68 25 15 562 139 32 44 120 ## 21 22 23 24 ## 84 65 52 17 plotTSNE(altExp(sce.pbmc), colour_by=&quot;cluster&quot;, text_by=&quot;cluster&quot;, text_col=&quot;red&quot;) Counting the number of gene expression-derived subclusters in each ADT-derived parent cluster: data.frame( Cluster=names(subclusters), Ncells=vapply(subclusters, ncol, 0L), Nsub=vapply(subclusters, function(x) length(unique(x$subcluster)), 0L) ) ## Cluster Ncells Nsub ## 1 1 160 3 ## 2 2 507 4 ## 3 3 662 5 ## 4 4 39 1 ## 5 5 691 5 ## 6 6 1415 7 ## 7 7 32 1 ## 8 8 650 7 ## 9 9 76 2 ## 10 10 1037 8 ## 11 11 121 2 ## 12 12 47 1 ## 13 13 68 2 ## 14 14 25 1 ## 15 15 15 1 ## 16 16 562 9 ## 17 17 139 3 ## 18 18 32 1 ## 19 19 44 1 ## 20 20 120 4 ## 21 21 84 3 ## 22 22 65 2 ## 23 23 52 3 ## 24 24 17 1 Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] DelayedMatrixStats_1.9.0 scran_1.15.14 scater_1.15.12 [4] ggplot2_3.2.1 DropletUtils_1.7.1 SingleCellExperiment_1.9.1 [7] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [10] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [13] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [16] BiocGenerics_0.33.0 BiocFileCache_1.11.4 dbplyr_1.4.2 [19] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 bit64_0.9-7 RcppAnnoy_0.0.14 httr_1.4.1 [5] tools_4.0.0 backports_1.1.5 R6_2.4.1 irlba_2.3.3 [9] HDF5Array_1.15.2 vipor_0.4.5 uwot_0.1.5 DBI_1.1.0 [13] lazyeval_0.2.2 colorspace_1.4-1 withr_2.1.2 tidyselect_0.2.5 [17] gridExtra_2.3 processx_3.4.1 bit_1.1-14 curl_4.3 [21] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 bookdown_0.16 [25] scales_1.1.0 callr_3.4.0 rappdirs_0.3.1 stringr_1.4.0 [29] digest_0.6.23 rmarkdown_2.0 R.utils_2.9.2 XVector_0.27.0 [33] pkgconfig_2.0.3 htmltools_0.4.0 limma_3.43.0 rlang_0.4.2 [37] RSQLite_2.2.0 farver_2.0.1 dplyr_0.8.3 R.oo_1.23.0 [41] RCurl_1.95-4.12 magrittr_1.5 BiocSingular_1.3.1 GenomeInfoDbData_1.2.2 [45] Matrix_1.2-18 Rcpp_1.0.3 ggbeeswarm_0.6.0 munsell_0.5.0 [49] Rhdf5lib_1.9.0 viridis_0.5.1 lifecycle_0.1.0 R.methodsS3_1.7.1 [53] stringi_1.4.3 yaml_2.2.0 edgeR_3.29.0 zlibbioc_1.33.0 [57] Rtsne_0.15 rhdf5_2.31.1 grid_4.0.0 blob_1.2.0 [61] dqrng_0.2.1 crayon_1.3.4 lattice_0.20-38 cowplot_1.0.0 [65] locfit_1.5-9.1 zeallot_0.1.0 knitr_1.26 ps_1.3.0 [69] pillar_1.4.3 igraph_1.2.4.2 codetools_0.2-16 glue_1.3.1 [73] evaluate_0.14 RcppParallel_4.4.4 BiocManager_1.30.10 vctrs_0.2.1 [77] gtable_0.3.0 purrr_0.3.3 assertthat_0.2.1 xfun_0.11 [81] rsvd_1.0.2 RSpectra_0.16-0 viridisLite_0.3.0 tibble_2.1.3 [85] beeswarm_0.2.3 memoise_1.1.0 statmod_1.4.32 Bibliography "],
["grun-human-pancreas-cel-seq2.html", "Chapter 28 Grun human pancreas (CEL-seq2) 28.1 Introduction 28.2 Data loading 28.3 Quality control 28.4 Normalization 28.5 Variance modelling 28.6 Data integration 28.7 Dimensionality reduction 28.8 Clustering Session Info", " Chapter 28 Grun human pancreas (CEL-seq2) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 28.1 Introduction This workflow performs an analysis of the Grun et al. (2016) CEL-seq2 dataset consisting of human pancreas cells from various donors. 28.2 Data loading library(scRNAseq) sce.grun &lt;- GrunPancreasData() We convert to Ensembl identifiers, and we remove duplicated genes or genes without Ensembl IDs. library(org.Hs.eg.db) gene.ids &lt;- mapIds(org.Hs.eg.db, keys=rowData(sce.grun)$symbol, keytype=&quot;SYMBOL&quot;, column=&quot;ENSEMBL&quot;) keep &lt;- !is.na(gene.ids) &amp; !duplicated(gene.ids) sce.grun &lt;- sce.grun[keep,] rownames(sce.grun) &lt;- gene.ids[keep] 28.3 Quality control unfiltered &lt;- sce.grun This dataset lacks mitochondrial genes so we will do without them for quality control. We compute the median and MAD while blocking on the donor; for donors where the assumption of a majority of high-quality cells seems to be violated (Figure 28.1), we compute an appropriate threshold using the other donors as specified in the subset= argument. library(scater) stats &lt;- perCellQCMetrics(sce.grun) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.grun$donor, subset=sce.grun$donor %in% c(&quot;D17&quot;, &quot;D7&quot;, &quot;D2&quot;)) sce.grun &lt;- sce.grun[,!qc$discard] colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;donor&quot;, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, x=&quot;donor&quot;, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, x=&quot;donor&quot;, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ERCC percent&quot;), ncol=2 ) Figure 28.1: Distribution of each QC metric across cells from each donor of the Grun pancreas dataset. Each point represents a cell and is colored according to whether that cell was discarded. colSums(as.matrix(qc), na.rm=TRUE) ## low_lib_size low_n_features high_altexps_ERCC_percent ## 450 511 606 ## discard ## 665 28.4 Normalization library(scran) set.seed(1000) # for irlba. clusters &lt;- quickCluster(sce.grun) sce.grun &lt;- computeSumFactors(sce.grun, clusters=clusters) sce.grun &lt;- logNormCounts(sce.grun) summary(sizeFactors(sce.grun)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.093 0.505 0.795 1.000 1.222 12.088 plot(librarySizeFactors(sce.grun), sizeFactors(sce.grun), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 28.2: Relationship between the library size factors and the deconvolution size factors in the Grun pancreas dataset. 28.5 Variance modelling We block on a combined plate and donor factor. block &lt;- paste0(sce.grun$sample, &quot;_&quot;, sce.grun$donor) dec.grun &lt;- modelGeneVarWithSpikes(sce.grun, spikes=&quot;ERCC&quot;, block=block) top.grun &lt;- getTopHVGs(dec.grun, prop=0.1) We examine the number of cells in each level of the blocking factor. table(block) ## block ## CD13+ sorted cells_D17 CD24+ CD44+ live sorted cells_D17 ## 86 87 ## CD63+ sorted cells_D10 TGFBR3+ sorted cells_D17 ## 41 90 ## exocrine fraction, live sorted cells_D2 exocrine fraction, live sorted cells_D3 ## 82 7 ## live sorted cells, library 1_D10 live sorted cells, library 1_D17 ## 33 88 ## live sorted cells, library 1_D3 live sorted cells, library 1_D7 ## 24 85 ## live sorted cells, library 2_D10 live sorted cells, library 2_D17 ## 35 83 ## live sorted cells, library 2_D3 live sorted cells, library 2_D7 ## 27 84 ## live sorted cells, library 3_D3 live sorted cells, library 3_D7 ## 16 83 ## live sorted cells, library 4_D3 live sorted cells, library 4_D7 ## 29 83 par(mfrow=c(6,3)) blocked.stats &lt;- dec.grun$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) points(curfit$mean, curfit$var, col=&quot;red&quot;, pch=16) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 23.4: Per-gene variance as a function of the mean for the log-expression values in the Grun pancreas dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the spike-in transcripts (red) separately for each donor. 28.6 Data integration library(batchelor) set.seed(1001010) merged.grun &lt;- fastMNN(sce.grun, subset.row=top.grun, batch=sce.grun$donor) metadata(merged.grun)$merge.info$lost.var ## D10 D17 D2 D3 D7 ## [1,] 0.030636 0.030848 0.000000 0.00000 0.00000 ## [2,] 0.007173 0.011192 0.036693 0.00000 0.00000 ## [3,] 0.003501 0.004942 0.006731 0.05007 0.00000 ## [4,] 0.012104 0.014786 0.013833 0.01252 0.05253 28.7 Dimensionality reduction set.seed(100111) merged.grun &lt;- runTSNE(merged.grun, dimred=&quot;corrected&quot;) 28.8 Clustering snn.gr &lt;- buildSNNGraph(merged.grun, use.dimred=&quot;corrected&quot;) merged.grun$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) table(Cluster=merged.grun$cluster, Donor=merged.grun$batch) ## Donor ## Cluster D10 D17 D2 D3 D7 ## 1 17 73 3 2 77 ## 2 6 11 5 7 6 ## 3 12 128 0 0 62 ## 4 28 108 43 13 118 ## 5 32 70 31 80 28 ## 6 5 13 0 0 10 ## 7 5 18 0 1 33 ## 8 4 13 0 0 1 gridExtra::grid.arrange( plotTSNE(merged.grun, colour_by=&quot;cluster&quot;), plotTSNE(merged.grun, colour_by=&quot;batch&quot;), ncol=2 ) Figure 28.3: Obligatory \\(t\\)-SNE plots of the Grun pancreas dataset. Each point represents a cell that is colored by cluster (left) or batch (right). Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] batchelor_1.3.8 scran_1.15.14 scater_1.15.12 [4] ggplot2_3.2.1 org.Hs.eg.db_3.10.0 AnnotationDbi_1.49.0 [7] scRNAseq_2.1.5 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [10] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [13] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [16] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [19] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 bit64_0.9-7 httr_1.4.1 [4] tools_4.0.0 backports_1.1.5 R6_2.4.1 [7] irlba_2.3.3 vipor_0.4.5 DBI_1.1.0 [10] lazyeval_0.2.2 colorspace_1.4-1 withr_2.1.2 [13] gridExtra_2.3 tidyselect_0.2.5 processx_3.4.1 [16] bit_1.1-14 curl_4.3 compiler_4.0.0 [19] BiocNeighbors_1.5.1 labeling_0.3 bookdown_0.16 [22] scales_1.1.0 callr_3.4.0 rappdirs_0.3.1 [25] stringr_1.4.0 digest_0.6.23 rmarkdown_2.0 [28] XVector_0.27.0 pkgconfig_2.0.3 htmltools_0.4.0 [31] highr_0.8 limma_3.43.0 dbplyr_1.4.2 [34] fastmap_1.0.1 rlang_0.4.2 RSQLite_2.2.0 [37] shiny_1.4.0 DelayedMatrixStats_1.9.0 farver_2.0.1 [40] dplyr_0.8.3 RCurl_1.95-4.12 magrittr_1.5 [43] BiocSingular_1.3.1 GenomeInfoDbData_1.2.2 Matrix_1.2-18 [46] Rcpp_1.0.3 ggbeeswarm_0.6.0 munsell_0.5.0 [49] viridis_0.5.1 lifecycle_0.1.0 edgeR_3.29.0 [52] stringi_1.4.3 yaml_2.2.0 zlibbioc_1.33.0 [55] Rtsne_0.15 BiocFileCache_1.11.4 AnnotationHub_2.19.3 [58] grid_4.0.0 blob_1.2.0 dqrng_0.2.1 [61] promises_1.1.0 ExperimentHub_1.13.5 crayon_1.3.4 [64] lattice_0.20-38 cowplot_1.0.0 locfit_1.5-9.1 [67] zeallot_0.1.0 knitr_1.26 ps_1.3.0 [70] pillar_1.4.3 igraph_1.2.4.2 codetools_0.2-16 [73] glue_1.3.1 BiocVersion_3.11.1 evaluate_0.14 [76] BiocManager_1.30.10 vctrs_0.2.1 httpuv_1.5.2 [79] gtable_0.3.0 purrr_0.3.3 assertthat_0.2.1 [82] xfun_0.11 rsvd_1.0.2 mime_0.8 [85] xtable_1.8-4 later_1.0.0 viridisLite_0.3.0 [88] tibble_2.1.3 beeswarm_0.2.3 memoise_1.1.0 [91] statmod_1.4.32 interactiveDisplayBase_1.25.0 Bibliography "],
["muraro-human-pancreas-cel-seq.html", "Chapter 29 Muraro human pancreas (CEL-seq) 29.1 Introduction 29.2 Data loading 29.3 Quality control 29.4 Normalization 29.5 Data integration 29.6 Dimensionality reduction 29.7 Clustering Session Info", " Chapter 29 Muraro human pancreas (CEL-seq) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 29.1 Introduction This performs an analysis of the Muraro et al. (2016) CEL-seq dataset, consisting of human pancreas cells from various donors. 29.2 Data loading library(scRNAseq) sce.muraro &lt;- MuraroPancreasData() Converting back to Ensembl identifiers. library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] gene.symb &lt;- sub(&quot;__chr.*$&quot;, &quot;&quot;, rownames(sce.muraro)) gene.ids &lt;- mapIds(edb, keys=gene.symb, keytype=&quot;SYMBOL&quot;, column=&quot;GENEID&quot;) # Removing duplicated genes or genes without Ensembl IDs. keep &lt;- !is.na(gene.ids) &amp; !duplicated(gene.ids) sce.muraro &lt;- sce.muraro[keep,] rownames(sce.muraro) &lt;- gene.ids[keep] 29.3 Quality control unfiltered &lt;- sce.muraro This dataset lacks mitochondrial genes so we will do without. For the one batch that seems to have a high proportion of low-quality cells, we compute an appropriate filter threshold using a shared median and MAD from the other batches (Figure ??). library(scater) stats &lt;- perCellQCMetrics(sce.muraro) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.muraro$donor, subset=sce.muraro$donor!=&quot;D28&quot;) sce.muraro &lt;- sce.muraro[,!qc$discard] colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;donor&quot;, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, x=&quot;donor&quot;, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, x=&quot;donor&quot;, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ERCC percent&quot;), ncol=2 ) Figure 29.1: Distribution of each QC metric across cells from each donor in the Muraro pancreas dataset. Each point represents a cell and is colored according to whether that cell was discarded. We have a look at the causes of removal: colSums(as.matrix(qc)) ## low_lib_size low_n_features high_altexps_ERCC_percent ## 663 700 738 ## discard ## 773 29.4 Normalization library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.muraro) sce.muraro &lt;- computeSumFactors(sce.muraro, clusters=clusters) sce.muraro &lt;- logNormCounts(sce.muraro) summary(sizeFactors(sce.muraro)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.088 0.541 0.821 1.000 1.211 13.987 plot(librarySizeFactors(sce.muraro), sizeFactors(sce.muraro), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 29.2: Relationship between the library size factors and the deconvolution size factors in the Muraro pancreas dataset. 29.4.1 Variance modelling We block on a combined plate and donor factor. block &lt;- paste0(sce.muraro$plate, &quot;_&quot;, sce.muraro$donor) dec.muraro &lt;- modelGeneVarWithSpikes(sce.muraro, &quot;ERCC&quot;, block=block) top.muraro &lt;- getTopHVGs(dec.muraro, prop=0.1) par(mfrow=c(8,4)) blocked.stats &lt;- dec.muraro$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) points(curfit$mean, curfit$var, col=&quot;red&quot;, pch=16) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 29.3: Per-gene variance as a function of the mean for the log-expression values in the Muraro pancreas dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the spike-in transcripts (red) separately for each donor. 29.5 Data integration library(batchelor) set.seed(1001010) merged.muraro &lt;- fastMNN(sce.muraro, subset.row=top.muraro, batch=sce.muraro$donor) We use the proportion of variance lost as a diagnostic measure: metadata(merged.muraro)$merge.info$lost.var ## D28 D29 D30 D31 ## [1,] 0.060847 0.024121 0.000000 0.00000 ## [2,] 0.002646 0.003018 0.062421 0.00000 ## [3,] 0.003449 0.002641 0.002598 0.08162 29.6 Dimensionality reduction set.seed(100111) merged.muraro &lt;- runTSNE(merged.muraro, dimred=&quot;corrected&quot;) 29.7 Clustering snn.gr &lt;- buildSNNGraph(merged.muraro, use.dimred=&quot;corrected&quot;) merged.muraro$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) tab &lt;- table(Cluster=merged.muraro$cluster, CellType=sce.muraro$label) library(pheatmap) pheatmap(log10(tab+10), color=viridis::viridis(100)) Figure 29.4: Heatmap of the frequency of cells from each cell type label in each cluster. table(Cluster=merged.muraro$cluster, Donor=merged.muraro$batch) ## Donor ## Cluster D28 D29 D30 D31 ## 1 104 6 57 112 ## 2 59 21 77 97 ## 3 12 75 64 43 ## 4 28 149 126 120 ## 5 87 261 277 214 ## 6 21 7 54 26 ## 7 1 6 6 37 ## 8 6 6 5 2 ## 9 11 68 5 30 ## 10 4 2 5 8 gridExtra::grid.arrange( plotTSNE(merged.muraro, colour_by=&quot;cluster&quot;), plotTSNE(merged.muraro, colour_by=&quot;batch&quot;), ncol=2 ) Figure 29.5: Obligatory \\(t\\)-SNE plots of the Muraro pancreas dataset. Each point represents a cell that is colored by cluster (left) or batch (right). Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] pheatmap_1.0.12 batchelor_1.3.8 scran_1.15.14 [4] scater_1.15.12 ggplot2_3.2.1 ensembldb_2.11.2 [7] AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 [10] AnnotationHub_2.19.3 BiocFileCache_1.11.4 dbplyr_1.4.2 [13] scRNAseq_2.1.5 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [16] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [19] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [22] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [25] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 interactiveDisplayBase_1.25.0 codetools_0.2-16 [10] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [13] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [16] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [19] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [22] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [25] BiocSingular_1.3.1 htmltools_0.4.0 prettyunits_1.0.2 [28] tools_4.0.0 igraph_1.2.4.2 rsvd_1.0.2 [31] gtable_0.3.0 glue_1.3.1 GenomeInfoDbData_1.2.2 [34] dplyr_0.8.3 rappdirs_0.3.1 Rcpp_1.0.3 [37] vctrs_0.2.1 Biostrings_2.55.4 ExperimentHub_1.13.5 [40] rtracklayer_1.47.0 DelayedMatrixStats_1.9.0 xfun_0.11 [43] stringr_1.4.0 ps_1.3.0 mime_0.8 [46] lifecycle_0.1.0 irlba_2.3.3 statmod_1.4.32 [49] XML_3.98-1.20 edgeR_3.29.0 zlibbioc_1.33.0 [52] scales_1.1.0 hms_0.5.2 promises_1.1.0 [55] ProtGenerics_1.19.3 RColorBrewer_1.1-2 yaml_2.2.0 [58] curl_4.3 memoise_1.1.0 gridExtra_2.3 [61] biomaRt_2.43.0 stringi_1.4.3 RSQLite_2.2.0 [64] highr_0.8 BiocVersion_3.11.1 rlang_0.4.2 [67] pkgconfig_2.0.3 bitops_1.0-6 evaluate_0.14 [70] lattice_0.20-38 purrr_0.3.3 labeling_0.3 [73] GenomicAlignments_1.23.1 cowplot_1.0.0 bit_1.1-14 [76] processx_3.4.1 tidyselect_0.2.5 magrittr_1.5 [79] bookdown_0.16 R6_2.4.1 DBI_1.1.0 [82] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [85] tibble_2.1.3 crayon_1.3.4 rmarkdown_2.0 [88] viridis_0.5.1 progress_1.2.2 locfit_1.5-9.1 [91] grid_4.0.0 blob_1.2.0 callr_3.4.0 [94] digest_0.6.23 xtable_1.8-4 httpuv_1.5.2 [97] openssl_1.4.1 munsell_0.5.0 beeswarm_0.2.3 [100] viridisLite_0.3.0 vipor_0.4.5 askpass_1.1 Bibliography "],
["lawlor-human-pancreas-smarter.html", "Chapter 30 Lawlor human pancreas (SMARTer) 30.1 Introduction 30.2 Data loading 30.3 Quality control 30.4 Normalization 30.5 Variance modelling 30.6 Dimensionality reduction 30.7 Clustering Session Info", " Chapter 30 Lawlor human pancreas (SMARTer) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 30.1 Introduction This performs an analysis of the Lawlor et al. (2017) dataset, consisting of human pancreas cells from various donors. 30.2 Data loading library(scRNAseq) sce.lawlor &lt;- LawlorPancreasData() library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] anno &lt;- select(edb, keys=rownames(sce.lawlor), keytype=&quot;GENEID&quot;, columns=c(&quot;SYMBOL&quot;, &quot;SEQNAME&quot;)) rowData(sce.lawlor) &lt;- anno[match(rownames(sce.lawlor), anno[,1]),-1] 30.3 Quality control unfiltered &lt;- sce.lawlor library(scater) stats &lt;- perCellQCMetrics(sce.lawlor, subsets=list(Mito=which(rowData(sce.lawlor)$SEQNAME==&quot;MT&quot;))) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;subsets_Mito_percent&quot;, batch=sce.lawlor$`islet unos id`) sce.lawlor &lt;- sce.lawlor[,!qc$discard] colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;islet unos id&quot;, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;) + theme(axis.text.x = element_text(angle = 90)), plotColData(unfiltered, x=&quot;islet unos id&quot;, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;) + theme(axis.text.x = element_text(angle = 90)), plotColData(unfiltered, x=&quot;islet unos id&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito percent&quot;) + theme(axis.text.x = element_text(angle = 90)), ncol=2 ) Figure 30.1: Distribution of each QC metric across cells from each donor of the Lawlor pancreas dataset. Each point represents a cell and is colored according to whether that cell was discarded. plotColData(unfiltered, x=&quot;sum&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10() Figure 30.2: Percentage of mitochondrial reads in each cell in the 416B dataset compared to the total count. Each point represents a cell and is colored according to whether that cell was discarded. colSums(as.matrix(qc)) ## low_lib_size low_n_features high_subsets_Mito_percent ## 9 5 25 ## discard ## 34 30.4 Normalization library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.lawlor) sce.lawlor &lt;- computeSumFactors(sce.lawlor, clusters=clusters) sce.lawlor &lt;- logNormCounts(sce.lawlor) summary(sizeFactors(sce.lawlor)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.295 0.781 0.963 1.000 1.182 2.629 plot(librarySizeFactors(sce.lawlor), sizeFactors(sce.lawlor), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 30.3: Relationship between the library size factors and the deconvolution size factors in the Lawlor pancreas dataset. 30.5 Variance modelling Using age as a proxy for the donor. dec.lawlor &lt;- modelGeneVar(sce.lawlor, block=sce.lawlor$`islet unos id`) chosen.genes &lt;- getTopHVGs(dec.lawlor, n=2000) par(mfrow=c(4,2)) blocked.stats &lt;- dec.lawlor$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 30.4: Per-gene variance as a function of the mean for the log-expression values in the Lawlor pancreas dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted separately for each donor. 30.6 Dimensionality reduction library(BiocSingular) set.seed(101011001) sce.lawlor &lt;- runPCA(sce.lawlor, subset_row=chosen.genes, ncomponents=25) sce.lawlor &lt;- runTSNE(sce.lawlor, dimred=&quot;PCA&quot;) 30.7 Clustering snn.gr &lt;- buildSNNGraph(sce.lawlor, use.dimred=&quot;PCA&quot;) sce.lawlor$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) table(sce.lawlor$cluster, sce.lawlor$`cell type`) ## ## Acinar Alpha Beta Delta Ductal Gamma/PP None/Other Stellate ## 1 1 0 0 13 2 16 2 0 ## 2 0 1 76 1 0 0 0 0 ## 3 0 161 1 0 0 1 2 0 ## 4 0 1 0 1 0 0 5 19 ## 5 0 0 175 4 1 0 1 0 ## 6 22 0 0 0 0 0 0 0 ## 7 0 75 0 0 0 0 0 0 ## 8 0 0 0 1 20 0 2 0 table(sce.lawlor$cluster, sce.lawlor$`islet unos id`) ## ## ACCG268 ACCR015A ACEK420A ACEL337 ACHY057 ACIB065 ACIW009 ACJV399 ## 1 8 2 2 4 4 4 9 1 ## 2 14 3 2 33 3 2 4 17 ## 3 36 23 14 13 14 14 21 30 ## 4 7 1 0 1 0 4 9 4 ## 5 34 10 4 39 7 23 24 40 ## 6 0 2 13 0 0 0 5 2 ## 7 32 12 0 5 6 7 4 9 ## 8 1 1 2 1 2 1 12 3 gridExtra::grid.arrange( plotTSNE(sce.lawlor, colour_by=&quot;cluster&quot;), plotTSNE(sce.lawlor, colour_by=&quot;islet unos id&quot;), ncol=2 ) Figure 28.3: Obligatory \\(t\\)-SNE plots of the Lawlor pancreas dataset. Each point represents a cell that is colored by cluster (left) or batch (right). Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] BiocSingular_1.3.1 scran_1.15.14 scater_1.15.12 [4] ggplot2_3.2.1 ensembldb_2.11.2 AnnotationFilter_1.11.0 [7] GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 AnnotationHub_2.19.3 [10] BiocFileCache_1.11.4 dbplyr_1.4.2 scRNAseq_2.1.5 [13] SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 DelayedArray_0.13.2 [16] BiocParallel_1.21.2 matrixStats_0.55.0 Biobase_2.47.2 [19] GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 IRanges_2.21.2 [22] S4Vectors_0.25.8 BiocGenerics_0.33.0 Cairo_1.5-10 [25] BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 interactiveDisplayBase_1.25.0 codetools_0.2-16 [10] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [13] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [16] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [19] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [22] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [25] htmltools_0.4.0 prettyunits_1.0.2 tools_4.0.0 [28] igraph_1.2.4.2 rsvd_1.0.2 gtable_0.3.0 [31] glue_1.3.1 GenomeInfoDbData_1.2.2 dplyr_0.8.3 [34] rappdirs_0.3.1 Rcpp_1.0.3 vctrs_0.2.1 [37] Biostrings_2.55.4 ExperimentHub_1.13.5 rtracklayer_1.47.0 [40] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [43] ps_1.3.0 mime_0.8 lifecycle_0.1.0 [46] irlba_2.3.3 statmod_1.4.32 XML_3.98-1.20 [49] edgeR_3.29.0 zlibbioc_1.33.0 scales_1.1.0 [52] hms_0.5.2 promises_1.1.0 ProtGenerics_1.19.3 [55] yaml_2.2.0 curl_4.3 memoise_1.1.0 [58] gridExtra_2.3 biomaRt_2.43.0 stringi_1.4.3 [61] RSQLite_2.2.0 highr_0.8 BiocVersion_3.11.1 [64] rlang_0.4.2 pkgconfig_2.0.3 bitops_1.0-6 [67] evaluate_0.14 lattice_0.20-38 purrr_0.3.3 [70] labeling_0.3 GenomicAlignments_1.23.1 cowplot_1.0.0 [73] bit_1.1-14 processx_3.4.1 tidyselect_0.2.5 [76] magrittr_1.5 bookdown_0.16 R6_2.4.1 [79] DBI_1.1.0 pillar_1.4.3 withr_2.1.2 [82] RCurl_1.95-4.12 tibble_2.1.3 crayon_1.3.4 [85] rmarkdown_2.0 viridis_0.5.1 progress_1.2.2 [88] locfit_1.5-9.1 grid_4.0.0 blob_1.2.0 [91] callr_3.4.0 digest_0.6.23 xtable_1.8-4 [94] httpuv_1.5.2 openssl_1.4.1 munsell_0.5.0 [97] beeswarm_0.2.3 viridisLite_0.3.0 vipor_0.4.5 [100] askpass_1.1 Bibliography "],
["segerstolpe-human-pancreas-smart-seq2.html", "Chapter 31 Segerstolpe human pancreas (Smart-seq2) 31.1 Introduction 31.2 Data loading 31.3 Quality control Session Info", " Chapter 31 Segerstolpe human pancreas (Smart-seq2) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 31.1 Introduction This performs an analysis of the Segerstolpe et al. (2016) dataset, consisting of human pancreas cells from various donors. 31.2 Data loading library(scRNAseq) sce.seger &lt;- SegerstolpePancreasData() library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] symbols &lt;- rowData(sce.seger)$symbol ens.id &lt;- mapIds(edb, keys=symbols, keytype=&quot;SYMBOL&quot;, column=&quot;GENEID&quot;) ens.id &lt;- ifelse(is.na(ens.id), symbols, ens.id) # Removing duplicated rows. keep &lt;- !duplicated(ens.id) sce.seger &lt;- sce.seger[keep,] rownames(sce.seger) &lt;- ens.id[keep] We simplify the names of some of the relevant column metadata fields for ease of access. Some editing of the cell type labels is necessary for consistency with other data sets. emtab.meta &lt;- colData(sce.seger)[,c(&quot;cell type&quot;, &quot;individual&quot;, &quot;single cell well quality&quot;)] colnames(emtab.meta) &lt;- c(&quot;CellType&quot;, &quot;Donor&quot;, &quot;Quality&quot;) colData(sce.seger) &lt;- emtab.meta sce.seger$CellType &lt;- gsub(&quot; cell&quot;, &quot;&quot;, sce.seger$CellType) sce.seger$CellType &lt;- paste0( toupper(substr(sce.seger$CellType, 1, 1)), substring(sce.seger$CellType, 2)) 31.3 Quality control unfiltered &lt;- sce.seger We remove low quality cells that were marked by the authors. We then perform additional quality control as some of the remaining cells still have very low counts and numbers of detected features. For some batches that seem to have a majority of low-quality cells (Figure ??), we use the other batches to define an appropriate threshold via subset=. low.qual &lt;- sce.seger$Quality == &quot;low quality cell&quot; library(scater) stats &lt;- perCellQCMetrics(sce.seger) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.seger$Donor, subset=!sce.seger$Donor %in% c(&quot;HP1504901&quot;, &quot;HP1509101&quot;)) sce.seger &lt;- sce.seger[,!(qc$discard | low.qual)] colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;Donor&quot;, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;) + theme(axis.text.x = element_text(angle = 90)), plotColData(unfiltered, x=&quot;Donor&quot;, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;) + theme(axis.text.x = element_text(angle = 90)), plotColData(unfiltered, x=&quot;Donor&quot;, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ERCC percent&quot;) + theme(axis.text.x = element_text(angle = 90)), ncol=2 ) Figure 31.1: Distribution of each QC metric across cells from each donor of the Segerstolpe pancreas dataset. Each point represents a cell and is colored according to whether that cell was discarded. colSums(as.matrix(qc)) ## low_lib_size low_n_features high_altexps_ERCC_percent ## 788 1056 1031 ## discard ## 1246 31.3.1 Normalization We don’t normalize the spike-ins as there are some cells with no spike-in counts. library(scran) clusters &lt;- quickCluster(sce.seger) sce.seger &lt;- computeSumFactors(sce.seger, clusters=clusters) sce.seger &lt;- logNormCounts(sce.seger) summary(sizeFactors(sce.seger)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.014 0.390 0.708 1.000 1.332 11.182 plot(librarySizeFactors(sce.seger), sizeFactors(sce.seger), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 31.2: Relationship between the library size factors and the deconvolution size factors in the Segerstolpe pancreas dataset. 31.3.2 Variance modelling We do not use cells with no spike-ins for variance modelling. Donor AZ also has very low spike-in counts and is subsequently ignored. for.hvg &lt;- sce.seger[,librarySizeFactors(altExp(sce.seger)) &gt; 0 &amp; sce.seger$Donor!=&quot;AZ&quot;] dec.seger &lt;- modelGeneVarWithSpikes(for.hvg, &quot;ERCC&quot;, block=for.hvg$Donor) chosen.hvgs &lt;- getTopHVGs(dec.seger, n=2000) par(mfrow=c(3,3)) blocked.stats &lt;- dec.seger$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) points(curfit$mean, curfit$var, col=&quot;red&quot;, pch=16) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 31.3: Per-gene variance as a function of the mean for the log-expression values in the Grun pancreas dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the spike-in transcripts (red) separately for each donor. 31.3.3 Dimensionality reduction library(BiocSingular) set.seed(101011001) sce.seger &lt;- runPCA(sce.seger, subset_row=chosen.hvgs, ncomponents=25) sce.seger &lt;- runTSNE(sce.seger, dimred=&quot;PCA&quot;) 31.3.4 Clustering snn.gr &lt;- buildSNNGraph(sce.seger, use.dimred=&quot;PCA&quot;) sce.seger$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) We see a strong donor effect, which suggests that should have called fastMNN() at some point. (But hey, we already did that for the Muraro and Grun analyses, so where’s the fun in doing that again?) tab &lt;- table(Cluster=sce.seger$cluster, Donor=sce.seger$Donor) library(pheatmap) pheatmap(log10(tab+10), color=viridis::viridis(100)) Figure 31.4: Heatmap of the frequency of cells from each donor in each cluster. tab &lt;- table(Cluster=sce.seger$cluster, Donor=sce.seger$CellType) pheatmap(log10(tab+10), color=viridis::viridis(100)) Figure 31.5: Heatmap of the frequency of cells from each cell type label in each cluster. gridExtra::grid.arrange( plotTSNE(sce.seger, colour_by=&quot;cluster&quot;), plotTSNE(sce.seger, colour_by=&quot;Donor&quot;), ncol=2 ) Figure 28.3: Obligatory \\(t\\)-SNE plots of the Segerstolpe pancreas dataset. Each point represents a cell that is colored by cluster (left) or batch (right). Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] pheatmap_1.0.12 BiocSingular_1.3.1 scran_1.15.14 [4] scater_1.15.12 ggplot2_3.2.1 ensembldb_2.11.2 [7] AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 [10] AnnotationHub_2.19.3 BiocFileCache_1.11.4 dbplyr_1.4.2 [13] scRNAseq_2.1.5 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [16] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [19] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [22] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [25] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 interactiveDisplayBase_1.25.0 codetools_0.2-16 [10] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [13] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [16] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [19] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [22] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [25] htmltools_0.4.0 prettyunits_1.0.2 tools_4.0.0 [28] igraph_1.2.4.2 rsvd_1.0.2 gtable_0.3.0 [31] glue_1.3.1 GenomeInfoDbData_1.2.2 dplyr_0.8.3 [34] rappdirs_0.3.1 Rcpp_1.0.3 vctrs_0.2.1 [37] Biostrings_2.55.4 ExperimentHub_1.13.5 rtracklayer_1.47.0 [40] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [43] ps_1.3.0 mime_0.8 lifecycle_0.1.0 [46] irlba_2.3.3 statmod_1.4.32 XML_3.98-1.20 [49] edgeR_3.29.0 zlibbioc_1.33.0 scales_1.1.0 [52] hms_0.5.2 promises_1.1.0 ProtGenerics_1.19.3 [55] RColorBrewer_1.1-2 yaml_2.2.0 curl_4.3 [58] memoise_1.1.0 gridExtra_2.3 biomaRt_2.43.0 [61] stringi_1.4.3 RSQLite_2.2.0 highr_0.8 [64] BiocVersion_3.11.1 rlang_0.4.2 pkgconfig_2.0.3 [67] bitops_1.0-6 evaluate_0.14 lattice_0.20-38 [70] purrr_0.3.3 labeling_0.3 GenomicAlignments_1.23.1 [73] cowplot_1.0.0 bit_1.1-14 processx_3.4.1 [76] tidyselect_0.2.5 magrittr_1.5 bookdown_0.16 [79] R6_2.4.1 DBI_1.1.0 pillar_1.4.3 [82] withr_2.1.2 RCurl_1.95-4.12 tibble_2.1.3 [85] crayon_1.3.4 rmarkdown_2.0 viridis_0.5.1 [88] progress_1.2.2 locfit_1.5-9.1 grid_4.0.0 [91] blob_1.2.0 callr_3.4.0 digest_0.6.23 [94] xtable_1.8-4 httpuv_1.5.2 openssl_1.4.1 [97] munsell_0.5.0 beeswarm_0.2.3 viridisLite_0.3.0 [100] vipor_0.4.5 askpass_1.1 Bibliography "],
["merged-pancreas.html", "Chapter 32 Merged human pancreas datasets 32.1 Introduction 32.2 The good 32.3 The bad 32.4 The ugly Session Info", " Chapter 32 Merged human pancreas datasets .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 32.1 Introduction For a period in 2016, there was a great deal of interest in using scRNA-seq to profile the human pancreas at cellular resolution (Muraro et al. 2016; Grun et al. 2016; Lawlor et al. 2017; Segerstolpe et al. 2016). As a consequence, we have a surplus of human pancreas datasets generated by different authors with different technologies, which provides an ideal use case for demonstrating more complex data integration strategies. This represents a more challenging application than the PBMC dataset in Chapter 13 as it involves different sequencing protocols and different patients, most likely with differences in cell type composition. 32.2 The good We start by considering only two datasets from Muraro et al. (2016) and Grun et al. (2016). This is a relatively simple scenario involving very similar protocols (CEL-seq and CEL-seq2) and a similar set of authors. View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.grun &lt;- GrunPancreasData() #--- gene-annotation ---# library(org.Hs.eg.db) gene.ids &lt;- mapIds(org.Hs.eg.db, keys=rowData(sce.grun)$symbol, keytype=&quot;SYMBOL&quot;, column=&quot;ENSEMBL&quot;) keep &lt;- !is.na(gene.ids) &amp; !duplicated(gene.ids) sce.grun &lt;- sce.grun[keep,] rownames(sce.grun) &lt;- gene.ids[keep] #--- quality-control ---# library(scater) stats &lt;- perCellQCMetrics(sce.grun) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.grun$donor, subset=sce.grun$donor %in% c(&quot;D17&quot;, &quot;D7&quot;, &quot;D2&quot;)) sce.grun &lt;- sce.grun[,!qc$discard] #--- normalization ---# library(scran) set.seed(1000) # for irlba. clusters &lt;- quickCluster(sce.grun) sce.grun &lt;- computeSumFactors(sce.grun, clusters=clusters) sce.grun &lt;- logNormCounts(sce.grun) #--- variance-modelling ---# block &lt;- paste0(sce.grun$sample, &quot;_&quot;, sce.grun$donor) dec.grun &lt;- modelGeneVarWithSpikes(sce.grun, spikes=&quot;ERCC&quot;, block=block) top.grun &lt;- getTopHVGs(dec.grun, prop=0.1) sce.grun ## class: SingleCellExperiment ## dim: 17556 1063 ## metadata(0): ## assays(2): counts logcounts ## rownames(17556): ENSG00000268895 ENSG00000121410 ... ENSG00000074755 ENSG00000036549 ## rowData names(2): symbol chr ## colnames(1063): D2ex_1 D2ex_2 ... D17TGFB_94 D17TGFB_95 ## colData names(2): donor sample ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): ERCC View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.muraro &lt;- MuraroPancreasData() #--- gene-annotation ---# library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] gene.symb &lt;- sub(&quot;__chr.*$&quot;, &quot;&quot;, rownames(sce.muraro)) gene.ids &lt;- mapIds(edb, keys=gene.symb, keytype=&quot;SYMBOL&quot;, column=&quot;GENEID&quot;) # Removing duplicated genes or genes without Ensembl IDs. keep &lt;- !is.na(gene.ids) &amp; !duplicated(gene.ids) sce.muraro &lt;- sce.muraro[keep,] rownames(sce.muraro) &lt;- gene.ids[keep] #--- quality-control ---# library(scater) stats &lt;- perCellQCMetrics(sce.muraro) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.muraro$donor, subset=sce.muraro$donor!=&quot;D28&quot;) sce.muraro &lt;- sce.muraro[,!qc$discard] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.muraro) sce.muraro &lt;- computeSumFactors(sce.muraro, clusters=clusters) sce.muraro &lt;- logNormCounts(sce.muraro) #--- variance-modelling ---# block &lt;- paste0(sce.muraro$plate, &quot;_&quot;, sce.muraro$donor) dec.muraro &lt;- modelGeneVarWithSpikes(sce.muraro, &quot;ERCC&quot;, block=block) top.muraro &lt;- getTopHVGs(dec.muraro, prop=0.1) sce.muraro ## class: SingleCellExperiment ## dim: 16940 2299 ## metadata(0): ## assays(2): counts logcounts ## rownames(16940): ENSG00000268895 ENSG00000121410 ... ENSG00000159840 ENSG00000074755 ## rowData names(2): symbol chr ## colnames(2299): D28-1_1 D28-1_2 ... D30-8_93 D30-8_94 ## colData names(3): label donor plate ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): ERCC We subset both batches to their common universe of genes; adjust their scaling to equalize sequencing coverage (not really necessary in this case, as the coverage is already similar, but we will do so anyway for consistency); and select those genes with positive average biological components for further use. universe &lt;- intersect(rownames(sce.grun), rownames(sce.muraro)) sce.grun2 &lt;- sce.grun[universe,] dec.grun2 &lt;- dec.grun[universe,] sce.muraro2 &lt;- sce.muraro[universe,] dec.muraro2 &lt;- dec.muraro[universe,] library(batchelor) normed.pancreas &lt;- multiBatchNorm(sce.grun2, sce.muraro2) sce.grun2 &lt;- normed.pancreas[[1]] sce.muraro2 &lt;- normed.pancreas[[2]] library(scran) combined.pan &lt;- combineVar(dec.grun2, dec.muraro2) chosen.genes &lt;- rownames(combined.pan)[combined.pan$bio &gt; 0] We observe that rescaleBatches() is unable to align cells from different batches in Figure 32.1. This is attributable to differences in population composition between batches, with additional complications from non-linearities in the batch effect, e.g., when the magnitude or direction of the batch effect differs between cell types. library(scater) rescaled.pancreas &lt;- rescaleBatches(sce.grun2, sce.muraro2) set.seed(100101) rescaled.pancreas &lt;- runPCA(rescaled.pancreas, subset_row=chosen.genes, exprs_values=&quot;corrected&quot;) rescaled.pancreas &lt;- runTSNE(rescaled.pancreas, dimred=&quot;PCA&quot;) plotTSNE(rescaled.pancreas, colour_by=&quot;batch&quot;) Figure 32.1: \\(t\\)-SNE plot of the two pancreas datasets after correction with rescaleBatches(). Each point represents a cell and is colored according to the batch of origin. Here, we use fastMNN() to merge together the two human pancreas datasets described earlier. Clustering on the merged datasets yields fewer batch-specific clusters, which is recapitulated as greater intermingling between batches in Figure 32.2. This improvement over Figure 32.1 represents the ability of fastMNN() to adapt to more complex situations involving differences in population composition between batches. set.seed(1011011) mnn.pancreas &lt;- fastMNN(sce.grun2, sce.muraro2, subset.row=chosen.genes) snn.gr &lt;- buildSNNGraph(mnn.pancreas, use.dimred=&quot;corrected&quot;) clusters &lt;- igraph::cluster_walktrap(snn.gr)$membership tab &lt;- table(Cluster=clusters, Batch=mnn.pancreas$batch) tab ## Batch ## Cluster 1 2 ## 1 243 281 ## 2 308 257 ## 3 56 193 ## 4 200 837 ## 5 37 1 ## 6 24 108 ## 7 119 403 ## 8 53 68 ## 9 18 115 ## 10 0 17 ## 11 5 19 mnn.pancreas &lt;- runTSNE(mnn.pancreas, dimred=&quot;corrected&quot;) plotTSNE(mnn.pancreas, colour_by=&quot;batch&quot;) Figure 32.2: \\(t\\)-SNE plot of the two pancreas datasets after correction with fastMNN(). Each point represents a cell and is colored according to the batch of origin. 32.3 The bad Flushed with our previous success, we now attempt to merge the other datasets from Lawlor et al. (2017) and Segerstolpe et al. (2016). This is a more challenging task as it involves different technologies, mixtures of UMI and read count data and a more diverse set of authors (presumably with greater differences in the patient population). View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.lawlor &lt;- LawlorPancreasData() #--- gene-annotation ---# library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] anno &lt;- select(edb, keys=rownames(sce.lawlor), keytype=&quot;GENEID&quot;, columns=c(&quot;SYMBOL&quot;, &quot;SEQNAME&quot;)) rowData(sce.lawlor) &lt;- anno[match(rownames(sce.lawlor), anno[,1]),-1] #--- quality-control ---# library(scater) stats &lt;- perCellQCMetrics(sce.lawlor, subsets=list(Mito=which(rowData(sce.lawlor)$SEQNAME==&quot;MT&quot;))) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;subsets_Mito_percent&quot;, batch=sce.lawlor$`islet unos id`) sce.lawlor &lt;- sce.lawlor[,!qc$discard] #--- normalization ---# library(scran) set.seed(1000) clusters &lt;- quickCluster(sce.lawlor) sce.lawlor &lt;- computeSumFactors(sce.lawlor, clusters=clusters) sce.lawlor &lt;- logNormCounts(sce.lawlor) #--- variance-modelling ---# dec.lawlor &lt;- modelGeneVar(sce.lawlor, block=sce.lawlor$`islet unos id`) chosen.genes &lt;- getTopHVGs(dec.lawlor, n=2000) sce.lawlor ## class: SingleCellExperiment ## dim: 26616 604 ## metadata(0): ## assays(2): counts logcounts ## rownames(26616): ENSG00000229483 ENSG00000232849 ... ENSG00000251576 ENSG00000082898 ## rowData names(2): SYMBOL SEQNAME ## colnames(604): 10th_C11_S96 10th_C13_S61 ... 9th-C96_S81 9th-C9_S13 ## colData names(8): title age ... race Sex ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): View history #--- setup ---# library(OSCAUtils) chapterPreamble(use_cache = TRUE) #--- loading ---# library(scRNAseq) sce.seger &lt;- SegerstolpePancreasData() #--- gene-annotation ---# library(AnnotationHub) edb &lt;- AnnotationHub()[[&quot;AH73881&quot;]] symbols &lt;- rowData(sce.seger)$symbol ens.id &lt;- mapIds(edb, keys=symbols, keytype=&quot;SYMBOL&quot;, column=&quot;GENEID&quot;) ens.id &lt;- ifelse(is.na(ens.id), symbols, ens.id) # Removing duplicated rows. keep &lt;- !duplicated(ens.id) sce.seger &lt;- sce.seger[keep,] rownames(sce.seger) &lt;- ens.id[keep] #--- sample-annotation ---# emtab.meta &lt;- colData(sce.seger)[,c(&quot;cell type&quot;, &quot;individual&quot;, &quot;single cell well quality&quot;)] colnames(emtab.meta) &lt;- c(&quot;CellType&quot;, &quot;Donor&quot;, &quot;Quality&quot;) colData(sce.seger) &lt;- emtab.meta sce.seger$CellType &lt;- gsub(&quot; cell&quot;, &quot;&quot;, sce.seger$CellType) sce.seger$CellType &lt;- paste0( toupper(substr(sce.seger$CellType, 1, 1)), substring(sce.seger$CellType, 2)) #--- quality-control ---# low.qual &lt;- sce.seger$Quality == &quot;low quality cell&quot; library(scater) stats &lt;- perCellQCMetrics(sce.seger) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;, batch=sce.seger$Donor, subset=!sce.seger$Donor %in% c(&quot;HP1504901&quot;, &quot;HP1509101&quot;)) sce.seger &lt;- sce.seger[,!(qc$discard | low.qual)] #--- normalization ---# library(scran) clusters &lt;- quickCluster(sce.seger) sce.seger &lt;- computeSumFactors(sce.seger, clusters=clusters) sce.seger &lt;- logNormCounts(sce.seger) #--- variance-modelling ---# for.hvg &lt;- sce.seger[,librarySizeFactors(altExp(sce.seger)) &gt; 0 &amp; sce.seger$Donor!=&quot;AZ&quot;] dec.seger &lt;- modelGeneVarWithSpikes(for.hvg, &quot;ERCC&quot;, block=for.hvg$Donor) chosen.hvgs &lt;- getTopHVGs(dec.seger, n=2000) sce.seger ## class: SingleCellExperiment ## dim: 25454 2090 ## metadata(0): ## assays(2): counts logcounts ## rownames(25454): ENSG00000118473 ENSG00000142920 ... ENSG00000278306 eGFP ## rowData names(2): symbol refseq ## colnames(2090): HP1502401_H13 HP1502401_J14 ... HP1526901T2D_N8 HP1526901T2D_A8 ## colData names(3): CellType Donor Quality ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(1): ERCC We perform the usual routine to obtain re-normalized values and a set of HVGs. Here, we put all the objects into a list to avoid having to explicitly type their names separately. all.sce &lt;- list(Grun=sce.grun, Muraro=sce.muraro, Lawlor=sce.lawlor, Seger=sce.seger) all.dec &lt;- list(Grun=dec.grun, Muraro=dec.muraro, Lawlor=dec.lawlor, Seger=dec.seger) universe &lt;- Reduce(intersect, lapply(all.sce, rownames)) all.sce &lt;- lapply(all.sce, &quot;[&quot;, i=universe,) all.dec &lt;- lapply(all.dec, &quot;[&quot;, i=universe,) normed.pancreas &lt;- do.call(multiBatchNorm, all.sce) combined.pan &lt;- do.call(combineVar, all.dec) chosen.genes &lt;- rownames(combined.pan)[combined.pan$bio &gt; 0] We observe that the merge is generally successful, with many clusters containing contributions from each batch (Figure 32.3). There are few clusters that are specific to the Segerstolpe dataset, and if we were naive, we might consider them to represent interesting subpopulations that are not present in the other datasets. set.seed(1011110) mnn.pancreas &lt;- fastMNN(normed.pancreas) # Bumping up &#39;k&#39; to get broader clusters for this demonstration. snn.gr &lt;- buildSNNGraph(mnn.pancreas, use.dimred=&quot;corrected&quot;, k=20) clusters &lt;- igraph::cluster_walktrap(snn.gr)$membership clusters &lt;- factor(clusters) tab &lt;- table(Cluster=clusters, Batch=mnn.pancreas$batch) tab ## Batch ## Cluster Grun Lawlor Muraro Seger ## 1 311 28 256 383 ## 2 154 227 271 140 ## 3 94 244 386 177 ## 4 226 17 253 152 ## 5 0 0 0 43 ## 6 56 17 196 109 ## 7 0 0 0 42 ## 8 77 9 76 11 ## 9 0 0 0 50 ## 10 24 18 107 55 ## 11 27 0 1 0 ## 12 48 12 573 187 ## 13 0 1 16 4 ## 14 20 18 118 157 ## 15 0 0 0 209 ## 16 21 5 27 35 ## 17 0 0 0 26 ## 18 0 0 0 108 ## 19 0 0 0 185 ## 20 5 8 19 17 mnn.pancreas &lt;- runTSNE(mnn.pancreas, dimred=&quot;corrected&quot;) gridExtra::grid.arrange( plotTSNE(mnn.pancreas, colour_by=&quot;batch&quot;, text_by=I(clusters)), plotTSNE(mnn.pancreas, colour_by=I(clusters), text_by=I(clusters)), ncol=2 ) Figure 32.3: \\(t\\)-SNE plots of the four pancreas datasets after correction with fastMNN(). Each point represents a cell and is colored according to the batch of origin (left) or the assigned cluster (right). The cluster label is shown at the median location across all cells in the cluster. Fortunately, we are battle-hardened and cynical, so we are sure to check for other sources of variation. The most obvious candidate is the donor of origin for each cell (Figure 32.4), which correlates strongly to these Segerstolpe-only clusters. This is not surprising given the large differences between humans in the wild, but donor-level variation is not interesting for the purposes of cell type characterization. (That said, preservation of the within-dataset donor effects is the technically correct course of action here, as a batch correction method should try to avoid removing heterogeneity within each of its defined batches.) donors &lt;- c( normed.pancreas$Grun$donor, normed.pancreas$Muraro$donor, normed.pancreas$Lawlor$`islet unos id`, normed.pancreas$Seger$Donor ) seger.donors &lt;- donors seger.donors[mnn.pancreas$batch!=&quot;Seger&quot;] &lt;- NA plotTSNE(mnn.pancreas, colour_by=I(seger.donors)) Figure 32.4: \\(t\\)-SNE plots of the four pancreas datasets after correction with fastMNN(). Each point represents a cell and is colored according to the donor of origin for the Segerstolpe dataset. 32.4 The ugly Given these results, the most prudent course of action is to remove the donor effects within each dataset in addition to the batch effects across datasets. This involves a bit more work to properly specify the two levels of unwanted heterogeneity. To make it a bit easier, we use the noCorrect() utility to combine all batches into a single SingleCellExperiment object. combined &lt;- noCorrect(normed.pancreas) assayNames(combined) &lt;- &quot;logcounts&quot; combined$donor &lt;- donors For each donor, we determine the number of donors from the same dataset. This is used to weight the PCA step to ensure that each dataset contributes equally to the definition of the PC space, regardless of the number of donors in that dataset. (Similarly, the default behavior of fastMNN() ensures that each batch contributes equally to the PCA, regardless of the number of cells.) donors.by.batches &lt;- lapply(split(combined$donor, combined$batch), unique) donors.by.batches ## $Grun ## [1] &quot;D2&quot; &quot;D3&quot; &quot;D7&quot; &quot;D10&quot; &quot;D17&quot; ## ## $Lawlor ## [1] &quot;ACIW009&quot; &quot;ACJV399&quot; &quot;ACCG268&quot; &quot;ACCR015A&quot; &quot;ACEK420A&quot; &quot;ACEL337&quot; &quot;ACHY057&quot; &quot;ACIB065&quot; ## ## $Muraro ## [1] &quot;D28&quot; &quot;D29&quot; &quot;D31&quot; &quot;D30&quot; ## ## $Seger ## [1] &quot;HP1502401&quot; &quot;HP1504101T2D&quot; &quot;AZ&quot; &quot;HP1508501T2D&quot; &quot;HP1506401&quot; &quot;HP1507101&quot; ## [7] &quot;HP1509101&quot; &quot;HP1504901&quot; &quot;HP1525301T2D&quot; &quot;HP1526901T2D&quot; ndonors &lt;- rep(lengths(donors.by.batches), lengths(donors.by.batches)) names(ndonors) &lt;- unlist(donors.by.batches) ndonors ## D2 D3 D7 D10 D17 ACIW009 ACJV399 ## 5 5 5 5 5 8 8 ## ACCG268 ACCR015A ACEK420A ACEL337 ACHY057 ACIB065 D28 ## 8 8 8 8 8 8 4 ## D29 D31 D30 HP1502401 HP1504101T2D AZ HP1508501T2D ## 4 4 4 10 10 10 10 ## HP1506401 HP1507101 HP1509101 HP1504901 HP1525301T2D HP1526901T2D ## 10 10 10 10 10 10 We then call fastMNN() on the combined object, using the batch= argument to specify which cells belong to which donors. This will progressively merge cells from each donor until all cells are mapped onto a common coordinate space. set.seed(1010100) multiout &lt;- fastMNN(combined, batch=donors, subset.row=chosen.genes, weights=1/ndonors) # Renaming metadata fields for easier communication later. multiout$dataset &lt;- combined$batch multiout$donor &lt;- multiout$batch multiout$batch &lt;- NULL With this approach, we see that the Segerstolpe-only clusters have disappeared (Figure 32.5). Visually, there also seems to be much greater mixing between cells from different Segerstolpe donors. This suggests that we have removed most of the donor effect, which simplifies the interpretation of our clusters. library(scater) g &lt;- buildSNNGraph(multiout, use.dimred=1, k=20) clusters &lt;- igraph::cluster_walktrap(g)$membership tab &lt;- table(clusters, multiout$dataset) tab ## ## clusters Grun Lawlor Muraro Seger ## 1 265 20 278 186 ## 2 172 257 475 293 ## 3 321 27 258 388 ## 4 200 236 834 864 ## 5 57 17 193 108 ## 6 24 18 108 55 ## 7 0 1 17 4 ## 8 5 9 19 17 ## 9 19 19 117 175 multiout &lt;- runTSNE(multiout, dimred=&quot;corrected&quot;) gridExtra::grid.arrange( plotTSNE(multiout, colour_by=&quot;dataset&quot;, text_by=I(clusters)), plotTSNE(multiout, colour_by=I(seger.donors)), ncol=2 ) Figure 32.5: \\(t\\)-SNE plots of the four pancreas datasets after donor-level correction with fastMNN(). Each point represents a cell and is colored according to the batch of origin (left) or the donor of origin for the Segerstolpe-derived cells (right). The cluster label is shown at the median location across all cells in the cluster. Our clusters compare well to the published annotations, indicating that we did not inadvertently discard important factors of variation during correction. (Though in this case, the cell types are so well defined, it would be quite a feat to fail to separate them!) proposed &lt;- c(rep(NA, ncol(sce.grun)), sce.muraro$label, sce.lawlor$`cell type`, sce.seger$CellType) proposed &lt;- tolower(proposed) proposed[proposed==&quot;gamma/pp&quot;] &lt;- &quot;gamma&quot; proposed[proposed==&quot;pp&quot;] &lt;- &quot;gamma&quot; proposed[proposed==&quot;duct&quot;] &lt;- &quot;ductal&quot; proposed[proposed==&quot;psc&quot;] &lt;- &quot;stellate&quot; table(proposed, clusters) ## clusters ## proposed 1 2 3 4 5 6 7 8 9 ## acinar 421 0 2 1 0 0 0 1 0 ## alpha 1 26 7 1849 1 0 0 1 2 ## beta 3 920 4 2 0 2 1 1 7 ## co-expression 0 38 0 1 0 0 0 0 0 ## delta 0 5 2 1 306 0 0 1 1 ## ductal 6 4 613 0 0 6 10 0 1 ## endothelial 0 0 0 0 0 1 0 33 0 ## epsilon 0 1 0 1 0 0 0 0 6 ## gamma 2 0 0 0 0 0 0 0 280 ## mesenchymal 0 0 1 0 0 79 0 0 0 ## mhc class ii 0 0 0 0 0 0 4 0 0 ## nana 2 2 8 12 1 0 0 1 0 ## none/other 0 1 3 2 0 0 1 4 1 ## stellate 0 0 0 0 0 71 0 1 0 ## unclassified 0 0 0 0 0 2 0 0 0 ## unclassified endocrine 0 3 0 3 0 0 0 0 0 ## unclear 0 0 4 0 0 0 0 0 0 Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] fossil_0.3.7 shapefiles_0.7 foreign_0.8-74 [4] maps_3.3.0 sp_1.3-2 scater_1.15.12 [7] ggplot2_3.2.1 scran_1.15.14 batchelor_1.3.8 [10] SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 DelayedArray_0.13.2 [13] BiocParallel_1.21.2 matrixStats_0.55.0 Biobase_2.47.2 [16] GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 IRanges_2.21.2 [19] S4Vectors_0.25.8 BiocGenerics_0.33.0 Cairo_1.5-10 [22] BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 tools_4.0.0 R6_2.4.1 [4] irlba_2.3.3 vipor_0.4.5 lazyeval_0.2.2 [7] colorspace_1.4-1 withr_2.1.2 tidyselect_0.2.5 [10] gridExtra_2.3 processx_3.4.1 compiler_4.0.0 [13] BiocNeighbors_1.5.1 labeling_0.3 bookdown_0.16 [16] scales_1.1.0 callr_3.4.0 stringr_1.4.0 [19] digest_0.6.23 rmarkdown_2.0 XVector_0.27.0 [22] pkgconfig_2.0.3 htmltools_0.4.0 highr_0.8 [25] limma_3.43.0 rlang_0.4.2 DelayedMatrixStats_1.9.0 [28] farver_2.0.1 dplyr_0.8.3 RCurl_1.95-4.12 [31] magrittr_1.5 BiocSingular_1.3.1 GenomeInfoDbData_1.2.2 [34] Matrix_1.2-18 Rcpp_1.0.3 ggbeeswarm_0.6.0 [37] munsell_0.5.0 viridis_0.5.1 lifecycle_0.1.0 [40] stringi_1.4.3 yaml_2.2.0 edgeR_3.29.0 [43] zlibbioc_1.33.0 Rtsne_0.15 grid_4.0.0 [46] dqrng_0.2.1 crayon_1.3.4 lattice_0.20-38 [49] cowplot_1.0.0 locfit_1.5-9.1 knitr_1.26 [52] ps_1.3.0 pillar_1.4.3 igraph_1.2.4.2 [55] codetools_0.2-16 glue_1.3.1 evaluate_0.14 [58] BiocManager_1.30.10 gtable_0.3.0 purrr_0.3.3 [61] assertthat_0.2.1 xfun_0.11 rsvd_1.0.2 [64] viridisLite_0.3.0 tibble_2.1.3 beeswarm_0.2.3 [67] statmod_1.4.32 Bibliography "],
["merged-hcsc.html", "Chapter 33 Grun mouse HSC (CEL-seq) 33.1 Introduction 33.2 Data loading 33.3 Quality control 33.4 Normalization 33.5 Variance modelling 33.6 Dimensionality reduction 33.7 Clustering 33.8 Marker gene detection Session Info", " Chapter 33 Grun mouse HSC (CEL-seq) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 33.1 Introduction This performs an analysis of the mouse haematopoietic stem cell (HSC) dataset generated with CEL-seq (Grun et al. 2016). 33.2 Data loading library(scRNAseq) sce.grun.hsc &lt;- GrunHSCData(ensembl=TRUE) library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] anno &lt;- select(ens.mm.v97, keys=rownames(sce.grun.hsc), keytype=&quot;GENEID&quot;, columns=c(&quot;SYMBOL&quot;, &quot;SEQNAME&quot;)) rowData(sce.grun.hsc) &lt;- anno[match(rownames(sce.grun.hsc), anno$GENEID),] After loading and annotation, we inspect the resulting SingleCellExperiment object: sce.grun.hsc ## class: SingleCellExperiment ## dim: 21817 1915 ## metadata(0): ## assays(1): counts ## rownames(21817): ENSMUSG00000109644 ENSMUSG00000007777 ... ENSMUSG00000055670 ## ENSMUSG00000039068 ## rowData names(3): GENEID SYMBOL SEQNAME ## colnames(1915): JC4_349_HSC_FE_S13_ JC4_350_HSC_FE_S13_ ... JC48P6_1203_HSC_FE_S8_ ## JC48P6_1204_HSC_FE_S8_ ## colData names(2): sample protocol ## reducedDimNames(0): ## spikeNames(0): ## altExpNames(0): 33.3 Quality control unfiltered &lt;- sce.grun.hsc For some reason, no mitochondrial transcripts are available, and we have no spike-in transcripts, so we only use the number of detected genes and the library size for quality control. We block on the protocol used for cell extraction, ignoring the micro-dissected cells when computing this threshold. This is based on our judgement that a majority of micro-dissected plates consist of a majority of low-quality cells, compromising the assumptions of outlier detection. library(scater) stats &lt;- perCellQCMetrics(sce.grun.hsc) qc &lt;- quickPerCellQC(stats, batch=sce.grun.hsc$protocol, subset=grepl(&quot;sorted&quot;, sce.grun.hsc$protocol)) sce.grun.hsc &lt;- sce.grun.hsc[,!qc$discard] We examine the number of cells discarded for each reason. colSums(as.matrix(qc)) ## low_lib_size low_n_features discard ## 465 482 488 We create some diagnostic plots for each metric (Figure 33.1). The library sizes are unusually low for many plates of micro-dissected cells; this may be attributable to damage induced by the extraction protocol compared to cell sorting. colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, y=&quot;sum&quot;, x=&quot;sample&quot;, colour_by=&quot;discard&quot;, other_fields=&quot;protocol&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;) + facet_wrap(~protocol), plotColData(unfiltered, y=&quot;detected&quot;, x=&quot;sample&quot;, colour_by=&quot;discard&quot;, other_fields=&quot;protocol&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;) + facet_wrap(~protocol), ncol=1 ) Figure 33.1: Distribution of each QC metric across cells in the Grun HSC dataset. Each point represents a cell and is colored according to whether that cell was discarded. 33.4 Normalization library(scran) set.seed(101000110) clusters &lt;- quickCluster(sce.grun.hsc) sce.grun.hsc &lt;- computeSumFactors(sce.grun.hsc, clusters=clusters) sce.grun.hsc &lt;- logNormCounts(sce.grun.hsc) We examine some key metrics for the distribution of size factors, and compare it to the library sizes as a sanity check (Figure 33.2). summary(sizeFactors(sce.grun.hsc)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.027 0.290 0.603 1.000 1.201 16.433 plot(librarySizeFactors(sce.grun.hsc), sizeFactors(sce.grun.hsc), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 33.2: Relationship between the library size factors and the deconvolution size factors in the Grun HSC dataset. 33.5 Variance modelling We create a mean-variance trend based on the expectation that UMI counts have Poisson technical noise. We do not block on sample here as we want to preserve any difference between the micro-dissected cells and the sorted HSCs. set.seed(00010101) dec.grun.hsc &lt;- modelGeneVarByPoisson(sce.grun.hsc) top.grun.hsc &lt;- getTopHVGs(dec.grun.hsc, prop=0.1) The lack of a typical “bump” shape in Figure 33.3 is caused by the low counts. plot(dec.grun.hsc$mean, dec.grun.hsc$total, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(dec.grun.hsc) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) Figure 33.3: Per-gene variance as a function of the mean for the log-expression values in the Grun HSC dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the simulated Poisson-distributed noise. 33.6 Dimensionality reduction set.seed(101010011) sce.grun.hsc &lt;- denoisePCA(sce.grun.hsc, technical=dec.grun.hsc, subset.row=top.grun.hsc) sce.grun.hsc &lt;- runTSNE(sce.grun.hsc, dimred=&quot;PCA&quot;) We check that the number of retained PCs is sensible. ncol(reducedDim(sce.grun.hsc, &quot;PCA&quot;)) ## [1] 9 33.7 Clustering snn.gr &lt;- buildSNNGraph(sce.grun.hsc, use.dimred=&quot;PCA&quot;) sce.grun.hsc$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) table(sce.grun.hsc$cluster) ## ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 259 148 221 103 177 108 48 122 98 63 62 18 short &lt;- ifelse(grepl(&quot;micro&quot;, sce.grun.hsc$protocol), &quot;micro&quot;, &quot;sorted&quot;) gridExtra:::grid.arrange( plotTSNE(sce.grun.hsc, colour_by=&quot;cluster&quot;), plotTSNE(sce.grun.hsc, colour_by=I(short)), ncol=2 ) Figure 33.4: Obligatory \\(t\\)-SNE plot of the Grun HSC dataset, where each point represents a cell and is colored according to the assigned cluster (left) or extraction protocol (right). 33.8 Marker gene detection markers &lt;- findMarkers(sce.grun.hsc, sce.grun.hsc$cluster, test.type=&quot;wilcox&quot;, direction=&quot;up&quot;, row.data=rowData(sce.grun.hsc)[,&quot;SYMBOL&quot;,drop=FALSE]) To illustrate the manual annotation process, we examine the marker genes for one of the clusters. Upregulation of Camp, Lcn2, Ltf and lysozyme genes indicates that this cluster contains cells of neuronal origin. chosen &lt;- markers[[&#39;6&#39;]] best &lt;- chosen[chosen$Top &lt;= 10,] aucs &lt;- getMarkerEffects(best, prefix=&quot;AUC&quot;) rownames(aucs) &lt;- best$SYMBOL library(pheatmap) pheatmap(aucs, color=viridis::plasma(100)) Figure 33.5: Heatmap of the AUCs for the top marker genes in cluster 6 compared to all other clusters in the Grun HSC dataset. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] pheatmap_1.0.12 scran_1.15.14 scater_1.15.12 [4] ggplot2_3.2.1 AnnotationHub_2.19.3 BiocFileCache_1.11.4 [7] dbplyr_1.4.2 ensembldb_2.11.2 AnnotationFilter_1.11.0 [10] GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 scRNAseq_2.1.5 [13] SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 DelayedArray_0.13.2 [16] BiocParallel_1.21.2 matrixStats_0.55.0 Biobase_2.47.2 [19] GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 IRanges_2.21.2 [22] S4Vectors_0.25.8 BiocGenerics_0.33.0 Cairo_1.5-10 [25] BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 interactiveDisplayBase_1.25.0 codetools_0.2-16 [10] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [13] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [16] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [19] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [22] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [25] BiocSingular_1.3.1 htmltools_0.4.0 prettyunits_1.0.2 [28] tools_4.0.0 igraph_1.2.4.2 rsvd_1.0.2 [31] gtable_0.3.0 glue_1.3.1 GenomeInfoDbData_1.2.2 [34] dplyr_0.8.3 rappdirs_0.3.1 Rcpp_1.0.3 [37] vctrs_0.2.1 Biostrings_2.55.4 ExperimentHub_1.13.5 [40] rtracklayer_1.47.0 DelayedMatrixStats_1.9.0 xfun_0.11 [43] stringr_1.4.0 ps_1.3.0 mime_0.8 [46] lifecycle_0.1.0 irlba_2.3.3 statmod_1.4.32 [49] XML_3.98-1.20 edgeR_3.29.0 zlibbioc_1.33.0 [52] scales_1.1.0 hms_0.5.2 promises_1.1.0 [55] ProtGenerics_1.19.3 RColorBrewer_1.1-2 yaml_2.2.0 [58] curl_4.3 memoise_1.1.0 gridExtra_2.3 [61] biomaRt_2.43.0 stringi_1.4.3 RSQLite_2.2.0 [64] highr_0.8 BiocVersion_3.11.1 rlang_0.4.2 [67] pkgconfig_2.0.3 bitops_1.0-6 evaluate_0.14 [70] lattice_0.20-38 purrr_0.3.3 labeling_0.3 [73] GenomicAlignments_1.23.1 cowplot_1.0.0 bit_1.1-14 [76] processx_3.4.1 tidyselect_0.2.5 magrittr_1.5 [79] bookdown_0.16 R6_2.4.1 DBI_1.1.0 [82] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [85] tibble_2.1.3 crayon_1.3.4 rmarkdown_2.0 [88] viridis_0.5.1 progress_1.2.2 locfit_1.5-9.1 [91] grid_4.0.0 blob_1.2.0 callr_3.4.0 [94] digest_0.6.23 xtable_1.8-4 httpuv_1.5.2 [97] openssl_1.4.1 munsell_0.5.0 beeswarm_0.2.3 [100] viridisLite_0.3.0 vipor_0.4.5 askpass_1.1 Bibliography "],
["nestorowa-mouse-hsc-smart-seq2.html", "Chapter 34 Nestorowa mouse HSC (Smart-seq2) 34.1 Introduction 34.2 Data loading 34.3 Quality control 34.4 Normalization 34.5 Variance modelling 34.6 Dimensionality reduction 34.7 Clustering 34.8 Marker gene detection 34.9 Cell type annotation 34.10 Miscellaneous analyses Session Info", " Chapter 34 Nestorowa mouse HSC (Smart-seq2) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 34.1 Introduction This performs an analysis of the mouse haematopoietic stem cell (HSC) dataset generated with Smart-seq2 (Nestorowa et al. 2016). 34.2 Data loading library(scRNAseq) sce.nest &lt;- NestorowaHSCData() library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] anno &lt;- select(ens.mm.v97, keys=rownames(sce.nest), keytype=&quot;GENEID&quot;, columns=c(&quot;SYMBOL&quot;, &quot;SEQNAME&quot;)) rowData(sce.nest) &lt;- anno[match(rownames(sce.nest), anno$GENEID),] After loading and annotation, we inspect the resulting SingleCellExperiment object: sce.nest ## class: SingleCellExperiment ## dim: 46078 1920 ## metadata(0): ## assays(1): counts ## rownames(46078): ENSMUSG00000000001 ENSMUSG00000000003 ... ENSMUSG00000107391 ## ENSMUSG00000107392 ## rowData names(3): GENEID SYMBOL SEQNAME ## colnames(1920): HSPC_007 HSPC_013 ... Prog_852 Prog_810 ## colData names(2): cell.type FACS ## reducedDimNames(1): diffusion ## spikeNames(0): ## altExpNames(1): ERCC 34.3 Quality control unfiltered &lt;- sce.nest For some reason, no mitochondrial transcripts are available, so we will perform quality control using the spike-in proportions only. library(scater) stats &lt;- perCellQCMetrics(sce.nest) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;altexps_ERCC_percent&quot;) sce.nest &lt;- sce.nest[,!qc$discard] We examine the number of cells discarded for each reason. colSums(as.matrix(qc)) ## low_lib_size low_n_features high_altexps_ERCC_percent ## 146 28 241 ## discard ## 264 We create some diagnostic plots for each metric (Figure 34.1). colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, y=&quot;altexps_ERCC_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;ERCC percent&quot;), ncol=2 ) Figure 34.1: Distribution of each QC metric across cells in the Nestorowa HSC dataset. Each point represents a cell and is colored according to whether that cell was discarded. 34.4 Normalization library(scran) set.seed(101000110) clusters &lt;- quickCluster(sce.nest) sce.nest &lt;- computeSumFactors(sce.nest, clusters=clusters) sce.nest &lt;- logNormCounts(sce.nest) We examine some key metrics for the distribution of size factors, and compare it to the library sizes as a sanity check (Figure 34.2). summary(sizeFactors(sce.nest)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.044 0.422 0.748 1.000 1.249 15.927 plot(librarySizeFactors(sce.nest), sizeFactors(sce.nest), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 34.2: Relationship between the library size factors and the deconvolution size factors in the Nestorowa HSC dataset. 34.5 Variance modelling We use the spike-in transcripts to model the technical noise as a function of the mean (Figure 34.3). set.seed(00010101) dec.nest &lt;- modelGeneVarWithSpikes(sce.nest, &quot;ERCC&quot;) top.nest &lt;- getTopHVGs(dec.nest, prop=0.1) plot(dec.nest$mean, dec.nest$total, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(dec.nest) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) points(curfit$mean, curfit$var, col=&quot;red&quot;) Figure 34.3: Per-gene variance as a function of the mean for the log-expression values in the Nestorowa HSC dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the spike-ins (red). 34.6 Dimensionality reduction set.seed(101010011) sce.nest &lt;- denoisePCA(sce.nest, technical=dec.nest, subset.row=top.nest) sce.nest &lt;- runTSNE(sce.nest, dimred=&quot;PCA&quot;) We check that the number of retained PCs is sensible. ncol(reducedDim(sce.nest, &quot;PCA&quot;)) ## [1] 9 34.7 Clustering snn.gr &lt;- buildSNNGraph(sce.nest, use.dimred=&quot;PCA&quot;) sce.nest$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) table(sce.nest$cluster) ## ## 1 2 3 4 5 6 7 8 9 ## 203 472 258 175 142 229 20 83 74 plotTSNE(sce.nest, colour_by=&quot;cluster&quot;) Figure 34.4: Obligatory \\(t\\)-SNE plot of the Bach mammary gland dataset, where each point represents a cell and is colored according to the assigned cluster. 34.8 Marker gene detection markers &lt;- findMarkers(sce.nest, sce.nest$cluster, test.type=&quot;wilcox&quot;, direction=&quot;up&quot;, lfc=0.5, row.data=rowData(sce.nest)[,&quot;SYMBOL&quot;,drop=FALSE]) To illustrate the manual annotation process, we examine the marker genes for one of the clusters. Upregulation of Car2, Hebp1 amd hemoglobins indicates that cluster 8 contains erythroid precursors. chosen &lt;- markers[[&#39;8&#39;]] best &lt;- chosen[chosen$Top &lt;= 10,] aucs &lt;- getMarkerEffects(best, prefix=&quot;AUC&quot;) rownames(aucs) &lt;- best$SYMBOL library(pheatmap) pheatmap(aucs, color=viridis::plasma(100)) Figure 34.5: Heatmap of the AUCs for the top marker genes in cluster 8 compared to all other clusters. 34.9 Cell type annotation library(SingleR) mm.ref &lt;- MouseRNAseqData() # Renaming to symbols to match with reference row names. renamed &lt;- sce.nest rownames(renamed) &lt;- uniquifyFeatureNames(rownames(renamed), rowData(sce.nest)$SYMBOL) labels &lt;- SingleR(renamed, mm.ref, labels=mm.ref$label.fine) Most clusters are not assigned to any single lineage (Figure 34.6), which is perhaps unsurprising given that HSCs are quite different from their terminal fates. Cluster 8 is considered to contain erythrocytes, which is roughly consistent with our conclusions from the marker gene analysis above. tab &lt;- table(labels$labels, sce.nest$cluster) pheatmap(log10(tab+10), color=viridis::viridis(100)) Figure 34.6: Heatmap of the distribution of cells for each cluster in the Nestorowa HSC dataset, based on their assignment to each label in the mouse RNA-seq references from the SingleR package. 34.10 Miscellaneous analyses This dataset also contains information about the protein abundances in each cell from FACS. There is barely any heterogeneity in the chosen markers across the clusters (Figure 34.7); this is perhaps unsurprising given that all cells should be HSCs of some sort. Y &lt;- colData(sce.nest)$FACS keep &lt;- rowSums(is.na(Y))==0 # Removing NA intensities. averages &lt;- sumCountsAcrossCells(t(Y[keep,]), sce.nest$cluster[keep], average=TRUE) log.intensities &lt;- log2(averages+1) centered &lt;- log.intensities - rowMeans(log.intensities) pheatmap(centered, breaks=seq(-1, 1, length.out=101)) Figure 34.7: Heatmap of the centered log-average intensity for each target protein quantified by FACS in the Nestorowa HSC dataset. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] SingleR_1.1.6 pheatmap_1.0.12 scran_1.15.14 [4] scater_1.15.12 ggplot2_3.2.1 ensembldb_2.11.2 [7] AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 [10] AnnotationHub_2.19.3 BiocFileCache_1.11.4 dbplyr_1.4.2 [13] scRNAseq_2.1.5 SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 [16] DelayedArray_0.13.2 BiocParallel_1.21.2 matrixStats_0.55.0 [19] Biobase_2.47.2 GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 [22] IRanges_2.21.2 S4Vectors_0.25.8 BiocGenerics_0.33.0 [25] Cairo_1.5-10 BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 interactiveDisplayBase_1.25.0 codetools_0.2-16 [10] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [13] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [16] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [19] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [22] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [25] BiocSingular_1.3.1 htmltools_0.4.0 prettyunits_1.0.2 [28] tools_4.0.0 igraph_1.2.4.2 rsvd_1.0.2 [31] gtable_0.3.0 glue_1.3.1 GenomeInfoDbData_1.2.2 [34] dplyr_0.8.3 rappdirs_0.3.1 Rcpp_1.0.3 [37] vctrs_0.2.1 Biostrings_2.55.4 ExperimentHub_1.13.5 [40] rtracklayer_1.47.0 DelayedMatrixStats_1.9.0 xfun_0.11 [43] stringr_1.4.0 ps_1.3.0 mime_0.8 [46] lifecycle_0.1.0 irlba_2.3.3 statmod_1.4.32 [49] XML_3.98-1.20 edgeR_3.29.0 zlibbioc_1.33.0 [52] scales_1.1.0 hms_0.5.2 promises_1.1.0 [55] ProtGenerics_1.19.3 RColorBrewer_1.1-2 yaml_2.2.0 [58] curl_4.3 memoise_1.1.0 gridExtra_2.3 [61] biomaRt_2.43.0 stringi_1.4.3 RSQLite_2.2.0 [64] highr_0.8 BiocVersion_3.11.1 rlang_0.4.2 [67] pkgconfig_2.0.3 bitops_1.0-6 evaluate_0.14 [70] lattice_0.20-38 purrr_0.3.3 labeling_0.3 [73] GenomicAlignments_1.23.1 cowplot_1.0.0 bit_1.1-14 [76] processx_3.4.1 tidyselect_0.2.5 magrittr_1.5 [79] bookdown_0.16 R6_2.4.1 DBI_1.1.0 [82] pillar_1.4.3 withr_2.1.2 RCurl_1.95-4.12 [85] tibble_2.1.3 crayon_1.3.4 rmarkdown_2.0 [88] viridis_0.5.1 progress_1.2.2 locfit_1.5-9.1 [91] grid_4.0.0 blob_1.2.0 callr_3.4.0 [94] digest_0.6.23 xtable_1.8-4 httpuv_1.5.2 [97] openssl_1.4.1 munsell_0.5.0 beeswarm_0.2.3 [100] viridisLite_0.3.0 vipor_0.4.5 askpass_1.1 Bibliography "],
["pijuan-sala-chimeric-mouse-embryo-10x-genomics.html", "Chapter 35 Pijuan-Sala chimeric mouse embryo (10X Genomics) 35.1 Introduction 35.2 Data loading 35.3 Quality control 35.4 Normalization 35.5 Variance modelling 35.6 Merging 35.7 Clustering 35.8 Dimensionality reduction Session Info", " Chapter 35 Pijuan-Sala chimeric mouse embryo (10X Genomics) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 35.1 Introduction This performs an analysis of the Pijuan-Sala et al. (2019) dataset on mouse gastrulation. Here, we examine chimeric embryos at the E7.5 stage of development where td-Tomato-positive embryonic stem cells (ESCs) were injected into a wild-type blastocyst. 35.2 Data loading library(MouseGastrulationData) sce.chimera &lt;- WTChimeraData(samples=5:10) sce.chimera ## class: SingleCellExperiment ## dim: 29453 20935 ## metadata(0): ## assays(1): counts ## rownames(29453): ENSMUSG00000051951 ENSMUSG00000089699 ... ENSMUSG00000095742 tomato-td ## rowData names(2): ENSEMBL SYMBOL ## colnames(20935): cell_9769 cell_9770 ... cell_30702 cell_30703 ## colData names(10): cell barcode ... closest.cell doub.density ## reducedDimNames(2): pca.corrected.E7.5 pca.corrected.E8.5 ## spikeNames(0): ## altExpNames(0): library(scater) rownames(sce.chimera) &lt;- uniquifyFeatureNames( rowData(sce.chimera)$ENSEMBL, rowData(sce.chimera)$SYMBOL) 35.3 Quality control Quality control on the cells has already been performed by the authors, so we will not repeat it here. We additionally remove cells that are labelled as stripped nuclei or doublets. drop &lt;- sce.chimera$celltype.mapped %in% c(&quot;stripped&quot;, &quot;Doublet&quot;) sce.chimera &lt;- sce.chimera[,!drop] 35.4 Normalization We use the pre-computed size factors in sce.chimera. sce.chimera &lt;- logNormCounts(sce.chimera) 35.5 Variance modelling We retain all genes with any positive biological component, to preserve as much signal as possible across a very heterogeneous dataset. library(scran) dec.chimera &lt;- modelGeneVar(sce.chimera, block=sce.chimera$sample) chosen.hvgs &lt;- dec.chimera$bio &gt; 0 par(mfrow=c(1,2)) blocked.stats &lt;- dec.chimera$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 35.1: Per-gene variance as a function of the mean for the log-expression values in the Pijuan-Sala chimeric mouse embryo dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the variances. Figure 35.2: Per-gene variance as a function of the mean for the log-expression values in the Pijuan-Sala chimeric mouse embryo dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the variances. Figure 35.3: Per-gene variance as a function of the mean for the log-expression values in the Pijuan-Sala chimeric mouse embryo dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the variances. 35.6 Merging We use a hierarchical merge to first merge together replicates with the same genotype, and then merge samples across different genotypes. library(batchelor) set.seed(01001001) merged &lt;- correctExperiments(sce.chimera, batch=sce.chimera$sample, subset.row=chosen.hvgs, PARAM=FastMnnParam( merge.order=list( list(1,3,5), # WT (3 replicates) list(2,4,6) # td-Tomato (3 replicates) ) ) ) We use the percentage of variance lost as a diagnostic: metadata(merged)$merge.info$lost.var ## 5 6 7 8 9 10 ## [1,] 0.000e+00 0.0204433 0.000e+00 0.0169567 0.000000 0.000000 ## [2,] 0.000e+00 0.0007389 0.000e+00 0.0004409 0.000000 0.015474 ## [3,] 3.090e-02 0.0000000 2.012e-02 0.0000000 0.000000 0.000000 ## [4,] 9.024e-05 0.0000000 8.272e-05 0.0000000 0.018047 0.000000 ## [5,] 4.321e-03 0.0072518 4.124e-03 0.0078280 0.003831 0.007786 35.7 Clustering g &lt;- buildSNNGraph(merged, use.dimred=&quot;corrected&quot;) clusters &lt;- igraph::cluster_louvain(g) merged$cluster &lt;- factor(clusters$membership) We examine the distribution of cells across clusters and samples. table(Cluster=merged$cluster, Sample=merged$sample) ## Sample ## Cluster 5 6 7 8 9 10 ## 1 152 72 85 88 164 386 ## 2 19 7 13 17 20 36 ## 3 130 96 109 63 159 311 ## 4 43 35 81 81 87 353 ## 5 68 31 120 107 83 197 ## 6 122 65 64 52 63 141 ## 7 187 113 322 587 458 541 ## 8 47 22 84 50 90 131 ## 9 182 47 231 192 216 391 ## 10 95 19 36 18 50 34 ## 11 9 7 18 13 30 27 ## 12 110 69 73 96 127 252 ## 13 0 2 0 51 0 5 ## 14 38 39 50 47 126 123 ## 15 98 16 164 125 368 273 ## 16 146 37 132 110 231 216 ## 17 114 43 44 37 40 154 ## 18 78 45 189 119 340 493 ## 19 86 20 64 54 153 77 ## 20 159 77 137 101 147 401 ## 21 2 1 7 3 65 133 ## 22 11 16 20 9 47 57 ## 23 1 5 0 84 0 66 ## 24 170 47 282 173 426 542 ## 25 109 23 117 55 271 285 ## 26 122 72 298 572 296 776 35.8 Dimensionality reduction We use an external algorithm to compute nearest neighbors for greater speed. merged &lt;- runTSNE(merged, dimred=&quot;corrected&quot;, external_neighbors=TRUE) merged &lt;- runUMAP(merged, dimred=&quot;corrected&quot;, external_neighbors=TRUE) gridExtra::grid.arrange( plotTSNE(merged, colour_by=&quot;cluster&quot;, text_by=&quot;cluster&quot;, text_col=&quot;red&quot;), plotTSNE(merged, colour_by=&quot;batch&quot;) ) Figure 34.4: Obligatory \\(t\\)-SNE plots of the Pijuan-Sala chimeric mouse embryo dataset, where each point represents a cell and is colored according to the assigned cluster (top) or sample of origin (bottom). Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] batchelor_1.3.8 scran_1.15.14 scater_1.15.12 [4] ggplot2_3.2.1 MouseGastrulationData_1.1.0 SingleCellExperiment_1.9.1 [7] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [10] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [13] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [16] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [19] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] bitops_1.0-6 bit64_0.9-7 httr_1.4.1 [4] tools_4.0.0 backports_1.1.5 R6_2.4.1 [7] irlba_2.3.3 vipor_0.4.5 uwot_0.1.5 [10] DBI_1.1.0 lazyeval_0.2.2 colorspace_1.4-1 [13] withr_2.1.2 gridExtra_2.3 tidyselect_0.2.5 [16] processx_3.4.1 bit_1.1-14 curl_4.3 [19] compiler_4.0.0 BiocNeighbors_1.5.1 labeling_0.3 [22] bookdown_0.16 scales_1.1.0 callr_3.4.0 [25] rappdirs_0.3.1 stringr_1.4.0 digest_0.6.23 [28] rmarkdown_2.0 XVector_0.27.0 pkgconfig_2.0.3 [31] htmltools_0.4.0 highr_0.8 limma_3.43.0 [34] dbplyr_1.4.2 fastmap_1.0.1 rlang_0.4.2 [37] RSQLite_2.2.0 shiny_1.4.0 DelayedMatrixStats_1.9.0 [40] farver_2.0.1 dplyr_0.8.3 RCurl_1.95-4.12 [43] magrittr_1.5 BiocSingular_1.3.1 GenomeInfoDbData_1.2.2 [46] Matrix_1.2-18 Rcpp_1.0.3 ggbeeswarm_0.6.0 [49] munsell_0.5.0 viridis_0.5.1 lifecycle_0.1.0 [52] edgeR_3.29.0 stringi_1.4.3 yaml_2.2.0 [55] zlibbioc_1.33.0 Rtsne_0.15 BiocFileCache_1.11.4 [58] AnnotationHub_2.19.3 grid_4.0.0 blob_1.2.0 [61] dqrng_0.2.1 promises_1.1.0 ExperimentHub_1.13.5 [64] crayon_1.3.4 lattice_0.20-38 cowplot_1.0.0 [67] locfit_1.5-9.1 zeallot_0.1.0 knitr_1.26 [70] ps_1.3.0 pillar_1.4.3 igraph_1.2.4.2 [73] codetools_0.2-16 glue_1.3.1 BiocVersion_3.11.1 [76] evaluate_0.14 RcppParallel_4.4.4 BiocManager_1.30.10 [79] vctrs_0.2.1 httpuv_1.5.2 gtable_0.3.0 [82] purrr_0.3.3 assertthat_0.2.1 xfun_0.11 [85] rsvd_1.0.2 mime_0.8 xtable_1.8-4 [88] later_1.0.0 viridisLite_0.3.0 tibble_2.1.3 [91] AnnotationDbi_1.49.0 beeswarm_0.2.3 memoise_1.1.0 [94] statmod_1.4.32 interactiveDisplayBase_1.25.0 Bibliography "],
["bach-mouse-mammary-gland-10x-genomics.html", "Chapter 36 Bach mouse mammary gland (10X Genomics) 36.1 Introduction 36.2 Data loading 36.3 Quality control 36.4 Normalization 36.5 Variance modelling 36.6 Dimensionality reduction 36.7 Clustering Session Info", " Chapter 36 Bach mouse mammary gland (10X Genomics) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 36.1 Introduction This performs an analysis of the Bach et al. (2017) 10X Genomics dataset, from which we will consider a single sample of epithelial cells from the mouse mammary gland during gestation. 36.2 Data loading library(scRNAseq) sce.mam &lt;- BachMammaryData(samples=&quot;G_1&quot;) library(scater) rownames(sce.mam) &lt;- uniquifyFeatureNames( rowData(sce.mam)$Ensembl, rowData(sce.mam)$Symbol) library(AnnotationHub) ens.mm.v97 &lt;- AnnotationHub()[[&quot;AH73905&quot;]] rowData(sce.mam)$SEQNAME &lt;- mapIds(ens.mm.v97, keys=rowData(sce.mam)$Ensembl, keytype=&quot;GENEID&quot;, column=&quot;SEQNAME&quot;) 36.3 Quality control unfiltered &lt;- sce.mam is.mito &lt;- rowData(sce.mam)$SEQNAME == &quot;MT&quot; stats &lt;- perCellQCMetrics(sce.mam, subsets=list(Mito=which(is.mito))) qc &lt;- quickPerCellQC(stats, percent_subsets=&quot;subsets_Mito_percent&quot;) sce.mam &lt;- sce.mam[,!qc$discard] colData(unfiltered) &lt;- cbind(colData(unfiltered), stats) unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito percent&quot;), ncol=2 ) Figure 36.1: Distribution of each QC metric across cells in the Bach mammary gland dataset. Each point represents a cell and is colored according to whether that cell was discarded. plotColData(unfiltered, x=&quot;sum&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10() Figure 36.2: Percentage of mitochondrial reads in each cell in the Bach mammary gland dataset compared to its total count. Each point represents a cell and is colored according to whether that cell was discarded. colSums(as.matrix(qc)) ## low_lib_size low_n_features high_subsets_Mito_percent ## 0 0 143 ## discard ## 143 36.4 Normalization library(scran) set.seed(101000110) clusters &lt;- quickCluster(sce.mam) sce.mam &lt;- computeSumFactors(sce.mam, clusters=clusters) sce.mam &lt;- logNormCounts(sce.mam) summary(sizeFactors(sce.mam)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.271 0.522 0.758 1.000 1.204 10.958 plot(librarySizeFactors(sce.mam), sizeFactors(sce.mam), pch=16, xlab=&quot;Library size factors&quot;, ylab=&quot;Deconvolution factors&quot;, log=&quot;xy&quot;) Figure 36.3: Relationship between the library size factors and the deconvolution size factors in the Bach mammary gland dataset. 36.5 Variance modelling We use a Poisson-based technical trend to capture more genuine biological variation in the biological component. set.seed(00010101) dec.mam &lt;- modelGeneVarByPoisson(sce.mam) top.mam &lt;- getTopHVGs(dec.mam, prop=0.1) plot(dec.mam$mean, dec.mam$total, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(dec.mam) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) Figure 36.4: Per-gene variance as a function of the mean for the log-expression values in the Bach mammary gland dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to simulated Poisson counts. 36.6 Dimensionality reduction library(BiocSingular) set.seed(101010011) sce.mam &lt;- denoisePCA(sce.mam, technical=dec.mam, subset.row=top.mam) sce.mam &lt;- runTSNE(sce.mam, dimred=&quot;PCA&quot;) ncol(reducedDim(sce.mam, &quot;PCA&quot;)) ## [1] 15 36.7 Clustering We use a higher k to obtain coarser clusters (for use in doubletCluster() later). snn.gr &lt;- buildSNNGraph(sce.mam, use.dimred=&quot;PCA&quot;, k=25) sce.mam$cluster &lt;- factor(igraph::cluster_walktrap(snn.gr)$membership) table(sce.mam$cluster) ## ## 1 2 3 4 5 6 7 8 9 10 ## 550 799 716 452 24 84 52 39 32 24 plotTSNE(sce.mam, colour_by=&quot;cluster&quot;) Figure 36.5: Obligatory \\(t\\)-SNE plot of the Bach mammary gland dataset, where each point represents a cell and is colored according to the assigned cluster. Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] BiocSingular_1.3.1 scran_1.15.14 ensembldb_2.11.2 [4] AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 [7] AnnotationHub_2.19.3 BiocFileCache_1.11.4 dbplyr_1.4.2 [10] scater_1.15.12 ggplot2_3.2.1 scRNAseq_2.1.5 [13] SingleCellExperiment_1.9.1 SummarizedExperiment_1.17.1 DelayedArray_0.13.2 [16] BiocParallel_1.21.2 matrixStats_0.55.0 Biobase_2.47.2 [19] GenomicRanges_1.39.1 GenomeInfoDb_1.23.1 IRanges_2.21.2 [22] S4Vectors_0.25.8 BiocGenerics_0.33.0 Cairo_1.5-10 [25] BiocStyle_2.15.3 OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] Rtsne_0.15 ggbeeswarm_0.6.0 colorspace_1.4-1 [4] XVector_0.27.0 BiocNeighbors_1.5.1 farver_2.0.1 [7] bit64_0.9-7 interactiveDisplayBase_1.25.0 codetools_0.2-16 [10] knitr_1.26 zeallot_0.1.0 Rsamtools_2.3.2 [13] shiny_1.4.0 BiocManager_1.30.10 compiler_4.0.0 [16] httr_1.4.1 dqrng_0.2.1 backports_1.1.5 [19] assertthat_0.2.1 Matrix_1.2-18 fastmap_1.0.1 [22] lazyeval_0.2.2 limma_3.43.0 later_1.0.0 [25] htmltools_0.4.0 prettyunits_1.0.2 tools_4.0.0 [28] igraph_1.2.4.2 rsvd_1.0.2 gtable_0.3.0 [31] glue_1.3.1 GenomeInfoDbData_1.2.2 dplyr_0.8.3 [34] rappdirs_0.3.1 Rcpp_1.0.3 vctrs_0.2.1 [37] Biostrings_2.55.4 ExperimentHub_1.13.5 rtracklayer_1.47.0 [40] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [43] ps_1.3.0 mime_0.8 lifecycle_0.1.0 [46] irlba_2.3.3 statmod_1.4.32 XML_3.98-1.20 [49] edgeR_3.29.0 zlibbioc_1.33.0 scales_1.1.0 [52] hms_0.5.2 promises_1.1.0 ProtGenerics_1.19.3 [55] yaml_2.2.0 curl_4.3 memoise_1.1.0 [58] gridExtra_2.3 biomaRt_2.43.0 stringi_1.4.3 [61] RSQLite_2.2.0 highr_0.8 BiocVersion_3.11.1 [64] rlang_0.4.2 pkgconfig_2.0.3 bitops_1.0-6 [67] evaluate_0.14 lattice_0.20-38 purrr_0.3.3 [70] labeling_0.3 GenomicAlignments_1.23.1 cowplot_1.0.0 [73] bit_1.1-14 processx_3.4.1 tidyselect_0.2.5 [76] magrittr_1.5 bookdown_0.16 R6_2.4.1 [79] DBI_1.1.0 pillar_1.4.3 withr_2.1.2 [82] RCurl_1.95-4.12 tibble_2.1.3 crayon_1.3.4 [85] rmarkdown_2.0 viridis_0.5.1 progress_1.2.2 [88] locfit_1.5-9.1 grid_4.0.0 blob_1.2.0 [91] callr_3.4.0 digest_0.6.23 xtable_1.8-4 [94] httpuv_1.5.2 openssl_1.4.1 munsell_0.5.0 [97] beeswarm_0.2.3 viridisLite_0.3.0 vipor_0.4.5 [100] askpass_1.1 Bibliography "],
["hca-human-bone-marrow-10x-genomics.html", "Chapter 37 HCA human bone marrow (10X Genomics) 37.1 Introduction 37.2 Data loading 37.3 Quality control 37.4 Normalization 37.5 Data integration 37.6 Dimensionality reduction 37.7 Clustering 37.8 Differential expression 37.9 Cell type classification Session Info", " Chapter 37 HCA human bone marrow (10X Genomics) .aaron-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .aaron-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 37.1 Introduction Here, we use an example dataset from the Human Cell Atlas immune cell profiling project on bone marrow, which contains scRNA-seq data for 380,000 cells generated using the 10X Genomics technology. This is a fairly big dataset that represents a good use case for the techniques in Chapter 21. 37.2 Data loading This dataset is loaded via the HCAData package, which provides a ready-to-use SingleCellExperiment object. library(HCAData) sce.bone &lt;- HCAData(&#39;ica_bone_marrow&#39;) sce.bone$Donor &lt;- sub(&quot;_.*&quot;, &quot;&quot;, sce.bone$Barcode) We use symbols in place of IDs for easier interpretation later. library(EnsDb.Hsapiens.v86) rowData(sce.bone)$Chr &lt;- mapIds(EnsDb.Hsapiens.v86, keys=rownames(sce.bone), column=&quot;SEQNAME&quot;, keytype=&quot;GENEID&quot;) library(scater) rownames(sce.bone) &lt;- uniquifyFeatureNames(rowData(sce.bone)$ID, names = rowData(sce.bone)$Symbol) 37.3 Quality control Cell calling was not performed (see here) so we will perform QC using all metrics and block on the donor of origin during outlier detection. We perform the calculation across multiple cores to speed things up. library(BiocParallel) bpp &lt;- MulticoreParam(8) sce.bone &lt;- unfiltered &lt;- addPerCellQC(sce.bone, BPPARAM=bpp, subsets=list(Mito=which(rowData(sce.bone)$Chr==&quot;MT&quot;))) qc &lt;- quickPerCellQC(colData(sce.bone), batch=sce.bone$Donor, percent_subset=&quot;subsets_Mito_percent&quot;) sce.bone &lt;- sce.bone[,!qc$discard] unfiltered$discard &lt;- qc$discard gridExtra::grid.arrange( plotColData(unfiltered, x=&quot;Donor&quot;, y=&quot;sum&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Total count&quot;), plotColData(unfiltered, x=&quot;Donor&quot;, y=&quot;detected&quot;, colour_by=&quot;discard&quot;) + scale_y_log10() + ggtitle(&quot;Detected features&quot;), plotColData(unfiltered, x=&quot;Donor&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + ggtitle(&quot;Mito percent&quot;), ncol=2 ) Figure 37.1: Distribution of QC metrics in the HCA bone marrow dataset. Each point represents a cell and is colored according to whether it was discarded. plotColData(unfiltered, x=&quot;sum&quot;, y=&quot;subsets_Mito_percent&quot;, colour_by=&quot;discard&quot;) + scale_x_log10() Figure 37.2: Percentage of mitochondrial reads in each cell in the Bach mammary gland dataset compared to its total count. Each point represents a cell and is colored according to whether that cell was discarded. 37.4 Normalization For a minor speed-up, we use already-computed library sizes rather than re-computing them from the column sums. sce.bone &lt;- logNormCounts(sce.bone, size_factors = sce.bone$sum) summary(sizeFactors(sce.bone)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.05 0.47 0.65 1.00 0.89 42.38 37.4.1 Variance modeling We block on the donor of origin to mitigate batch effects during HVG selection. We select a larger number of HVGs to capture any batch-specific variation that might be present. library(scran) dec.bone &lt;- modelGeneVar(sce.bone, block=sce.bone$Donor, BPPARAM=bpp) top.bone &lt;- getTopHVGs(dec.bone, n=5000) par(mfrow=c(4,2)) blocked.stats &lt;- dec.bone$per.block for (i in colnames(blocked.stats)) { current &lt;- blocked.stats[[i]] plot(current$mean, current$total, main=i, pch=16, cex=0.5, xlab=&quot;Mean of log-expression&quot;, ylab=&quot;Variance of log-expression&quot;) curfit &lt;- metadata(current) curve(curfit$trend(x), col=&#39;dodgerblue&#39;, add=TRUE, lwd=2) } Figure 34.3: Per-gene variance as a function of the mean for the log-expression values in the Bach mammary gland dataset. Each point represents a gene (black) with the mean-variance trend (blue) fitted to the variances. 37.5 Data integration Here we use multiple cores, randomized SVD and approximate nearest-neighbor detection to speed up this step. library(batchelor) library(BiocNeighbors) set.seed(1010001) merged.bone &lt;- fastMNN(sce.bone, batch = sce.bone$Donor, subset.row = top.bone, BSPARAM=BiocSingular::RandomParam(deferred = TRUE), BNPARAM=AnnoyParam(), BPPARAM=bpp) reducedDim(sce.bone, &#39;MNN&#39;) &lt;- reducedDim(merged.bone, &#39;corrected&#39;) We use the percentage of variance lost as a diagnostic measure: metadata(merged.bone)$merge.info$lost.var ## MantonBM1 MantonBM2 MantonBM3 MantonBM4 MantonBM5 MantonBM6 MantonBM7 MantonBM8 ## [1,] 0.011726 0.009007 0.000000 0.000000 0.000000 0.000000 0.000000 0.00000 ## [2,] 0.008174 0.008151 0.025108 0.000000 0.000000 0.000000 0.000000 0.00000 ## [3,] 0.005773 0.003770 0.005159 0.025857 0.000000 0.000000 0.000000 0.00000 ## [4,] 0.003498 0.002782 0.002612 0.003059 0.028205 0.000000 0.000000 0.00000 ## [5,] 0.005713 0.003595 0.003571 0.005905 0.007077 0.033551 0.000000 0.00000 ## [6,] 0.004375 0.004482 0.003974 0.003903 0.004650 0.005169 0.035335 0.00000 ## [7,] 0.002400 0.001970 0.002765 0.002469 0.001756 0.002389 0.002168 0.04198 37.6 Dimensionality reduction We set external_neighbors=TRUE to replace the internal nearest neighbor search in the UMAP implementation with our parallelized approximate search. We also set the number of threads to be used in the UMAP iterations. set.seed(01010100) sce.bone &lt;- runUMAP(sce.bone, dimred=&quot;MNN&quot;, external_neighbors=TRUE, BNPARAM=AnnoyParam(), BPPARAM=bpp, n_threads=bpnworkers(bpp)) 37.7 Clustering Graph-based clustering generates an excessively large intermediate graph, so we will switch to \\(k\\)-means instead. We err on the side of overclustering to ensure that the major cell types are distinguished; in fact, this is actually useful for resolving fine structure with such a large number of cells. Some parameter fiddling is required to improve convergence with a large number of points. set.seed(1000) kout.bone &lt;- kmeans(reducedDim(sce.bone, &quot;MNN&quot;), centers=40, iter.max=1000, algorithm=&quot;MacQueen&quot;) sce.bone$cluster &lt;- factor(kout.bone$cluster) We observe mostly balanced contributions from different samples to each cluster (Figure 37.3), consistent with the expectation that all samples are replicates from different donors. tab &lt;- table(Cluster=sce.bone$cluster, Donor=sce.bone$Donor) library(pheatmap) pheatmap(log10(tab+10), color=viridis::viridis(100)) Figure 37.3: Heatmap of log10-number of cells in each cluster (row) from each sample (column). # TODO: add scrambling option in scater&#39;s plotting functions. scrambled &lt;- sample(ncol(sce.bone)) gridExtra::grid.arrange( plotUMAP(sce.bone, colour_by=&quot;cluster&quot;), plotUMAP(sce.bone[,scrambled], colour_by=&quot;Donor&quot;) ) Figure 37.4: UMAP plots of the HCA bone marrow dataset after merging. Each point represents a cell and is colored according to the assigned cluster (top) or the donor of origin (bottom). We end up with quite a few clusters, several of which are likely to be closely related to each other and thus redundant. These can be easily identified by further clustering on the cluster centroids in kout.bone (Figure 37.5), with the aim being to avoid unnecessary manual annotation of close relatives. bone.clust &lt;- hclust(dist(kout.bone$centers)) plot(bone.clust) Figure 37.5: Hierarchical clustering of the \\(k\\)-means cluster centroids from the PBMC dataset. 37.8 Differential expression We identify marker genes for each cluster while blocking on the donor. markers.bone &lt;- findMarkers(sce.bone, sce.bone$cluster, block = sce.bone$Donor, direction = &#39;up&#39;, lfc = 1, BPPARAM=bpp) We visualize the top markers for a randomly chosen cluster using a “dot plot” in Figure 37.6. The presence of upregulated genes like LYZ, S100A8 and VCAN is consistent with a monocyte identity for this cluster. top.markers &lt;- markers.bone[[&quot;1&quot;]] best &lt;- top.markers[top.markers$Top &lt;= 5,] lfcs &lt;- getMarkerEffects(best) library(pheatmap) pheatmap(lfcs, breaks=seq(-5, 5, length.out=101)) Figure 37.6: Heatmap of log2-fold changes for the top marker genes (rows) of cluster 1 compared to all other clusters (columns). 37.9 Cell type classification We perform automated cell type classification using a reference dataset to annotate each cluster based on its pseudo-bulk profile. This is faster than the per-cell approaches described in Chapter 12, but sacrifices resolution for detecting heterogeneity inside a cluster. Nonetheless, it is often sufficient for a quick assignment of cluster identity, and indeed, cluster 1 is also identified as consisting of monocytes from this analysis. # TODO: have SingleR use sumCountsAcrossCells to benefit from # parallelized summation as well. aggregated &lt;- sumCountsAcrossCells(sce.bone, id=sce.bone$cluster) library(SingleR) hpc &lt;- HumanPrimaryCellAtlasData() anno.single &lt;- SingleR(aggregated, ref = hpc, labels = hpc$label.main) anno.single ## DataFrame with 40 rows and 5 columns ## scores first.labels tuning.scores labels ## &lt;matrix&gt; &lt;character&gt; &lt;DataFrame&gt; &lt;character&gt; ## 1 0.716864:0.347252:0.421488:... Pre-B_cell_CD34- 0.543019:0.286695 Monocyte ## 2 0.568879:0.351125:0.393918:... NK_cell 0.465763:0.391508 T_cells ## 3 0.742036:0.353321:0.428157:... Pre-B_cell_CD34- 0.611069:0.166815 Monocyte ## 4 0.572306:0.334790:0.393977:... NK_cell 0.546806:0.396790 T_cells ## 5 0.551343:0.344866:0.387720:... T_cells 0.576622:0.424378 T_cells ## ... ... ... ... ... ## 36 0.692143:0.379790:0.426240:... Pre-B_cell_CD34- 0.482509:-0.000122278 Pre-B_cell_CD34- ## 37 0.553602:0.321066:0.373070:... NK_cell 0.819197: 0.749865965 NK_cell ## 38 0.504649:0.386480:0.426791:... MEP 0.384879: 0.355725448 BM &amp; Prog. ## 39 0.695130:0.371602:0.432913:... Pre-B_cell_CD34- 0.298607: 0.217096816 Pre-B_cell_CD34- ## 40 0.556241:0.347183:0.406732:... T_cells 0.746055:-0.195894839 T_cells ## pruned.labels ## &lt;character&gt; ## 1 Monocyte ## 2 T_cells ## 3 Monocyte ## 4 T_cells ## 5 T_cells ## ... ... ## 36 Pre-B_cell_CD34- ## 37 NK_cell ## 38 BM &amp; Prog. ## 39 Pre-B_cell_CD34- ## 40 T_cells Session Info View session info R Under development (unstable) (2019-12-29 r77627) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 14.04.6 LTS Matrix products: default BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C LC_TIME=en_US.UTF-8 [4] LC_COLLATE=C LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 [7] LC_PAPER=en_US.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 parallel stats graphics grDevices utils datasets methods base other attached packages: [1] SingleR_1.1.6 pheatmap_1.0.12 BiocNeighbors_1.5.1 [4] batchelor_1.3.8 scran_1.15.14 scater_1.15.12 [7] ggplot2_3.2.1 EnsDb.Hsapiens.v86_2.99.0 ensembldb_2.11.2 [10] AnnotationFilter_1.11.0 GenomicFeatures_1.39.2 AnnotationDbi_1.49.0 [13] rhdf5_2.31.1 HCAData_1.3.0 SingleCellExperiment_1.9.1 [16] SummarizedExperiment_1.17.1 DelayedArray_0.13.2 BiocParallel_1.21.2 [19] matrixStats_0.55.0 Biobase_2.47.2 GenomicRanges_1.39.1 [22] GenomeInfoDb_1.23.1 IRanges_2.21.2 S4Vectors_0.25.8 [25] BiocGenerics_0.33.0 Cairo_1.5-10 BiocStyle_2.15.3 [28] OSCAUtils_0.0.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_1.4-1 XVector_0.27.0 [4] farver_2.0.1 bit64_0.9-7 RSpectra_0.16-0 [7] interactiveDisplayBase_1.25.0 codetools_0.2-16 knitr_1.26 [10] zeallot_0.1.0 Rsamtools_2.3.2 dbplyr_1.4.2 [13] uwot_0.1.5 shiny_1.4.0 HDF5Array_1.15.2 [16] BiocManager_1.30.10 compiler_4.0.0 httr_1.4.1 [19] dqrng_0.2.1 backports_1.1.5 assertthat_0.2.1 [22] Matrix_1.2-18 fastmap_1.0.1 lazyeval_0.2.2 [25] limma_3.43.0 later_1.0.0 BiocSingular_1.3.1 [28] htmltools_0.4.0 prettyunits_1.0.2 tools_4.0.0 [31] igraph_1.2.4.2 rsvd_1.0.2 gtable_0.3.0 [34] glue_1.3.1 GenomeInfoDbData_1.2.2 dplyr_0.8.3 [37] rappdirs_0.3.1 Rcpp_1.0.3 vctrs_0.2.1 [40] Biostrings_2.55.4 ExperimentHub_1.13.5 rtracklayer_1.47.0 [43] DelayedMatrixStats_1.9.0 xfun_0.11 stringr_1.4.0 [46] ps_1.3.0 mime_0.8 lifecycle_0.1.0 [49] irlba_2.3.3 statmod_1.4.32 XML_3.98-1.20 [52] edgeR_3.29.0 AnnotationHub_2.19.3 zlibbioc_1.33.0 [55] scales_1.1.0 hms_0.5.2 promises_1.1.0 [58] ProtGenerics_1.19.3 RColorBrewer_1.1-2 yaml_2.2.0 [61] curl_4.3 memoise_1.1.0 gridExtra_2.3 [64] biomaRt_2.43.0 stringi_1.4.3 RSQLite_2.2.0 [67] highr_0.8 BiocVersion_3.11.1 rlang_0.4.2 [70] pkgconfig_2.0.3 bitops_1.0-6 evaluate_0.14 [73] lattice_0.20-38 purrr_0.3.3 Rhdf5lib_1.9.0 [76] labeling_0.3 GenomicAlignments_1.23.1 cowplot_1.0.0 [79] bit_1.1-14 processx_3.4.1 tidyselect_0.2.5 [82] magrittr_1.5 bookdown_0.16 R6_2.4.1 [85] DBI_1.1.0 pillar_1.4.3 withr_2.1.2 [88] RCurl_1.95-4.12 tibble_2.1.3 crayon_1.3.4 [91] BiocFileCache_1.11.4 rmarkdown_2.0 viridis_0.5.1 [94] progress_1.2.2 locfit_1.5-9.1 grid_4.0.0 [97] blob_1.2.0 callr_3.4.0 digest_0.6.23 [100] xtable_1.8-4 httpuv_1.5.2 RcppParallel_4.4.4 [103] openssl_1.4.1 munsell_0.5.0 beeswarm_0.2.3 [106] viridisLite_0.3.0 vipor_0.4.5 askpass_1.1 "],
["contributors.html", "Chapter 38 Contributors", " Chapter 38 Contributors Aaron Lun, PhD When one thinks of single-cell bioinformatics, one thinks of several titans who bestride the field. Unfortunately, they weren’t available, so we had to make do with Aaron instead. He likes long walks on the beach (as long as there’s Wifi) and travelling (but only in business class). His friends say that he is “absolutely insane” and “needs to get a life”, or they would if they weren’t mostly imaginary. His GitHub account is his Facebook and his Slack is his Twitter. He maintains more Bioconductor packages than he has phone numbers on his cell. He has a recurring event on his Google Calendar to fold his laundry. He is… the most boring man in the world. (“I don’t often cry when I watch anime, but when I do, my tears taste like Dos Equis.”) He currently works as a Scientist at Genentech after a stint as a research associate in John Marioni’s group at the CRUK Cambridge Institute, which was preceded by a PhD with Gordon Smyth at the Walter and Eliza Hall Institute for Medical Research. Robert Amezquita, PhD Robert Amezquita is a Postdoctoral Fellow in the Immunotherapy Integrated Research Center (IIRC) at Fred Hutch under the mentorship of Raphael Gottardo. His current research focuses on utilizing computational approaches leveraging transcriptional and epigenomic profiling at single-cell resolution to understand how novel anti-cancer therapeutics - ranging from small molecule therapies to biologics such as CAR-T cells - affect immune response dynamics. Extending from his graduate work at Yale’s Dept. of Immunobiology, Robert’s research aims to better understand the process of immune cell differentiation under the duress of cancer as a means to inform future immunotherapies. To accomplish this, Robert works collaboratively across the Fred Hutch IIRC with experimental collaborators, extensively utilizing R and Bioconductor for data analysis. Stephanie Hicks, PhD Stephanie Hicks is an Assistant Professor in the Department of Biostatistics at Johns Hopkins Bloomberg School of Public Health. Her research interests focus around developing statistical methods, tools and software for the analysis of genomics data. Specifically, her research addresses statistical challenges in epigenomics, functional genomics and single-cell genomics such as the pre-processing, normalization, analysis of noisy high-throughput data leading to an improved quantification and understanding of biological variability. She actively contributes software packages to Bioconductor and is involved in teaching courses for data science and the analysis of genomics data. She is also a faculty member of the Johns Hopkins Data Science Lab, co-host of The Corresponding Author podcast and co-founder of R-Ladies Baltimore. For more information, please see http://www.stephaniehicks.com Raphael Gottardo, PhD Raphael Gottardo is the Scientific Director of the Translational Data Science Integrated Research Center (TDS IRC) at Fred Hutch, J. Ordin Edson Foundation Endowed Chair, and Full Member within the Vaccine and Infectious Disease and Public Health Sciences Division. A pioneer in developing and applying statistical methods and software tools to distill actionable insights from large and complex biological data sets.In partnership with scientists and clinicians, he works to understand such diseases as cancer, HIV, malaria, and tuberculosis and inform the development of vaccines and treatments. He is a leader in forming interdisciplinary collaborations across the Hutch, as well as nationally and internationally, to address important research questions, particularly in the areas of vaccine research, human immunology, and immunotherapy. As director of the Translational Data Science Integrated Research Center, he fosters interaction between the Hutch’s experimental and clinical researchers and their computational and quantitative science colleagues with the goal of transforming patient care through data-driven research. Dr. Gottardo partners closely with the cancer immunotherapy program at Fred Hutch to improve treatments. For example, his team is harnessing cutting-edge computational methods to determine how cancers evade immunotherapy. He has made significant contributions to vaccine research and is the principal investigator of the Vaccine and Immunology Statistical Center of the Collaboration for AIDS Vaccine Discovery. Other notable entities Kevin Rue-Albrecht (University of Oxford, United Kingdom), for contributing the interactive data analysis chapter. Charlotte Soneson (Friedrich Miescher Institute, Switzerland), for many formatting and typographical fixes. Al J Abadi (University of Melbourne, Australia), for bringing the log-normalization corner case to our attention. "],
["bibliography.html", "Chapter 39 Bibliography", " Chapter 39 Bibliography "]
]
